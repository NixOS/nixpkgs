<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="sec-kernel-config">
  <title>Linux Kernel</title>
  <para>
    You can override the Linux kernel and associated packages using the
    option <literal>boot.kernelPackages</literal>. For instance, this
    selects the Linux 3.10 kernel:
  </para>
  <programlisting language="bash">
boot.kernelPackages = pkgs.linuxKernel.packages.linux_3_10;
</programlisting>
  <para>
    Note that this not only replaces the kernel, but also packages that
    are specific to the kernel version, such as the NVIDIA video
    drivers. This ensures that driver packages are consistent with the
    kernel.
  </para>
  <para>
    While <literal>pkgs.linuxKernel.packages</literal> contains all
    available kernel packages, you may want to use one of the
    unversioned <literal>pkgs.linuxPackages_*</literal> aliases such as
    <literal>pkgs.linuxPackages_latest</literal>, that are kept up to
    date with new versions.
  </para>
  <para>
    The default Linux kernel configuration should be fine for most
    users. You can see the configuration of your current kernel with the
    following command:
  </para>
  <programlisting>
zcat /proc/config.gz
</programlisting>
  <para>
    If you want to change the kernel configuration, you can use the
    <literal>packageOverrides</literal> feature (see
    <xref linkend="sec-customising-packages" />). For instance, to
    enable support for the kernel debugger KGDB:
  </para>
  <programlisting language="bash">
nixpkgs.config.packageOverrides = pkgs: pkgs.lib.recursiveUpdate pkgs {
  linuxKernel.kernels.linux_5_10 = pkgs.linuxKernel.kernels.linux_5_10.override {
    extraConfig = ''
      KGDB y
    '';
  };
};
</programlisting>
  <para>
    <literal>extraConfig</literal> takes a list of Linux kernel
    configuration options, one per line. The name of the option should
    not include the prefix <literal>CONFIG_</literal>. The option value
    is typically <literal>y</literal>, <literal>n</literal> or
    <literal>m</literal> (to build something as a kernel module).
  </para>
  <para>
    Kernel modules for hardware devices are generally loaded
    automatically by <literal>udev</literal>. You can force a module to
    be loaded via <xref linkend="opt-boot.kernelModules" />, e.g.
  </para>
  <programlisting language="bash">
boot.kernelModules = [ &quot;fuse&quot; &quot;kvm-intel&quot; &quot;coretemp&quot; ];
</programlisting>
  <para>
    If the module is required early during the boot (e.g. to mount the
    root file system), you can use
    <xref linkend="opt-boot.initrd.kernelModules" />:
  </para>
  <programlisting language="bash">
boot.initrd.kernelModules = [ &quot;cifs&quot; ];
</programlisting>
  <para>
    This causes the specified modules and their dependencies to be added
    to the initial ramdisk.
  </para>
  <para>
    Kernel runtime parameters can be set through
    <xref linkend="opt-boot.kernel.sysctl" />, e.g.
  </para>
  <programlisting language="bash">
boot.kernel.sysctl.&quot;net.ipv4.tcp_keepalive_time&quot; = 120;
</programlisting>
  <para>
    sets the kernelâ€™s TCP keepalive time to 120 seconds. To see the
    available parameters, run <literal>sysctl -a</literal>.
  </para>
  <section xml:id="sec-linux-config-customizing">
    <title>Building a customized kernel</title>
    <para>
      You can customize the default kernel configuration by overriding
      the arguments for your kernel package:
    </para>
    <programlisting language="bash">
let
  baseKernel = pkgs.linuxKernel.kernels.linux_5_15;
in baseKernel.override ({
  ignoreConfigErrors = true;
  autoModules = false;
  kernelPreferBuiltin = true;

  extraConfig = ''
    DEBUG_KERNEL y
    FRAME_POINTER y
    KGDB y
    KGDB_SERIAL_CONSOLE y
    DEBUG_INFO y
  '';
});
</programlisting>
    <para>
      See <literal>pkgs/os-specific/linux/kernel/generic.nix</literal>
      for details on how these arguments affect the generated
      configuration.
    </para>
    <para>
      If you already have a generated configuration file, you can build
      a kernel that uses it with
      <literal>linuxKernel.manualConfig</literal>:
    </para>
    <programlisting language="bash">
let
  baseKernel = pkgs.linuxKernel.kernels.linux_5_15;
in pkgs.linuxKernel.manualConfig {
  inherit (pkgs) stdenv hostPlatform;
  inherit (baseKernel) src;
  version = &quot;${baseKernel.version}-custom&quot;;

  configfile = /home/me/my_kernel_config;
  allowImportFromDerivation = true;
};
</programlisting>
    <para>
      Finally, to use your customized kernel package in your NixOS
      configuration, set
    </para>
    <programlisting language="bash">
boot.kernelPackages = pkgs.linuxPackagesFor yourCustomKernel;
</programlisting>
  </section>
  <section xml:id="sec-linux-config-developing-modules">
    <title>Developing kernel modules</title>
    <para>
      When developing kernel modules it's often convenient to run
      edit-compile-run loop as quickly as possible. See below snippet as
      an example of developing <literal>mellanox</literal> drivers.
    </para>
    <programlisting>
$ nix-build '&lt;nixpkgs&gt;' -A linuxPackages.kernel.dev
$ nix-shell '&lt;nixpkgs&gt;' -A linuxPackages.kernel
$ unpackPhase
$ cd linux-*
$ make -C $dev/lib/modules/*/build M=$(pwd)/drivers/net/ethernet/mellanox modules
# insmod ./drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko
</programlisting>
  </section>
</chapter>
