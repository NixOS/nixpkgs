<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="sec-release-22.11">
  <title>Release 22.11 (“Raccoon”, 2022.11/??)</title>
  <para>
    Support is planned until the end of June 2023, handing over to
    23.05.
  </para>
  <section xml:id="sec-release-22.11-highlights">
    <title>Highlights</title>
    <para>
      In addition to numerous new and upgraded packages, this release
      has the following highlights:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          During cross-compilation, tests are now executed if the test
          suite can be executed by the build platform. This is the case
          when doing “native” cross-compilation where the build and host
          platforms are largely the same, but the nixpkgs’ cross
          compilation infrastructure is used, e.g.
          <literal>pkgsStatic</literal> and <literal>pkgsLLVM</literal>.
          Another possibility is that the build platform is a superset
          of the host platform, e.g. when cross-compiling from
          <literal>x86_64-unknown-linux</literal> to
          <literal>i686-unknown-linux</literal>. The predicate gating
          test suite execution is the newly added
          <literal>canExecute</literal> predicate: You can e.g. check if
          <literal>stdenv.buildPlatform</literal> can execute binaries
          built for <literal>stdenv.hostPlatform</literal> (i.e.
          produced by <literal>stdenv.cc</literal>) by evaluating
          <literal>stdenv.buildPlatform.canExecute stdenv.hostPlatform</literal>.
        </para>
      </listitem>
      <listitem>
        <para>
          How <literal>gdk-pixbuf</literal> modules are set has changed.
        </para>
        <itemizedlist spacing="compact">
          <listitem>
            <para>
              <literal>gdk-pixbuf</literal> has been patched to accept
              multiple <literal>loaders.cache</literal> files in
              <literal>$GDK_PIXBUF_MODULE_FILE</literal>, separated by
              <literal>:</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              Setting modules through <literal>wrapGAppsHook</literal>
              (preferred method): <literal>wrapGAppsHook</literal> now
              automatically includes modules from
              <literal>gdk-pixbuf</literal> and
              <literal>librsvg</literal>. This is backwards-compatible
              for most packages. It no longer looks for a module file in
              <literal>$GDK_PIXBUF_MODULE_FILE</literal> in the build
              environment, <literal>gdk-pixbuf</literal> no longer sets
              it when added to <literal>buildInputs</literal>, and you
              no longer need to add <literal>gdk-pixbuf</literal> or
              <literal>librsvg</literal> to
              <literal>buildInputs</literal> unless the program directly
              depends on it. To include additional gdk-pixbuf modules,
              set <literal>extraGdkPixbufModules</literal> with an array
              of packages.
            </para>
          </listitem>
          <listitem>
            <para>
              Manually wrapping
              <literal>$GDK_PIXBUF_MODULE_FILE</literal>: The
              <literal>librsvg</literal> loaders.cache still contains
              all of the loaders from <literal>gdk-pixbuf</literal>.
              This might change in the future, so it is recommended that
              you explicitly include both. As this change allows users
              to extend programs with their own loaders, it is
              recommended that you <literal>--prefix</literal> rather
              than <literal>--set</literal>
              <literal>$GDK_PIXBUF_MODULE_FILE</literal> with your
              values. For example:
              <literal>makeWrapper ... --prefix GDK_PIXBUF_MODULE_FILE : &quot;${librsvg}/lib/gdk-pixbuf-2.0/2.10.0/loaders.cache:${gdk-pixbuf}/lib/gdk-pixbuf-2.0/2.10.0/loaders.cache&quot;</literal>
            </para>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para>
          PHP now defaults to PHP 8.1, updated from 8.0.
        </para>
      </listitem>
    </itemizedlist>
  </section>
  <section xml:id="sec-release-22.11-new-services">
    <title>New Services</title>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Please remove this line when you add the first item since
          docbook requires the section to be non-empty
        </para>
      </listitem>
    </itemizedlist>
  </section>
  <section xml:id="sec-release-22.11-incompatibilities">
    <title>Backward Incompatibilities</title>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          The <literal>isCompatible</literal> predicate checking CPU
          compatibility is no longer exposed by the platform sets
          generated using <literal>lib.systems.elaborate</literal>. In
          most cases you will want to use the new
          <literal>canExecute</literal> predicate instead which also
          considers the kernel / syscall interface. It is briefly
          described in the release’s
          <link linkend="sec-release-22.11-highlights">highlights
          section</link>.
          <literal>lib.systems.parse.isCompatible</literal> still
          exists, but has changed semantically: Architectures with
          differing endianness modes are <emphasis>no longer considered
          compatible</emphasis>.
        </para>
      </listitem>
    </itemizedlist>
  </section>
  <section xml:id="sec-release-22.11-notable-changes">
    <title>Other Notable Changes</title>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Please remove this line when you add the first item since
          docbook requires the section to be non-empty
        </para>
      </listitem>
    </itemizedlist>
  </section>
</section>
