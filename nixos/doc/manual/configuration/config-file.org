* NixOS Configuration File
  :PROPERTIES:
  :CUSTOM_ID: sec-configuration-file
  :END:

The NixOS configuration file generally looks like this:

#+BEGIN_EXAMPLE
  { config, pkgs, ... }:

  { option definitions
  }
#+END_EXAMPLE

The first line (={ config, pkgs, ... }:=) denotes that this is actually
a function that takes at least the two arguments =config= and =pkgs=.
(These are explained later.) The function returns a /set/ of option
definitions (={ ... }=). These definitions have the form =name =
  value=, where name is the name of an option and value is its value.
For example,

#+BEGIN_EXAMPLE
  { config, pkgs, ... }:

  {  = true;
     = "alice@example.org";
     = "/webroot";
  }
#+END_EXAMPLE

defines a configuration with three option definitions that together
enable the Apache HTTP Server with =/webroot= as the document root.

Sets can be nested, and in fact dots in option names are shorthand for
defining a set containing another set. For instance,
[[#opt-services.httpd.enable][???]] defines a set named =services= that
contains a set named =httpd=, which in turn contains an option
definition named =enable= with value =true=. This means that the example
above can also be written as:

#+BEGIN_EXAMPLE
  { config, pkgs, ... }:

  { services = {
      httpd = {
        enable = true;
        adminAddr = "alice@example.org";
        documentRoot = "/webroot";
      };
    };
  }
#+END_EXAMPLE

which may be more convenient if you have lots of option definitions that
share the same prefix (such as =services.httpd=).

NixOS checks your option definitions for correctness. For instance, if
you try to define an option that doesn't exist (that is, doesn't have a
corresponding /option declaration/), =nixos-rebuild= will give an error
like:

#+BEGIN_EXAMPLE
  The option `services.httpd.enable' defined in `/etc/nixos/configuration.nix' does not exist.
#+END_EXAMPLE

Likewise, values in option definitions must have a correct type. For
instance, =services.httpd.enable= must be a Boolean (=true= or =false=).
Trying to give it a value of another type, such as a string, will cause
an error:

#+BEGIN_EXAMPLE
  The option value `services.httpd.enable' in `/etc/nixos/configuration.nix' is not a boolean.
#+END_EXAMPLE

Options have various types of values. The most important are:

- Strings :: Strings are enclosed in double quotes, e.g.

  #+BEGIN_EXAMPLE
     = "dexter";
  #+END_EXAMPLE

  Special characters can be escaped by prefixing them with a backslash
  (e.g. =\"=).

  Multi-line strings can be enclosed in /double single quotes/, e.g.

  #+BEGIN_EXAMPLE
     =
      ''
        127.0.0.2 other-localhost
        10.0.0.1 server
      '';
  #+END_EXAMPLE

  The main difference is that it strips from each line a number of
  spaces equal to the minimal indentation of the string as a whole
  (disregarding the indentation of empty lines), and that characters
  like ="= and =\= are not special (making it more convenient for
  including things like shell code). See more info about this in the Nix
  manual [[https://nixos.org/nix/manual/#ssec-values][here]].

- Booleans :: These can be =true= or =false=, e.g.

  #+BEGIN_EXAMPLE
     = true;
     = false;
  #+END_EXAMPLE

- Integers :: For example,

  #+BEGIN_EXAMPLE
    ."net.ipv4.tcp_keepalive_time" = 60;
  #+END_EXAMPLE

  (Note that here the attribute name =net.ipv4.tcp_keepalive_time= is
  enclosed in quotes to prevent it from being interpreted as a set named
  =net= containing a set named =ipv4=, and so on. This is because it's
  not a NixOS option but the literal name of a Linux kernel setting.)

- Sets :: Sets were introduced above. They are name/value pairs enclosed
  in braces, as in the option definition

  #+BEGIN_EXAMPLE
    ."/boot" =
      { device = "/dev/sda1";
        fsType = "ext4";
        options = [ "rw" "data=ordered" "relatime" ];
      };
  #+END_EXAMPLE

- Lists :: The important thing to note about lists is that list elements
  are separated by whitespace, like this:

  #+BEGIN_EXAMPLE
     = [ "fuse" "kvm-intel" "coretemp" ];
  #+END_EXAMPLE

  List elements can be any other type, e.g. sets:

  #+BEGIN_EXAMPLE
    swapDevices = [ { device = "/dev/disk/by-label/swap"; } ];
  #+END_EXAMPLE

- Packages :: Usually, the packages you need are already part of the Nix
  Packages collection, which is a set that can be accessed through the
  function argument =pkgs=. Typical uses:

  #+BEGIN_EXAMPLE
     =
      [ pkgs.thunderbird
        pkgs.emacs
      ];

     = pkgs.postgresql_10;
  #+END_EXAMPLE

  The latter option definition changes the default PostgreSQL package
  used by NixOS's PostgreSQL service to 10.x. For more information on
  packages, including how to add new ones, see
  [[#sec-custom-packages][???]].


