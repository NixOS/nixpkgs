* Imperative Container Management
  :PROPERTIES:
  :CUSTOM_ID: sec-imperative-containers
  :END:

We'll cover imperative container management using =nixos-container=
first. Be aware that container management is currently only possible as
=root=.

You create a container with identifier =foo= as follows:

#+BEGIN_EXAMPLE
  # nixos-container create foo
#+END_EXAMPLE

This creates the container's root directory in =/var/lib/containers/foo=
and a small configuration file in =/etc/containers/foo.conf=. It also
builds the container's initial system configuration and stores it in
=/nix/var/nix/profiles/per-container/foo/system=. You can modify the
initial configuration of the container on the command line. For
instance, to create a container that has =sshd= running, with the given
public key for =root=:

#+BEGIN_EXAMPLE
  # nixos-container create foo --config '
     = true;
    users.users.root.openssh.authorizedKeys.keys = ["ssh-dss AAAAB3N…"];
  '
#+END_EXAMPLE

By default the next free address in the =10.233.0.0/16= subnet will be
chosen as container IP. This behavior can be altered by setting
=--host-address= and =--local-address=:

#+BEGIN_EXAMPLE
  # nixos-container create test --config-file test-container.nix \
      --local-address 10.235.1.2 --host-address 10.235.1.1
#+END_EXAMPLE

Creating a container does not start it. To start the container, run:

#+BEGIN_EXAMPLE
  # nixos-container start foo
#+END_EXAMPLE

This command will return as soon as the container has booted and has
reached =multi-user.target=. On the host, the container runs within a
systemd unit called =container@container-name.service=. Thus, if
something went wrong, you can get status info using =systemctl=:

#+BEGIN_EXAMPLE
  # systemctl status container@foo
#+END_EXAMPLE

If the container has started successfully, you can log in as root using
the =root-login= operation:

#+BEGIN_EXAMPLE
  # nixos-container root-login foo
  [root@foo:~]#
#+END_EXAMPLE

Note that only root on the host can do this (since there is no
authentication). You can also get a regular login prompt using the
=login= operation, which is available to all users on the host:

#+BEGIN_EXAMPLE
  # nixos-container login foo
  foo login: alice
  Password: ***
#+END_EXAMPLE

With =nixos-container run=, you can execute arbitrary commands in the
container:

#+BEGIN_EXAMPLE
  # nixos-container run foo -- uname -a
  Linux foo 3.4.82 #1-NixOS SMP Thu Mar 20 14:44:05 UTC 2014 x86_64 GNU/Linux
#+END_EXAMPLE

There are several ways to change the configuration of the container.
First, on the host, you can edit
=/var/lib/container/name/etc/nixos/configuration.nix=, and run

#+BEGIN_EXAMPLE
  # nixos-container update foo
#+END_EXAMPLE

This will build and activate the new configuration. You can also specify
a new configuration on the command line:

#+BEGIN_EXAMPLE
  # nixos-container update foo --config '
     = true;
     = "foo@example.org";
     = [ 80 ];
  '

  # curl http://$(nixos-container show-ip foo)/
  <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">…
#+END_EXAMPLE

However, note that this will overwrite the container's
=/etc/nixos/configuration.nix=.

Alternatively, you can change the configuration from within the
container itself by running =nixos-rebuild switch= inside the container.
Note that the container by default does not have a copy of the NixOS
channel, so you should run =nix-channel --update= first.

Containers can be stopped and started using =nixos-container
  stop= and =nixos-container start=, respectively, or by using
=systemctl= on the container's service unit. To destroy a container,
including its file system, do

#+BEGIN_EXAMPLE
  # nixos-container destroy foo
#+END_EXAMPLE
