{ lib
, config
, pkgs
, ...
}:

with lib;

let
  cfg = config.services.funkwhale;

  manage = let
    setupEnv = lib.concatStringsSep "\n" (mapAttrsToList (name: val: "export ${name}=\"${val}\"") cfg.settings);
  in pkgs.writeShellScript "funkwhale" ''
    ${setupEnv}
    export PYTHONPATH="${cfg.package.pythonPath}"
    test -e /var/lib/funkwhale/secret_key && {
      export $(cat /var/lib/funkwhale/secret_key | xargs)
    }
    ${optionalString (cfg.secretSettingsFile != null) "source ${cfg.secretSettingsFile}"}
      exec ${cfg.package}/bin/funkwhale "$@"
  '';
in

{
  options.services.funkwhale = {
    enable = mkEnableOption "Funkwhale, the free and decentralized audio platform";

    package = mkOption {
      type = types.package;
      default = pkgs.funkwhale;
      defaultText = literalExpression "pkgs.funkwhale";
      description = ''
        Funkwhale package to use.
      '';
    };

    settings = mkOption {
      description = ''
        Funkwhale configuration via environment variables. See
        <link xlink:href="https://dev.funkwhale.audio/funkwhale/funkwhale/-/blob/${pkgs.funkwhale.version}/deploy/env.prod.sample"/>
        for possible settings.
      '';
      type = with types; submodule {
        freeformType = with types; attrsOf str;
        options = {
          FUNKWHALE_API_IP = mkOption {
            type = types.str;
            default = "127.0.0.1";
            example = "localhost";
            description = "Host or address to bind the API socket to.";
          };

          FUNKWHALE_API_PORT = mkOption {
            type = types.port;
            default = 5678;
            example = 5000;
            description = "Port to bind the API socket to.";
            apply = toString;
          };

          FUNKWHALE_HOSTNAME = mkOption {
            type = types.str;
            example = "funkwhale.example.com";
            description = "Public domain name. Cannot be changed later without breaking the instance.";
          };

          FUNKWHALE_PROTOCOL = mkOption {
            type = types.enum [ "http" "https" ];
            default = "http";
            example = "https";
            description = "Protocol to expose the API over.";
          };

          FUNKWHALE_WEB_WORKERS = mkOption {
            type = types.ints.unsigned;
            default = 4;
            example = 2;
            description = "Number of web workers to start in parallel.";
            apply = toString;
          };

          CELERYD_CONCURRENCY = mkOption {
            type = types.ints.unsigned;
            default = 0;
            example = 4;
            description = "Number of concurrent tasks that a single celery worker can execute.";
            apply = toString;
          };

          MEDIA_ROOT = mkOption {
            type = types.str;
            default = "/var/lib/funkwhale/media";
            example = "/tank/funkwhale/media";
            description = "Path where media files are copied to, when not imported in-place.";
          };

          MUSIC_DIRECTORY_PATH = mkOption {
            type = types.str;
            example = "/tank/media/music";
            description = "Path to your existing media library, which is imported in-place.";
          };

          NGINX_MAX_BODY_SIZE = mkOption {
            type = types.str;
            default = "100M";
            example = "50M";
            description = "Max body size for file uploads on the nginx virtual host.";
          };

          STATIC_ROOT = mkOption {
            type = types.str;
            default = "/var/lib/funkwhale/static";
            description = "Path were static files (such as CSS and icons) should be compiled.";
          };
        };
      };
    };

    secretSettingsFile = mkOption {
      type = types.nullOr types.path;
      default = null;
      example = "/run/keys/funkwhale/secrets.env";
      description = ''
        File holding secret environment variables. Takes precedence over settings.

        A <literal>DJANGO_SECRET_KEY</literal> will be autogenerated and saved at
        <literal>/var/lib/funkwhale/secret_key</literal> if none is given.

        You should specify <literal>DATABASE_URL</literal> (PostgreSQL) and
        <literal>CACHE_URL</literal> (Redis) in this file, if they contain secret
        credentials.

        Other optional keys could be <literal>EMAIL_CONFIG</literal> when you need to
        set SMTP credentials.
      '';
    };

    superUserName = mkOption {
      type = types.str;
      default = "admin";
      example = "bob";
      description = ''
        Name for the superuser account.

        Changing this name after the initial setup will create an additional superuser
        and leave the previous one intact.
      '';
    };

    superUserPasswordFile = mkOption {
      type = types.nullOr types.path;
      example = "/run/keys/funkwhale/superuser-password";
      description = ''
        File containing the password for the superuser account.
      '';
    };

    superUserEmail = mkOption {
      type = types.str;
      default = "root@localhost";
      example = "you@example.com";
      description = ''
        Email address for the superuser account.
      '';
    };
  };

  config = mkIf cfg.enable {

    assertions = [ {
      assertion = !(cfg.settings ? "DJANGO_SECRET_KEY");
      message = ''
        DJANGO_SECRET_KEY cannot be set through `services.funkwhale.settings`, use `services.funkwhale.secretSettingsFile` instead.
      '';
    } ];

    users.groups.funkwhale = {};
    users.users.funkwhale = {
      createHome = true;
      group  = "funkwhale";
      home = "/var/lib/funkwhale";
      isSystemUser = true;
    };

    systemd.targets = {
      funkwhale = {
        description = "Funkwhale";
        wants = [
          "funkwhale-setup.service"
          "funkwhale-beat.service"
          "funkwhale-server.service"
          "funkwhale-worker.service"
        ];
      };
    };

    systemd.services = let
      commonUnitConfig = {
        after = [
          "network.target"
          "redis.service"
          "postgresql.service"
        ];
        wantedBy = [
          "multi-user.target"
        ];
        partOf = [
          "funkwhale.target"
        ];

        environment = {
          PYTHONPATH = cfg.package.pythonPath + ":${cfg.package.out}/lib/funkwhale";
        } // cfg.settings;
      };

      commonServiceConfig = {
        User = "funkwhale";
        Group = "funkwhale";
        RuntimeDirectory = "funkwhale";
        StateDirectory = "funkwhale";
        WorkingDirectory = "/var/lib/funkwhale";
        EnvironmentFile = [
          "-/var/lib/funkwhale/secret_key"
        ] ++ optional (cfg.secretSettingsFile != null) cfg.secretSettingsFile;
      };
    in
    {
      funkwhale-setup = {
        description = "Funkwhale setup and migrations";
        before = [
          "funkwhale-beat.service"
          "funkwhale-server.service"
          "funkwhale-worker.service"
        ];
        script = ''
          if [ -z ''${DJANGO_SECRET_KEY+x} ]; then
            (
              umask 0077
              ${cfg.package.python.interpreter} -c "from django.core.management.utils import get_random_secret_key; print(f'DJANGO_SECRET_KEY=\"{get_random_secret_key()}\"')" > $STATE_DIRECTORY/secret_key
            )
            export DJANGO_SECRET_KEY="$(cat $STATE_DIRECTORY/secret_key)"
          fi

          mkdir -p $STATE_DIRECTORY/bin
          ln -sf ${manage} $STATE_DIRECTORY/bin/funkwhale

          ${cfg.package}/bin/funkwhale migrate
          ${cfg.package}/bin/funkwhale collectstatic --no-input

          export DJANGO_SUPERUSER_USERNAME="${cfg.superUserName}"
          export DJANGO_SUPERUSER_PASSWORD="$(cat ${cfg.superUserPasswordFile})"
          export DJANGO_SUPERUSER_EMAIL="${cfg.superUserEmail}"

          if [ ! -e "$STATE_DIRECTORY/.${cfg.superUserName}_created" ]; then
            ${cfg.package}/bin/funkwhale createsuperuser --noinput
            touch "$STATE_DIRECTORY/.${cfg.superUserName}_created"
          fi
        '';
        serviceConfig = {
          Type = "oneshot";
        } // commonServiceConfig;
      } // commonUnitConfig;

      funkwhale-server = {
        description = "Funkwhale application server";

        serviceConfig = {
          ExecStart = ''
            ${cfg.package.python.pkgs.gunicorn}/bin/gunicorn config.asgi:application \
              --name=funkwhale-server \
              --worker-class=uvicorn.workers.UvicornWorker \
              --workers=${cfg.settings.FUNKWHALE_WEB_WORKERS} \
              --bind=${cfg.settings.FUNKWHALE_API_IP}:${cfg.settings.FUNKWHALE_API_PORT} \
              --pythonpath="${cfg.package.out}/lib/funkwhale/api"
            '';
        } // commonServiceConfig;
      } // commonUnitConfig;

      funkwhale-beat = {
        description = "Funkwhale celery beat process";

        serviceConfig = {
          ExecStart = ''
            ${cfg.package.python.pkgs.celery}/bin/celery \
              --app funkwhale_api.taskapp \
              beat \
              --loglevel INFO
          '';
        } // commonServiceConfig;
      } // commonUnitConfig;

      funkwhale-worker = {
        description = "Funkwhale celery worker";
        serviceConfig = {
          ExecStart = ''
            ${cfg.package.python.pkgs.celery}/bin/celery \
              --app funkwhale_api.taskapp \
              worker \
              --concurrency=${cfg.settings.CELERYD_CONCURRENCY} \
              --loglevel INFO
          '';
        } // commonServiceConfig;
      } // commonUnitConfig;
    };


    services.nginx = {
      enable = mkDefault true;
      recommendedGzipSettings = mkDefault true;
      recommendedProxySettings = mkDefault true;
      recommendedTlsSettings = mkDefault true;
      recommendedOptimisation = mkDefault true;
    };

    services.nginx.upstreams.funkwhale.servers = {
      "${cfg.settings.FUNKWHALE_API_IP}:${cfg.settings.FUNKWHALE_API_PORT}" = {};
    };

    services.nginx.virtualHosts.${cfg.settings.FUNKWHALE_HOSTNAME} = {
      locations = {
        "/" = {
          clientMaxBodySize = "${cfg.settings.NGINX_MAX_BODY_SIZE}";
          proxyPass = "http://funkwhale";
          proxyWebsockets = true;
        };
        "/front/" = {
          alias = cfg.package.frontend + "/";
          extraConfig = ''
            add_header Cache-Control "public, must-revalidate, proxy-revalidate";
            add_header Content-Security-Policy "default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self' data:; object-src 'none'; media-src 'self' data:; worker-src 'self'";
            add_header Pragma public;
            add_header Referrer-Policy "strict-origin-when-cross-origin";
            add_header Service-Worker-Allowed "/";
            expires 30d;
          '';
        };
        "=/front/embed.html" = {
          alias = cfg.package.frontend + "/embed.html";
          extraConfig = ''
            add_header Cache-Control "public, must-revalidate, proxy-revalidate";
            add_header Content-Security-Policy "default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self' data:; object-src 'none'; media-src 'self' data:; worker-src 'self'";
            add_header Pragma public;
            add_header Referrer-Policy "strict-origin-when-cross-origin";
            add_header Service-Worker-Allowed "/";
            add_header X-Frame-Options "" always;
            expires 30d;
          '';
        };
        "/rest/" = {
          proxyPass = "http://funkwhale/api/subsonic/rest/";
          proxyWebsockets = true;
        };
        "/media/" = {
          alias = "${cfg.settings.MEDIA_ROOT}/";
        };
        "/_protected/media/" = {
          alias = "${cfg.settings.MEDIA_ROOT}/";
          extraConfig = ''
            internal;
          '';
        };
        "/_protected/music/" = {
          alias = "${cfg.settings.MUSIC_DIRECTORY_PATH}/";
          extraConfig = ''
            internal;
          '';
        };
        "/staticfiles/" = {
          alias = "${cfg.settings.STATIC_ROOT}/";
        };
      };
    };
  };

  # uses attributes of the linked package
  meta.buildDocsInSandbox = false;
}
