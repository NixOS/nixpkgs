{
  config,
  lib,
  pkgs,
  ...
}:

let
  inherit (lib) types;
  cfg = config.services.opencloud;
  defaultUser = "opencloud";
  defaultGroup = defaultUser;
in
{
  options = {
    services.opencloud = {
      enable = lib.mkEnableOption "OpenCloud";

      package = lib.mkPackageOption pkgs "opencloud" { };
      webPackage = lib.mkPackageOption pkgs [ "opencloud" "web" ] { };
      idpWebPackage = lib.mkPackageOption pkgs [ "opencloud" "idp-web" ] { };

      configDir = lib.mkOption {
        type = types.nullOr types.path;
        default = lib.literalExpression ''"''${config.services.opencloud.stateDir}/config"'';
        example = "/var/lib/opencloud/config";
        description = ''
          Path to directory containing OpenCloud config file.

          Example config can be generated by `opencloud init --config-path
          fileName --admin-password "adminPass"`. Add `--insecure true` if SSL
          certificates are generated and managed externally (e.g. using
          OpenCloud behind a reverse proxy).

          Note: This directory must contain at least a `opencloud.yaml`. Ensure
          [](#opt-services.opencloud.user) has read/write access to it. In
          some circumstances you may need to add additional OpenCloud
          configuration files (e.g., `proxy.yaml`) to this directory.
        '';
      };

      environmentFile = lib.mkOption {
        type = types.nullOr types.path;
        default = null;
        example = "/run/keys/opencloud.env";
        description = ''
          An environment file as defined in {manpage}`systemd.exec(5)`.

          Configuration provided in this file will override those from
          [configDir](#opt-services.opencloud.configDir)/opencloud.yaml.
        '';
      };

      user = lib.mkOption {
        type = types.str;
        default = defaultUser;
        example = "mycloud";
        description = ''
          The user to run OpenCloud as.
          By default, a user named `${defaultUser}` will be created whose home
          directory is [](#opt-services.opencloud.stateDir).
        '';
      };

      group = lib.mkOption {
        type = types.str;
        default = defaultGroup;
        example = "mycloud";
        description = ''
          The group to run OpenCloud under.
          By default, a group named `${defaultGroup}` will be created.
        '';
      };

      address = lib.mkOption {
        type = types.str;
        default = "127.0.0.1";
        description = "Web interface address.";
      };

      port = lib.mkOption {
        type = types.port;
        default = 9200;
        description = "Web interface port.";
      };

      url = lib.mkOption {
        type = types.str;
        default = "https://localhost:9200";
        example = "https://cloud.example.com:9200";
        description = "Web interface address, including scheme and port.";
      };

      stateDir = lib.mkOption {
        default = "/var/lib/opencloud";
        type = types.str;
        description = "OpenCloud data directory.";
      };

      environment = lib.mkOption {
        type = types.attrsOf types.str;
        default = { };
        description = ''
          Extra configuration options.

          Note that all the attributes here will be copied to Nix store and
          will be world-readable. Options ending in `_PASSWORD` and `_SECRET`
          should thus be part of [](#opt-services.opencloud.environmentFile)
          instead.

          Configuration here will override those from
          [](#opt-services.opencloud.environmentFile) and will
          have highest precedence.
        '';
        example = {
          OC_INSECURE = "false";
          OC_LOG_LEVEL = "error";
          CS3_ALLOW_INSECURE = "true";
          OC_INSECURE_BACKENDS = "true";
          TLS_INSECURE = "true";
          IDP_TLS = "false";
          GRAPH_APPLICATION_ID = "1234";
          IDP_ISS = "https://localhost:9200";
          OC_SERVICE_ACCOUNT_ID = "foo";
          OC_SERVICE_ACCOUNT_SECRET = "foo";
          OC_SYSTEM_USER_API_KEY = "foo";
        };
      };
    };
  };

  config = lib.mkIf cfg.enable {
    users.users.${defaultUser} = lib.mkIf (cfg.user == defaultUser) {
      group = cfg.group;
      home = cfg.stateDir;
      isSystemUser = true;
      createHome = true;
      description = "OpenCloud daemon user";
    };

    users.groups = lib.mkIf (cfg.group == defaultGroup) { ${defaultGroup} = { }; };

    systemd = {
      services.opencloud = {
        description = "OpenCloud - a secure and private way to store, access, and share your files";
        after = [ "network.target" ];
        wantedBy = [ "multi-user.target" ];
        environment = {
          PROXY_HTTP_ADDR = "${cfg.address}:${toString cfg.port}";
          OC_URL = cfg.url;
          OC_CONFIG_DIR = if (cfg.configDir == null) then "${cfg.stateDir}/config" else cfg.configDir;
          OC_BASE_DATA_PATH = cfg.stateDir;
          WEB_ASSET_CORE_PATH = "${cfg.webPackage}";
          IDP_ASSET_PATH = "${cfg.idpWebPackage}/assets";
        } // cfg.environment;
        serviceConfig = {
          Type = "simple";
          ExecStart = "${lib.getExe cfg.package} server";
          WorkingDirectory = cfg.stateDir;
          User = cfg.user;
          Group = cfg.group;
          Restart = "always";
          EnvironmentFile = lib.optional (cfg.environmentFile != null) cfg.environmentFile;
          ReadWritePaths = [ cfg.stateDir ];
          ReadOnlyPaths = lib.optional (cfg.configDir != null) cfg.configDir;
          MemoryDenyWriteExecute = true;
          NoNewPrivileges = true;
          PrivateTmp = true;
          PrivateDevices = true;
          ProtectSystem = "strict";
          ProtectHome = true;
          ProtectControlGroups = true;
          ProtectKernelModules = true;
          ProtectKernelTunables = true;
          ProtectKernelLogs = true;
          RestrictAddressFamilies = [
            "AF_UNIX"
            "AF_INET"
            "AF_INET6"
          ];
          RestrictNamespaces = true;
          RestrictRealtime = true;
          RestrictSUIDSGID = true;
          LockPersonality = true;
          SystemCallArchitectures = "native";
        };
      };
    };

    systemd.tmpfiles.settings."10-opencloud" = {
      ${cfg.stateDir}.d = {
        inherit (cfg) user group;
        mode = "0750";
      };
      "${cfg.stateDir}/idm".d = {
        inherit (cfg) user group;
        mode = "0750";
      };
    };
  };

  meta.maintainers = with lib.maintainers; [
    christoph-heiss
  ];
}
