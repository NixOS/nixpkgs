{
  config,
  lib,
  pkgs,
  ...
}:
{
  options = {
    services.karakeep = {
      enable = lib.mkEnableOption "Enable the Karakeep service";
      package = lib.mkPackageOption pkgs "karakeep" { };

      extraEnvironment = lib.mkOption {
        description = ''
          Environment variables to pass to KaraKeep. This is how most settings
          can be configured. Changing DATA_DIR is not supported.

          See https://docs.karakeep.app/configuration/
        '';
        type = lib.types.attrsOf lib.types.str;
        default = { };
        example = lib.literalExpression ''
          {
            HOST = "0.0.0.0";
            PORT = "3333;
            DISABLE_SIGNUPS = "true";
          }
        '';
      };

      environmentFile = lib.mkOption {
        type = with lib.types; nullOr path;
        default = null;
        visible = false;
      };

      environmentFiles = lib.mkOption {
        type = with lib.types; listOf path;
        description = ''
          An optional path to environment files that will be used in the web and workers
          services. This is useful for loading private keys.
        '';
        example = [ "/var/lib/karakeep/secrets.env" ];
      };

      browser = {
        enable = lib.mkOption {
          description = ''
            Enable the karakeep-browser service that runs a chromium instance in
            the background with debugging ports exposed. This is necessary for
            certain features like screenshots.
          '';
          type = lib.types.bool;
          default = true;
        };
        port = lib.mkOption {
          description = "The port the browser should run on.";
          type = lib.types.port;
          default = 9222;
        };
        exe = lib.mkOption {
          description = "The browser executable (must be Chrome-like).";
          type = lib.types.str;
          default = "${pkgs.chromium}/bin/chromium";
          defaultText = lib.literalExpression "\${pkgs.chromium}/bin/chromium";
          example = lib.literalExpression "\${pkgs.google-chrome}/bin/google-chrome-stable";
        };
      };

      meilisearch = {
        enable = lib.mkEnableOption ''
          Enable Meilisearch and configure Karakeep to use it. Meilisearch is
          required for text search.
        '';
      };
    };
  };

  config =
    let
      cfg = config.services.karakeep;
    in
    lib.mkIf cfg.enable {
      warnings = lib.mkIf (cfg.environmentFile != null) ''
        "environmentFile is deprecated and will be removed. Please use environmentFiles instead.
      '';

      environment.systemPackages = [ cfg.package ];

      users.groups.karakeep = { };
      users.users.karakeep = {
        isSystemUser = true;
        group = "karakeep";
      };

      services.meilisearch.enable = cfg.meilisearch.enable;

      services.karakeep.extraEnvironment = {
        DATA_DIR = lib.mkForce "/var/lib/karakeep";
        NEXT_TELEMETRY_DISABLED = lib.mkDefault "1";
        DISABLE_NEW_RELEASE_CHECK = lib.mkDefault "true";
        MEILI_ADDR = lib.mkIf cfg.meilisearch.enable (
          let
            inherit (config.services.meilisearch) listenAddress listenPort;
          in
          lib.mkDefault "http://${listenAddress}:${toString listenPort}"
        );
        BROWSER_WEB_URL = lib.mkIf cfg.browser.enable (
          lib.mkDefault "http://127.0.0.1:${toString cfg.browser.port}"
        );
      };

      services.karakeep.environmentFiles = [
        "/var/lib/karakeep/settings.env"
      ] ++ lib.optional (cfg.environmentFile != null) cfg.environmentFile;

      systemd.services.karakeep-init = {
        description = "Initialize Karakeep Data";
        wantedBy = [ "multi-user.target" ];
        after = [ "network.target" ];
        partOf = [ "karakeep.service" ];
        path = [ pkgs.openssl ];
        script = ''
          umask 0077

          if [ ! -f "$STATE_DIRECTORY/settings.env" ]; then
            cat <<EOF >"$STATE_DIRECTORY/settings.env"
          # Generated by NixOS Karakeep module
          MEILI_MASTER_KEY=$(openssl rand -base64 36)
          NEXTAUTH_SECRET=$(openssl rand -base64 36)
          EOF
          fi

          export DATA_DIR="$STATE_DIRECTORY"
          exec "${cfg.package}/lib/karakeep/migrate"
        '';
        serviceConfig = {
          Type = "oneshot";
          RemainAfterExit = true;
          User = "karakeep";
          Group = "karakeep";
          StateDirectory = "karakeep";
          PrivateTmp = "yes";
        };
      };

      systemd.services.karakeep-workers = {
        description = "Karakeep Workers";
        wantedBy = [ "multi-user.target" ];
        after = [
          "network.target"
          "karakeep-init.service"
        ];
        partOf = [ "karakeep.service" ];
        path = [
          pkgs.monolith
          pkgs.yt-dlp
        ];
        environment = cfg.extraEnvironment;
        serviceConfig = {
          User = "karakeep";
          Group = "karakeep";
          ExecStart = "${cfg.package}/lib/karakeep/start-workers";
          StateDirectory = "karakeep";
          EnvironmentFile = cfg.environmentFiles;
          PrivateTmp = "yes";
        };
      };

      systemd.services.karakeep-web = {
        description = "Karakeep Web";
        wantedBy = [ "multi-user.target" ];
        after = [
          "network.target"
          "karakeep-init.service"
          "karakeep-workers.service"
        ];
        partOf = [ "karakeep.service" ];
        environment = cfg.extraEnvironment;
        serviceConfig = {
          ExecStart = "${cfg.package}/lib/karakeep/start-web";
          User = "karakeep";
          Group = "karakeep";
          StateDirectory = "karakeep";
          EnvironmentFile = cfg.environmentFiles;
          PrivateTmp = "yes";
        };
      };

      systemd.services.karakeep-browser = lib.mkIf cfg.browser.enable {
        wantedBy = [ "multi-user.target" ];
        after = [ "network.target" ];
        partOf = [ "karakeep.service" ];
        script = ''
          export HOME="$CACHE_DIRECTORY"
          exec ${cfg.browser.exe} \
            --headless --no-sandbox --disable-gpu --disable-dev-shm-usage \
            --remote-debugging-address=127.0.0.1 \
            --remote-debugging-port=${toString cfg.browser.port} \
            --hide-scrollbars \
            --user-data-dir="$STATE_DIRECTORY"
        '';
        serviceConfig = {
          Type = "simple";
          Restart = "on-failure";

          CacheDirectory = "karakeep-browser";
          StateDirectory = "karakeep-browser";

          DevicePolicy = "closed";
          DynamicUser = true;
          LockPersonality = true;
          NoNewPrivileges = true;
          PrivateDevices = true;
          PrivateTmp = true;
          PrivateUsers = true;
          ProtectClock = true;
          ProtectControlGroups = true;
          ProtectHostname = true;
          ProtectKernelLogs = true;
          ProtectKernelModules = true;
          ProtectKernelTunables = true;
          ProtectSystem = "strict";
          RestrictNamespaces = true;
          RestrictRealtime = true;
        };
      };
    };

  meta = {
    maintainers = [ lib.maintainers.three ];
  };
}
