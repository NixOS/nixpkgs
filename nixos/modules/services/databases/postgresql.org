* PostgreSQL
  :PROPERTIES:
  :CUSTOM_ID: module-postgresql
  :END:

/Source:/ =modules/services/databases/postgresql.nix=

/Upstream documentation:/ [[http://www.postgresql.org/docs/]]

PostgreSQL is an advanced, free relational database.

* Configuring
  :PROPERTIES:
  :CUSTOM_ID: module-services-postgres-configuring
  :END:

To enable PostgreSQL, add the following to your =configuration.nix=:

#+BEGIN_EXAMPLE
   = true;
   = pkgs.postgresql_11;
#+END_EXAMPLE

Note that you are required to specify the desired version of PostgreSQL
(e.g. =pkgs.postgresql_11=). Since upgrading your PostgreSQL version
requires a database dump and reload (see below), NixOS cannot provide a
default value for [[#opt-services.postgresql.package][???]] such as the
most recent release of PostgreSQL.

By default, PostgreSQL stores its databases in
=/var/lib/postgresql/$psqlSchema=. You can override this using
[[#opt-services.postgresql.dataDir][???]], e.g.

#+BEGIN_EXAMPLE
   = "/data/postgresql";
#+END_EXAMPLE

* Upgrading
  :PROPERTIES:
  :CUSTOM_ID: module-services-postgres-upgrading
  :END:

FIXME: document dump/upgrade/load cycle.

* Options
  :PROPERTIES:
  :CUSTOM_ID: module-services-postgres-options
  :END:

A complete list of options for the PostgreSQL module may be found
[[#opt-services.postgresql.enable][here]].

* Plugins
  :PROPERTIES:
  :CUSTOM_ID: module-services-postgres-plugins
  :END:

Plugins collection for each PostgreSQL version can be accessed with
=.pkgs=. For example, for =pkgs.postgresql_11= package, its plugin
collection is accessed by =pkgs.postgresql_11.pkgs=:

#+BEGIN_EXAMPLE
  $ nix repl '<nixpkgs>'

  Loading '<nixpkgs>'...
  Added 10574 variables.

  nix-repl> postgresql_11.pkgs.<TAB><TAB>
  postgresql_11.pkgs.cstore_fdw        postgresql_11.pkgs.pg_repack
  postgresql_11.pkgs.pg_auto_failover  postgresql_11.pkgs.pg_safeupdate
  postgresql_11.pkgs.pg_bigm           postgresql_11.pkgs.pg_similarity
  postgresql_11.pkgs.pg_cron           postgresql_11.pkgs.pg_topn
  postgresql_11.pkgs.pg_hll            postgresql_11.pkgs.pgjwt
  postgresql_11.pkgs.pg_partman        postgresql_11.pkgs.pgroonga
  ...
#+END_EXAMPLE

To add plugins via NixOS configuration, set
=services.postgresql.extraPlugins=:

#+BEGIN_EXAMPLE
   = pkgs.postgresql_11;
   = with pkgs.postgresql_11.pkgs; [
    pg_repack
    postgis
  ];
#+END_EXAMPLE

You can build custom PostgreSQL-with-plugins (to be used outside of
NixOS) using function =.withPackages=. For example, creating a custom
PostgreSQL package in an overlay can look like:

#+BEGIN_EXAMPLE
  self: super: {
    postgresql_custom = self.postgresql_11.withPackages (ps: [
      ps.pg_repack
      ps.postgis
    ]);
  }
#+END_EXAMPLE

Here's a recipe on how to override a particular plugin through an
overlay:

#+BEGIN_EXAMPLE
  self: super: {
    postgresql_11 = super.postgresql_11.override { this = self.postgresql_11; } // {
      pkgs = super.postgresql_11.pkgs // {
        pg_repack = super.postgresql_11.pkgs.pg_repack.overrideAttrs (_: {
          name = "pg_repack-v20181024";
          src = self.fetchzip {
            url = "https://github.com/reorg/pg_repack/archive/923fa2f3c709a506e111cc963034bf2fd127aa00.tar.gz";
            sha256 = "17k6hq9xaax87yz79j773qyigm4fwk8z4zh5cyp6z0sxnwfqxxw5";
          };
        });
      };
    };
  }
#+END_EXAMPLE
