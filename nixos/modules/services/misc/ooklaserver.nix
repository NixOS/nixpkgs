{
  config,
  lib,
  pkgs,
  ...
}:
let
  cfg = config.services.ooklaserver;
in
{
  options.services.ooklaserver =
    let
      inherit (lib) mkOption types;
    in
    {
      enable = lib.mkEnableOption "Ookla Speedtest server";
      package = lib.mkPackageOption pkgs "ooklaserver" { };
      useACMEHost = mkOption {
        description = ''
          Use a certificate generated by the NixOS ACME module for the given host.
          Note that this will not generate a new certificate - you will need to do so with `security.acme.certs`.
        '';
        default = null;
        type = with types; nullOr nonEmptyStr;
      };
      tlsCertificate = mkOption {
        description = "TLS certificate to use. Use together with `tlsKey`.";
        default =
          lib.mkIf (cfg.useACMEHost != null)
            "${config.security.acme.certs.${cfg.useACMEHost}.directory}/cert.pem";
        defaultText = lib.literalExpression ''
          lib.mkIf (config.services.ooklaserver.useACMEHost != null) "''${config.security.acme.certs.''${cfg.useACMEHost}.directory}/cert.pem";
        '';
        type = types.nonEmptyStr;
      };
      tlsKey = mkOption {
        description = "TLS private key to use. Use together with `tlsCertificate`.";
        default =
          lib.mkIf (cfg.useACMEHost != null)
            "${config.security.acme.certs.${cfg.useACMEHost}.directory}/key.pem";
        defaultText = lib.literalExpression ''
          lib.mkIf (config.services.ooklaserver.useACMEHost != null) "''${config.security.acme.certs.''${cfg.useACMEHost}.directory}/key.pem";
        '';
        type = types.nonEmptyStr;
      };
      openFirewall = mkOption {
        description = "Whether to open the firewall for the specified ports.";
        default = false;
        type = types.bool;
      };
      settings = mkOption {
        description = ''
          OoklaServer configuration written as Nix expression.
          Comma seperated values should be written as list.
          See ''${pkgs.ooklaserver}/etc/OoklaServer.properties.default and [support.ookla.com][ookla] for configuration help.

          [ookla]: https://support.ookla.com/hc/en-us/sections/115000108991-Configuration
        '';
        default = { };
        type =
          with types;
          let
            valueType =
              nullOr (oneOf [
                bool
                int
                str
                (attrsOf valueType)
                (listOf (oneOf [
                  port
                  str
                ]))
              ])
              // {
                description = "OoklaServer Value";
              };
          in
          valueType;
      };
    };
  config = lib.mkIf cfg.enable {
    assertions = [
      {
        assertion = cfg.domain != null;
        message = ''
          At least services.ooklaserver.domain has to be specified.
        '';
      }
    ];

    security.acme.certs = lib.mkIf (cfg.useACMEHost != null) {
      ${cfg.useACMEHost}.reloadServices = [ "ooklaserver.service" ];
    };

    networking.firewall = lib.mkIf cfg.openFirewall {
      allowedUDPPorts = cfg.settings.OoklaServer.udpPorts;
      allowedTCPPorts = cfg.settings.OoklaServer.tcpPorts;
    };

    services.ooklaserver.settings =
      let
        inherit (lib) mkDefault;
      in
      {
        OoklaServer = {
          enableAutoUpdate = false;
          ssl.useLetsEncrypt = false;
          udpPorts = mkDefault [
            5060
            8080
          ];
          tcpPorts = mkDefault [
            5060
            8080
          ];
          useIPv6 = mkDefault true;
          allowedDomains = mkDefault [
            "*.ookla.com"
            "*.speedtest.net"
          ];
          userAgentFilterEnabled = mkDefault true;
          workerThreadPool = {
            capacity = mkDefault 30000;
            stackSizeBytes = mkDefault 102400;
          };
          ipTracking = {
            gcIntervalMinutes = mkDefault 5;
            maxIdleAgeMinutes = mkDefault 35;
            slidingWindowBucketLengthMinutes = mkDefault 5;
            metricTopIpCount = mkDefault 5;
            maxConnPerIp = mkDefault 500;
            maxConnPerBucketPerIp = mkDefault 20000;
          };
          clientAuthToken.denyInvalid = mkDefault true;
          websocket.frameSizeLimitBytes = mkDefault 5242880;
          http.maxHeadersSize = mkDefault 65536;
        };
        openSSL.server = {
          certificateFile = "/run/credentials/${config.systemd.services.ooklaserver.name}/cert.pem";
          privateKeyFile = "/run/credentials/${config.systemd.services.ooklaserver.name}/key.pem";
          minimumTLSProtocol = mkDefault "1.2";
        };
        logging.loggers.app = {
          name = mkDefault "Application";
          channel = {
            class = mkDefault "ConsoleChannel";
            pattern = mkDefault "[%p] %t";
          };
          level = mkDefault "information";
        };
      };

    systemd.services.ooklaserver =
      let
        serviceDependencies = [
          "network.target"
          (lib.mkIf (cfg.useACMEHost != null) "acme-finished-${cfg.useACMEHost}.target")
        ];
        configFile =
          let
            anyToString =
              arg:
              if (lib.isBool arg) then
                lib.boolToString arg
              else if (lib.isList arg) then
                lib.concatStringsSep "," (map (val: toString val) arg)
              else
                toString arg;
          in
          with lib;
          pipe cfg.settings [
            (mapAttrsRecursive (path: val: "${concatStringsSep "." path} = ${anyToString val}"))
            (collect isString)
            (concatLines)
            (pkgs.writeTextDir "bin/OoklaServer.properties")
          ];
        packageWithCfg = pkgs.symlinkJoin {
          name = "${cfg.package.name}-with-config";
          paths = [
            cfg.package
            configFile
          ];
        };
      in
      {
        description = "Ookla Speedtest server daemon";
        wantedBy = [ "multi-user.target" ];
        wants = serviceDependencies;
        after = serviceDependencies;

        serviceConfig = {
          Type = "simple";
          Restart = "always";

          DynamicUser = true;

          unitConfig.ConditionPathExists = [
            cfg.tlsCertificate
            cfg.tlsKey
          ];
          LoadCredential = [
            "cert.pem:${cfg.tlsCertificate}"
            "key.pem:${cfg.tlsKey}"
          ];
          ExecStart = "${packageWithCfg}/bin/OoklaServer";
          WorkingDirectory = packageWithCfg;
          SyslogIdentifier = "ooklaserver";

          ReadOnlyPaths = [ packageWithCfg ];
          RestrictSUIDSGID = true;
          RestrictNamespaces = true;
          PrivateTmp = true;
          PrivateDevices = true;
          PrivateUsers = true;
          ProtectHostname = true;
          ProtectClock = true;
          ProtectKernelTunables = true;
          ProtectKernelModules = true;
          ProtectKernelLogs = true;
          ProtectControlGroups = true;
          ProtectSystem = "strict";
          ProtectHome = true;
          ProtectProc = "invisible";
          SystemCallArchitectures = "native";
          SystemCallFilter = "@system-service";
          SystemCallErrorNumber = "EPERM";
          LockPersonality = true;
          NoNewPrivileges = true;
        };
      };
  };
  meta.maintainers = with lib.maintainers; [ snaki ];
}
