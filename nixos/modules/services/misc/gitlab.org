* Gitlab
  :PROPERTIES:
  :CUSTOM_ID: module-services-gitlab
  :END:

Gitlab is a feature-rich git hosting service.

* Prerequisites
  :PROPERTIES:
  :CUSTOM_ID: module-services-gitlab-prerequisites
  :END:

The gitlab service exposes only an Unix socket at
=/run/gitlab/gitlab-workhorse.socket=. You need to configure a webserver
to proxy HTTP requests to the socket.

For instance, the following configuration could be used to use nginx as
frontend proxy:

#+BEGIN_EXAMPLE
  services.nginx = {
    enable = true;
    recommendedGzipSettings = true;
    recommendedOptimisation = true;
    recommendedProxySettings = true;
    recommendedTlsSettings = true;
    virtualHosts."git.example.com" = {
      enableACME = true;
      forceSSL = true;
      locations."/".proxyPass = "http://unix:/run/gitlab/gitlab-workhorse.socket";
    };
  };
#+END_EXAMPLE

* Configuring
  :PROPERTIES:
  :CUSTOM_ID: module-services-gitlab-configuring
  :END:

Gitlab depends on both PostgreSQL and Redis and will automatically
enable both services. In the case of PostgreSQL, a database and a role
will be created.

The default state dir is =/var/gitlab/state=. This is where all data
like the repositories and uploads will be stored.

A basic configuration with some custom settings could look like this:

#+BEGIN_EXAMPLE
  services.gitlab = {
    enable = true;
    databasePasswordFile = "/var/keys/gitlab/db_password";
    initialRootPasswordFile = "/var/keys/gitlab/root_password";
    https = true;
    host = "git.example.com";
    port = 443;
    user = "git";
    group = "git";
    smtp = {
      enable = true;
      address = "localhost";
      port = 25;
    };
    secrets = {
      dbFile = "/var/keys/gitlab/db";
      secretFile = "/var/keys/gitlab/secret";
      otpFile = "/var/keys/gitlab/otp";
      jwsFile = "/var/keys/gitlab/jws";
    };
    extraConfig = {
      gitlab = {
        email_from = "gitlab-no-reply@example.com";
        email_display_name = "Example GitLab";
        email_reply_to = "gitlab-no-reply@example.com";
        default_projects_features = { builds = false; };
      };
    };
  };
#+END_EXAMPLE

If you're setting up a new Gitlab instance, generate new secrets. You
for instance use =tr -dc A-Za-z0-9 <
   /dev/urandom | head -c 128 > /var/keys/gitlab/db= to generate a new
db secret. Make sure the files can be read by, and only by, the user
specified by [[#opt-services.gitlab.user][services.gitlab.user]]. Gitlab
encrypts sensitive data stored in the database. If you're restoring an
existing Gitlab instance, you must specify the secrets secret from
=config/secrets.yml= located in your Gitlab state folder.

Refer to [[#ch-options][???]] for all available configuration options
for the [[#opt-services.gitlab.enable][services.gitlab]] module.

* Maintenance
  :PROPERTIES:
  :CUSTOM_ID: module-services-gitlab-maintenance
  :END:

You can run Gitlab's rake tasks with =gitlab-rake= which will be
available on the system when gitlab is enabled. You will have to run the
command as the user that you configured to run gitlab with.

For example, to backup a Gitlab instance:

#+BEGIN_EXAMPLE
  $ sudo -u git -H gitlab-rake gitlab:backup:create
#+END_EXAMPLE

A list of all availabe rake tasks can be obtained by running:

#+BEGIN_EXAMPLE
  $ sudo -u git -H gitlab-rake -T
#+END_EXAMPLE
