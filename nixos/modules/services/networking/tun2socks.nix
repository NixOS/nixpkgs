{
  config,
  lib,
  pkgs,
  ...
}:
let
  cfg = config.services.tun2socks;
  settingsFormat = pkgs.formats.yaml { };
in
{
  options = {
    services.tun2socks = {
      enable = lib.mkEnableOption "tun2socks daemon, allow to use proxies through virtual TUN interface";
      user = lib.mkOption {
        type = lib.types.str;
        default = "tun2socks";
        description = "User account under which tun2socks runs.";
      };

      group = lib.mkOption {
        type = lib.types.str;
        default = "tun2socks";
        description = "Group account under which tun2socks runs.";
      };

      settings = lib.mkOption {
        description = ''
          Configuration for tun2socks, see <https://github.com/xjasonlyu/tun2socks/wiki#usage>
          for more information.
        '';
        default = { };
        example = lib.literalExpression ''
          {
            device = "eth0";
            fwmark = 1;
            proxy = "http://192.168.1.1:1080";
          }
        '';
        type = lib.types.submodule {
          freeformType = settingsFormat.type;
          options = {
            device = lib.mkOption {
              type = lib.types.str;
              example = "tun0";
              description = "The tun device to use.";
            };
            proxy = lib.mkOption {
              type = lib.types.str;
              example = "socks5://192.168.1.1:1080";
              description = "The proxy to use [protocol://]host[:port]";
            };
          };
        };
      };

      configFile = lib.mkOption {
        default = settingsFormat.generate "config.yaml" cfg.settings;
        defaultText = "A tun2socks configuration file automatically generated by values from services.tun2socks.settings";
        type = lib.types.path;
        description = "Path to tun2socks YAML configuration file.";
      };

      package = lib.mkPackageOption pkgs "tun2socks" { };
    };
  };

  config = lib.mkIf cfg.enable {
    systemd.services.tun2socks = {
      wants = [ "network-online.target" ];
      after = [ "network-online.target" ];
      wantedBy = [ "multi-user.target" ];
      serviceConfig = {
        User = cfg.user;
        Group = cfg.group;
        Type = "simple";
        ExecStart = "${lib.getExe cfg.package} -config ${cfg.configFile}";
        Restart = "always";

        # NET_ADMIN to operate the network devices
        AmbientCapabilities = [ "CAP_NET_ADMIN" ];
        StateDirectory = "tun2socks";
        StateDirectoryMode = "0750";
      };
    };

    users.users = lib.optionalAttrs (cfg.user == "tun2socks") {
      tun2socks = {
        group = cfg.group;
        isSystemUser = true;
      };
    };

    users.groups = lib.optionalAttrs (cfg.group == "tun2socks") {
      tun2socks = { };
    };
  };
}
