{ config, lib, pkgs, ... }:

let
  cfg = config.services.clash;
  settingsFormat = pkgs.formats.yaml { };
in
with lib;
{
  options = {
    services.clash = {
      enable = mkEnableOption (lib.mdDoc "A rule-based tunnel in Go. ");
      user = mkOption {
        type = types.str;
        default = "clash";
        description = lib.mdDoc "User account under which clash runs.";
      };

      group = mkOption {
        type = types.str;
        default = "clash";
        description = lib.mdDoc "Group account under which clash runs.";
      };

      settings = mkOption {
        type = settingsFormat.type;
        default = {
          mixed-port = 7890;
        };
        example = literalExpression ''
          {
            mixed-port = 7890;
            external-controller = "127.0.0.1:9090";
            allow-lan = false;
            mode = rule;
            proxies = [];
            proxy-groups = [];
            rules = [];
          }
        '';
        description = lib.mdDoc ''
          Configuration for Clash, see <https://dreamacro.github.io/clash/configuration/configuration-reference.html>
          for more information.
        '';
      };

      configFile = mkOption {
        default = settingsFormat.generate "config.yaml" cfg.settings;
        defaultText = "A Clash configuration file automatically generated by values from services.clash.settings.*";
        type = types.path;
        description = lib.mdDoc "Path to Clash YAML configuration file.";
      };

      package = mkOption {
        default = pkgs.clash;
        defaultText = literalExpression "pkgs.clash";
        type = types.package;
        description = lib.mdDoc "Clash package to use.";
      };
    };
  };

  config = mkIf cfg.enable {
    systemd.services.clash = {
      description = "Clash";
      after = [ "network-online.target" ];
      wantedBy = [ "multi-user.target" ];
      serviceConfig = {
        User = cfg.user;
        Group = cfg.group;
        Type = "simple";
        ExecStartPre = [
          "${pkgs.coreutils}/bin/ln -sf ${cfg.configFile} /var/lib/clash/config.yaml"
        ];

        # clash need to download some meta data at the config folder.
        ExecStart = "${getBin cfg.package}/bin/clash -d /var/lib/clash";
        Restart = "always";

        # NET_ADMIN for tproxy mode
        # NET_BIND_SERVICE for bind port < 1000
        AmbientCapabilities = ["CAP_NET_ADMIN" "CAP_NET_BIND_SERVICE"];

        StateDirectory = "clash";
        StateDirectoryMode = "0750";
      };
    };

    users.users = optionalAttrs (cfg.user == "clash") {
      clash = { group = cfg.group;
        isSystemUser = true;
      };
    };

    users.groups = optionalAttrs (cfg.group == "clash") {
      clash = {};
    };
  };

  meta = {
    maintainers = with lib.maintainers; [ kaleocheng ];
  };
}
