{
  config,
  lib,
  pkgs,
  utils,
  ...
}:
let
  cfg = config.services.chirpstack;
  pidfile = "/run/chirpstack/chirpstack.pid";
  configFile = "";
  settingsFormat = pkgs.formats.toml { };
in
{
  options = {
    services.chirpstack = {
      enable = lib.mkEnableOption "Chirpstack LoRaWAN network server";

      api-secret-file = lib.mkOption {
        type = lib.types.nullOr lib.types.str;
        default = null;
        description = ''
          This secret is used for generating login and API tokens, make sure this
          is never exposed. Changing this secret will invalidate all login and API
          tokens. The following command can be used to generate a random secret:
            openssl rand -base64 32
        '';
      };

      settings = lib.mkOption {
        type = settingsFormat.type;
        default = { };
        example = lib.literalExpression ''
          {
            postgresql = {
              dsn = "postgres://<USERNAME>:<PASSWORD>@<HOSTNAME>/<DATABASE>?sslmode=<SSLMODE>";
              max_open_connections = 10;
              min_idle_connections = 0;
            };

            redis = {
              servers = ["redis://localhost/"];
              cluster = false;
            };

            network = {
              net_id = "000000";

              enabled_regions = [
                "eu433"
                "eu868"
              ];
            };

            api = {
              bind = "0.0.0.0:8080";

              secret = "you-must-replace-this";
            };

            integration = {
              enabled = ["mqtt"];

              mqtt = {
                server = "tcp://localhost:1883/";
                json = true;
              };
            };
          }
        '';

        description = ''
          Configuration for Chirpstack, see <https://www.chirpstack.io/docs/chirpstack/configuration.html>
          for more information.
        '';
      };

      configFile = lib.mkOption {
        default = settingsFormat.generate "chirpstack.toml" cfg.settings;
        defaultText = "A Chirpstack configuration file automatically generated by values from services.chirpstack.settings";
        type = lib.types.path;
        description = "Path to Chirpstack TOML configuration file.";
      };

      package = lib.mkPackageOption pkgs "chirpstack" { };
    };
  };

  config = lib.mkIf cfg.enable {
    users.users.chirpstack = {
      uid = config.ids.uids.chirpstack;
      group = "chirpstack";
      description = "Chirpstack user";
    };
    users.groups.chirpstack = {
      gid = config.ids.gids.chirpstack;
      members = [ "chirpstack" ];
    };

    systemd.services.chirpstack = {
      description = "Chirpstack LoRaWAN network server";
      after = [ "network-online.target" ];
      wants = [ "network-online.target" ];
      wantedBy = [ "multi-user.target" ];

      unitConfig = {
        Documentation = "https://www.chirpstack.io/docs/";
      };

      serviceConfig = rec {
        Type = "simple";
        ExecStartPre = pkgs.writeShellScript "chirpstack-pre-start" ''
          ln -s ${cfg.configFile} $RUNTIME_DIRECTORY/chirpstack.toml
        '';
        ExecStart = "${cfg.package}/bin/chirpstack --config $RUNTIME_DIRECTORY";
        User = "chirpstack";
        Group = "chirpstack";
        RuntimeDirectory = [
          "chirpstack"
        ];
        RuntimeDirectoryMode = "0700";
        Restart = "on-abort";

        # Hardening
        AmbientCapabilities = [ "" ];
        CapabilityBoundingSet = AmbientCapabilities;
        DevicePolicy = "closed";
        LockPersonality = true;
        MemoryDenyWriteExecute = true;
        NoNewPrivileges = true;
        PrivateDevices = true;
        PrivateTmp = true;
        PrivateUsers = true;
        ProcSubset = "pid";
        ProtectClock = true;
        ProtectControlGroups = true;
        ProtectHome = true;
        ProtectHostname = true;
        ProtectKernelLogs = true;
        ProtectKernelModules = true;
        ProtectKernelTunables = true;
        ProtectProc = "invisible";
        ProtectSystem = "strict";
        RemoveIPC = true;
        RestrictAddressFamilies = [
          "AF_INET"
          "AF_INET6"
          "AF_NETLINK"
        ];
        RestrictNamespaces = true;
        RestrictRealtime = true;
        RestrictSUIDSGID = true;
        SystemCallArchitectures = "native";
        SystemCallFilter = [
          "@system-service"
          "~@privileged @resources"
        ];
        UMask = "0077";
      };
    };
  };
}
