{
  config,
  lib,
  pkgs,
  ...
}:

with lib;
let
  cfg = config.services.ism7mqtt;
in
{
  options.services.ism7mqtt = {
    enable = mkEnableOption "the ism7mqtt daemon";

    package = mkPackageOption pkgs "ism7mqtt" { };

    ipAddress = mkOption {
      description = "Wolf device hostname or IP address";
      type = types.nonEmptyStr;
    };

    passwordFile = mkOption {
      description = "Path to file containing device password";
      type = types.path;
    };

    parameterFile = mkOption {
      description = "Path to parameter.json generated by `ism7config`";
      type = types.path;
    };

    mqtt = mkOption {
      description = "MQTT configuration";
      type = types.submodule {
        options = {
          server = mkOption {
            description = "MQTT server";
            type = types.nonEmptyStr;
          };
          port = mkOption {
            description = "MQTT server port";
            type = types.port;
            default = 1883;
          };
          user = mkOption {
            description = "MQTT username";
            type = types.str;
            default = "";
          };
          passwordFile = mkOption {
            description = "Path to MQTT user password";
            type = with types; nullOr path;
            default = null;
          };
          qos = mkOption {
            description = "MQTT Quality of Service";
            type = types.enum [
              0
              1
              2
            ];
            default = 0;
          };
        };
      };
    };

    extraFlags = mkOption {
      description = "Extra flags to append to `ism7mqtt`. See `ism7mqtt -h` for options";
      type = with types; listOf str;
      default = [ ];
    };
  };

  config = mkIf cfg.enable {
    systemd.services."ism7mqtt" = {
      wantedBy = [ "multi-user.target" ];
      after = [ "network.target" ];
      description = "ism7mqtt daemon";
      environment.DOTNET_CLI_TELEMETRY_OPTOUT = "1";
      serviceConfig = {
        Type = "simple";
        LoadCredential = [
          "WOLFLINK_PASS:${cfg.passwordFile}"
        ] ++ (optional (cfg.mqtt.passwordFile != null) "MQTT_PASS:${cfg.mqtt.passwordFile}");
        Restart = "always";
        DynamicUser = true;
      };
      script = ''
        ${cfg.package}/bin/ism7mqtt \
                    -i ${cfg.ipAddress} \
                    -t ${cfg.parameterFile} \
                    -m ${cfg.mqtt.server} \
                    -p $(cat "$CREDENTIALS_DIRECTORY/WOLFLINK_PASS") ${
                      optionalString (
                        cfg.mqtt.passwordFile != null
                      ) "--mqttpass=$(cat \"$CREDENTIALS_DIRECTORY/MQTT_PASS\")"
                    } \
                    --mqttport=${toString cfg.mqtt.port} \
                    --mqttqos=${toString cfg.mqtt.qos} \
                    ${escapeShellArgs cfg.extraFlags}
      '';
    };

    environment.systemPackages = [
      cfg.package
    ];
  };
}
