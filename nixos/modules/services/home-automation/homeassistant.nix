{ config, lib, pkgs, ... }:

with lib;

let
  cfg = config.services.homeassistant;
  dataDir = "/var/lib/${user}";
  user = "homeassistant";
  desc = "HomeAssistant - home automation server";

  cfgSection = name: default:
  lib.mkOption {
    type = types.str;
    default = "${name}:\n  ${default}";
    description = "${name} configuration";
  };

  cfgFile = pkgs.writeText "home-assistant-configuration.yaml" ''
    #
    # Do not edit this file. It WILL be overwritten.
    #
    homeassistant:
      name: ${cfg.name}
      latitude: ${cfg.latitude}
      longitude: ${cfg.longitude}
      elevation: ${toString cfg.elevation}
      unit_system: ${cfg.unitSystem}
      time_zone: ${config.time.timeZone}

    ${optionalString cfg.introduction "introduction:"}

    ${cfg.frontendConfig}

    ${cfg.httpConfig}

    ${cfg.updaterConfig}

    ${cfg.discoveryConfig}

    ${cfg.conversationConfig}

    ${cfg.historyConfig}

    ${cfg.logbookConfig}

    ${cfg.sunConfig}

    ${cfg.sensorConfig}

    ${cfg.extraConfig}
    '';

in {
  options = {
    services.homeassistant = {

      enable = mkEnableOption desc;

      name = mkOption {
        type = types.str;
        default = "Home";
        example = "Office";
        description = "Name of this installation.";
      };

      latitude = mkOption {
        type = types.str;
        default = "1";
        example = "1.2345";
        description = "Latitude";
      };

      longitude = mkOption {
        type = types.str;
        default = "1";
        example = "1.2345";
        description = "Longitude";
      };

      elevation = mkOption {
        type = types.int;
        default = 4;
        example = 8;
        description = "Elevation in metres";
      };

      unitSystem = mkOption {
        type = types.enum [ "metric" "imperial" ];
        default = "metric";
        description = "Unit system in use";
      };

      introduction = mkOption {
        type = types.bool;
        default = true;
        description = "Show links to resources in log and frontend";
      };

      frontendConfig = cfgSection "frontend" "";

      httpConfig = cfgSection "http" "# api_password: PASSWORD";

      updaterConfig = cfgSection "updater" "";

      discoveryConfig = cfgSection "discovery" "";

      conversationConfig = cfgSection "conversation" "";

      historyConfig = cfgSection "history" "";

      logbookConfig = cfgSection "logbook" "";

      sunConfig = cfgSection "sun" "";

      sensorConfig = cfgSection "sensor" "  platform: yr";

      extraConfig = mkOption {
        type = types.str;
        default = "";
        description = "Extra configuration. Free form YAML.";
      };
    };
  };

  config = mkIf cfg.enable {
    systemd.services.homeassistant = {
      description = desc;
      after = [ "network.target" ];
      wantedBy = [ "multi-user.target" ];
      preStart = ''
          cp ${cfgFile} ${dataDir}/configuration.yaml
      '';
      serviceConfig = {
        # --skip-pip
        ExecStart = "${pkgs.homeassistant}/bin/hass --config ${dataDir}";
        WorkingDirectory = dataDir;
        User = user;
        Group = user;
        PrivateTmp = true;
        ProtectSystem = "full";
        ProtectHome = true;
      };
    };

    users = {
      extraGroups."${user}".gid = config.ids.gids.homeassistant;
      extraUsers."${user}" = {
        group = user;
        uid = config.ids.uids.homeassistant;
        description = "HomeAssistant user";
        home = dataDir;
        createHome = true;
      };
    };
  };
}
