diff --git a/configure.ac b/configure.ac
index 5b6d22b..98c449b 100644
--- a/configure.ac
+++ b/configure.ac
@@ -145,7 +145,7 @@ AS_CASE([$host_os],
 AM_CONDITIONAL([OS_WINDOWS], [test "x$is_windows" = "xyes"])
 
 # Checks for header files.
-AC_CHECK_HEADERS([sys/ndir.h sys/dir.h ndir.h dirent.h pwd.h grp.h])
+AC_CHECK_HEADERS([sys/ndir.h sys/dir.h ndir.h dirent.h pwd.h grp.h nlist.h])
 
 # Checks for typedefs, structures, and compiler characteristics.
 AC_C_INLINE
@@ -245,7 +245,9 @@ AC_LINK_IFELSE(
 
 AC_CHECK_FUNCS([clearenv dirfd fopencookie __fpurge \
                 getauxval getentropy getexecname getline \
-                pstat_getproc sysconf])
+                pstat_getproc sysconf \
+		strlcpy strlcat strnstr strmode fpurge \
+		user_from_uid group_from_gid])
 AM_CONDITIONAL([HAVE_GETENTROPY], [test "x$ac_cv_func_getentropy" = "xtrue"])
 
 AC_SUBST([MD5_LIBS])
diff --git a/include/bsd/grp.h b/include/bsd/grp.h
index b2705e5..c9423a2 100644
--- a/include/bsd/grp.h
+++ b/include/bsd/grp.h
@@ -44,8 +44,10 @@
 __BEGIN_DECLS
 int
 gid_from_group(const char *, gid_t *);
+#if !HAVE_GROUP_FROM_GID
 const char *
 group_from_gid(gid_t, int);
+#endif
 __END_DECLS
 
 #endif
diff --git a/include/bsd/pwd.h b/include/bsd/pwd.h
index 798af4b..6ae5244 100644
--- a/include/bsd/pwd.h
+++ b/include/bsd/pwd.h
@@ -44,8 +44,10 @@
 __BEGIN_DECLS
 int
 uid_from_user(const char *, uid_t *);
+#if !HAVE_USER_FROM_UID
 const char *
 user_from_uid(uid_t, int);
+#endif
 __END_DECLS
 
 #endif
diff --git a/include/bsd/string.h b/include/bsd/string.h
index f987fee..a1e17ed 100644
--- a/include/bsd/string.h
+++ b/include/bsd/string.h
@@ -41,10 +41,21 @@
 #include <sys/types.h>
 
 __BEGIN_DECLS
+#if !HAVE_STRLCPY
 size_t strlcpy(char *dst, const char *src, size_t siz);
+#endif
+
+#if !HAVE_STRLCAT
 size_t strlcat(char *dst, const char *src, size_t siz);
+#endif
+
+#if !HAVE_STRNSTR
 char *strnstr(const char *str, const char *find, size_t str_len);
+#endif
+
+#if !HAVE_STRMODE
 void strmode(mode_t mode, char *str);
+#endif
 
 #if !defined(__GLIBC__) || \
     (defined(__GLIBC__) && (!__GLIBC_PREREQ(2, 25) || !defined(_GNU_SOURCE)))
diff --git a/src/fpurge.c b/src/fpurge.c
index 350f364..ff7f01e 100644
--- a/src/fpurge.c
+++ b/src/fpurge.c
@@ -26,9 +26,10 @@
 
 #include <errno.h>
 #include <stdio.h>
-#include <stdio_ext.h>
 
 #ifdef HAVE___FPURGE
+#include <stdio_ext.h>
+
 int
 fpurge(FILE *fp)
 {
@@ -41,6 +42,36 @@ fpurge(FILE *fp)
 
 	return 0;
 }
+/* FreeBSD, NetBSD, OpenBSD, DragonFly, Mac OS X, Cygwin 1.7 */
+#elif HAVE_FPURGE
+int
+fpurge(FILE *fp)
+{
+	if (fp == NULL || fileno(fp) < 0) {
+		errno = EBADF;
+		return EOF;
+	}
+
+  /* Call the system's fpurge function.  */
+#undef fpurge
+#if !HAVE_DECL_FPURGE
+  extern int fpurge (FILE *);
+#endif
+  int result = fpurge (fp);
+/* FreeBSD, NetBSD, OpenBSD, DragonFly, Mac OS X, Cygwin */
+#if defined(__sferror) || defined(__DragonFly__)
+  if (result == 0)
+    /* Correct the invariants that fpurge broke.
+       <stdio.h> on BSD systems says:
+         "The following always hold: if _flags & __SRD, _w is 0."
+       If this invariant is not fulfilled and the stream is read-write but
+       currently reading, subsequent putc or fputc calls will write directly
+       into the buffer, although they shouldn't be allowed to.  */
+    if ((fp->_flags & __SRD) != 0)
+      fp->_w = 0;
+#endif
+  return result;
+}
 #else
 #error "Function fpurge() needs to be ported."
 #endif
diff --git a/src/funopen.c b/src/funopen.c
index 1e6f43a..3a3af6a 100644
--- a/src/funopen.c
+++ b/src/funopen.c
@@ -143,6 +143,7 @@ funopen(const void *cookie,
  * they will not add the needed support to implement it. Just ignore this
  * interface there, as it has never been provided anyway.
  */
+#elif defined(__MACH__)
 #else
 #error "Function funopen() needs to be ported or disabled."
 #endif
diff --git a/src/local-link.h b/src/local-link.h
index 6782d9a..fb76098 100644
--- a/src/local-link.h
+++ b/src/local-link.h
@@ -29,6 +29,12 @@
 
 #include <sys/cdefs.h>
 
+#ifdef __MACH__
+#define libbsd_link_warning(symbol, msg)
+#define libbsd_symver_default(alias, symbol, version)
+#define libbsd_symver_variant(alias, symbol, version)
+#define libbsd_symver_weak(alias, symbol, version)
+#else
 #define libbsd_link_warning(symbol, msg) \
 	static const char libbsd_emit_link_warning_##symbol[] \
 		__attribute__((__used__,__section__(".gnu.warning." #symbol))) = msg
@@ -68,3 +74,4 @@
 #endif
 
 #endif
+#endif
diff --git a/src/nlist.c b/src/nlist.c
index 1cb9d18..b476f1e 100644
--- a/src/nlist.c
+++ b/src/nlist.c
@@ -41,6 +41,7 @@
 #include <unistd.h>
 #include <nlist.h>
 
+#if !HAVE_NLIST_H
 #include "local-elf.h"
 
 /* Note: This function is used by libkvm0, so we need to export it.
@@ -277,3 +278,4 @@ nlist(const char *name, struct nlist *list)
 	(void)close(fd);
 	return (n);
 }
+#endif
diff --git a/src/pwcache.c b/src/pwcache.c
index d54daa0..74fde9f 100644
--- a/src/pwcache.c
+++ b/src/pwcache.c
@@ -191,6 +191,7 @@ grptb_start(void)
 	return 0;
 }
 
+#if !HAVE_USER_FROM_UID
 /*
  * user_from_uid()
  *	caches the name (if any) for the uid. If noname clear, we always
@@ -251,7 +252,9 @@ user_from_uid(uid_t uid, int noname)
 	}
 	return ptr->name;
 }
+#endif
 
+#if !HAVE_USER_FROM_UID
 /*
  * group_from_gid()
  *	caches the name (if any) for the gid. If noname clear, we always
@@ -312,6 +315,7 @@ group_from_gid(gid_t gid, int noname)
 	}
 	return ptr->name;
 }
+#endif
 
 /*
  * uid_from_user()
diff --git a/src/readpassphrase.c b/src/readpassphrase.c
index f9f6195..2bc5fb4 100644
--- a/src/readpassphrase.c
+++ b/src/readpassphrase.c
@@ -36,6 +36,14 @@
 #define TCSASOFT 0
 #endif
 
+#ifndef _SIGMAX
+#define	_SIGMAX	64
+#endif
+
+#ifndef _NSIG
+#define _NSIG (_SIGMAX + 1)
+#endif
+
 static volatile sig_atomic_t signo[_NSIG];
 
 static void handler(int);
diff --git a/src/setproctitle.c b/src/setproctitle.c
index d3e1087..0e5f64c 100644
--- a/src/setproctitle.c
+++ b/src/setproctitle.c
@@ -33,6 +33,10 @@
 #include <string.h>
 #include "local-link.h"
 
+#ifdef __MACH__
+extern char **environ;
+#endif
+
 static struct {
 	/* Original value. */
 	const char *arg0;
@@ -291,7 +295,8 @@ libbsd_symver_default(setproctitle, setproctitle_impl, LIBBSD_0.5);
  * in 0.5, make the implementation available in the old version as an alias
  * for code linking against that version, and change the default to use the
  * new version, so that new code depends on the implemented version. */
-#ifdef HAVE_TYPEOF
+#ifdef __MACH__
+#elif defined(HAVE_TYPEOF)
 extern __typeof__(setproctitle_impl)
 setproctitle_stub
 	__attribute__((__alias__("setproctitle_impl")));
diff --git a/src/strlcat.c b/src/strlcat.c
index 14c53a1..5961c17 100644
--- a/src/strlcat.c
+++ b/src/strlcat.c
@@ -26,6 +26,7 @@
  * Returns strlen(src) + MIN(dsize, strlen(initial dst)).
  * If retval >= dsize, truncation occurred.
  */
+#if !HAVE_STRLCAT
 size_t
 strlcat(char *dst, const char *src, size_t dsize)
 {
@@ -53,3 +54,4 @@ strlcat(char *dst, const char *src, size_t dsize)
 
 	return(dlen + (src - osrc));	/* count does not include NUL */
 }
+#endif
diff --git a/src/strlcpy.c b/src/strlcpy.c
index e9a7fe4..5137acb 100644
--- a/src/strlcpy.c
+++ b/src/strlcpy.c
@@ -24,6 +24,7 @@
  * chars will be copied.  Always NUL terminates (unless dsize == 0).
  * Returns strlen(src); if retval >= dsize, truncation occurred.
  */
+#if !HAVE_STRLCPY
 size_t
 strlcpy(char *dst, const char *src, size_t dsize)
 {
@@ -48,3 +49,4 @@ strlcpy(char *dst, const char *src, size_t dsize)
 
 	return(src - osrc - 1);	/* count does not include NUL */
 }
+#endif
diff --git a/src/strmode.c b/src/strmode.c
index e6afde5..da680c9 100644
--- a/src/strmode.c
+++ b/src/strmode.c
@@ -32,6 +32,7 @@
 #include <sys/stat.h>
 #include <string.h>
 
+#if !HAVE_STRMODE
 void
 strmode(mode_t mode, char *p)
 {
@@ -141,3 +142,4 @@ strmode(mode_t mode, char *p)
 	*p++ = ' ';		/* will be a '+' if ACL's implemented */
 	*p = '\0';
 }
+#endif
