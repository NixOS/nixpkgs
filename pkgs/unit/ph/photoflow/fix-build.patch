diff --git a/src/external/librtprocess/src/include/librtprocess.h b/src/external/librtprocess/src/include/librtprocess.h
index 47691a09..b1c63dbd 100644
--- a/src/external/librtprocess/src/include/librtprocess.h
+++ b/src/external/librtprocess/src/include/librtprocess.h
@@ -21,6 +21,7 @@
 #define _LIBRTPROCESS_
 
 #include <functional>
+#include <cstddef>
 
 
 enum rpError {RP_NO_ERROR, RP_MEMORY_ERROR, RP_WRONG_CFA, RP_CACORRECT_ERROR};
diff --git a/src/operations/denoise.cc b/src/operations/denoise.cc
index 10050f70..16b340c1 100644
--- a/src/operations/denoise.cc
+++ b/src/operations/denoise.cc
@@ -27,7 +27,7 @@
 
  */
 
-#include <vips/cimg_funcs.h>
+//#include <vips/cimg_funcs.h>
 
 #include "../base/new_operation.hh"
 #include "convert_colorspace.hh"
diff --git a/src/operations/gmic/gmic.cc b/src/operations/gmic/gmic.cc
index 876e7c20..fc6a8505 100644
--- a/src/operations/gmic/gmic.cc
+++ b/src/operations/gmic/gmic.cc
@@ -28,13 +28,31 @@
  */
 
 //#include <vips/cimg_funcs.h>
+#include <vips/vips.h>
 
 #include "../../base/processor_imp.hh"
 #include "../convertformat.hh"
 #include "gmic.hh"
 
-int vips_gmic(VipsImage **in, VipsImage** out, int n, int padding, double x_scale, double y_scale, const char* command, ...);
-
+int vips_gmic(VipsImage **in, VipsImage** out, int n, int padding, double x_scale, double y_scale, const char* command, ...)
+{
+	VipsArrayImage *array; 
+	va_list ap;
+	int result;
+
+#ifndef NDEBUG
+	printf("vips_gmic(): padding=%d\n", padding);
+#endif
+
+	array = vips_array_image_new( in, n ); 
+	va_start( ap, command );
+	result = vips_call_split( "gmic", ap, array, out, 
+		padding, x_scale, y_scale, command );
+	va_end( ap );
+	vips_area_unref( VIPS_AREA( array ) );
+
+	return( result );
+}
 
 PF::GMicPar::GMicPar(): 
   OpParBase(),
diff --git a/src/vips/gmic/gmic/src/CImg.h b/src/vips/gmic/gmic/src/CImg.h
index 268b9e62..5a79640c 100644
--- a/src/vips/gmic/gmic/src/CImg.h
+++ b/src/vips/gmic/gmic/src/CImg.h
@@ -32843,7 +32843,7 @@ namespace cimg_library_suffixed {
        \see deriche(), vanvliet().
     **/
     CImg<T>& blur_box(const float boxsize, const bool boundary_conditions=true) {
-      const float nboxsize = boxsize>=0?boxsize:-boxsize*std::max(_width,_height,_depth)/100;
+      const float nboxsize = boxsize>=0?boxsize:-boxsize*std::max({_width,_height,_depth})/100;
       return blur_box(nboxsize,nboxsize,nboxsize,boundary_conditions);
     }
 
