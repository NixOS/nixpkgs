{ lib
, stdenv
, buildBazelPackage
, buildPythonPackage
, fetchFromGitHub
, absl-py
, bazel_5
, cloud-tpu-client
, datasets
, evaluate
, expecttest
, pytestCheckHook
, python3
, pythonOlder
, pyyaml
, runCommandNoCC
, symlinkJoin
, tensorflow
, torch
, torchvision
, transformers
, writeTextFile
}:

let
  pname = "torch-xla";
  version = "2.1.0";

  meta = with lib; {
    description = "PyTorch/XLA is a Python package that uses the XLA deep learning compiler to connect the PyTorch deep learning framework and Cloud TPUs.";
    homepage = "https://github.com/pytorch/xla";
    license = licenses.bsd3;
    maintainers = [ maintainers.gbpdt ];
  };

  arch =
    # KeyError: ('Linux', 'arm64')
    if stdenv.hostPlatform.isLinux && stdenv.hostPlatform.linuxArch == "arm64" then "aarch64"
    else stdenv.hostPlatform.linuxArch;

  src = fetchFromGitHub {
    owner = "pytorch";
    repo = "xla";
    rev = "v${version}";
    sha256 = "sha256-vXdOoP9tqI9hvi+WASPb50kXueb8gyzCZJLeHKppAdo=";
  };

  torch-build-dir = runCommandNoCC "torch-build-dir" {} ''
    mkdir -p $out/build
    ln -s ${torch.lib}/lib $out/build/lib
    mkdir -p $out/torch
    ln -s ${torch.dev}/include $out/torch/include
    mkdir -p $out/c10/macros
    ln -s ${torch.dev}/include/c10/macros/cmake_macros.h $out/c10/macros/
  '';

  torch-bazel-dir = symlinkJoin {
    name = "torch-bazel-dir";
    paths = [
      torch.src
      torch-build-dir
    ];
  };

  version-cpp = writeTextFile {
    name = "version.cpp";
    text = ''
      // Autogenerated file, do not edit!
      #include "torch_xla/csrc/version.h"

      namespace torch_xla {

      const char XLA_GITREV[] = {"${src.rev}"};
      const char TORCH_GITREV[] = {"${torch.src.rev}"};

      }  // namespace torch_xla
    '';
  };

  bazel-python-env = python3.withPackages (ps: with ps; [
    torch
  ]);

  bazel-build = buildBazelPackage rec {
    name = "bazel-build-${pname}-${version}";

    inherit src;

    bazel = bazel_5;

    nativeBuildInputs = [
      bazel-python-env
      tensorflow
    ];

    buildInputs = [
    ];

    postPatch = ''
      rm -f .bazelversion
      substituteInPlace bazel/dependencies.bzl --replace 'PYTORCH_LOCAL_DIR = "../"' 'PYTORCH_LOCAL_DIR = "${torch-bazel-dir}"'

      # Write a 'good enough' version.cpp so we can build, since this is created
      # in setup.py, which our build only runs after the Bazel build
      cp ${version-cpp} torch_xla/csrc/version.cpp
    '';

    preBuild = ''
      patchShebangs codegen/fix_includes.sh
    '';

    bazelTargets = [
      "//:_XLAC.so"
    ];

    bazelFlags = [
      "--verbose_failures"
    ];

    fetchAttrs = {
      sha256 = "sha256-Ht3+oFyR3Ck+6jrdD16Iu8NnDSfQOFU1lS0gyp9Ww7k=";
    };

    buildAttrs = {
      outputs = [ "out" ];

      installPhase = ''
        mkdir -p $out/lib
        cp bazel-bin/_XLAC.so $out/lib
      '';
    };

    removeRulesCC = false;
    removeLocalConfigCc = false;

    inherit meta;
  };

in buildPythonPackage rec {
  inherit pname version;

  disabled = pythonOlder "3.7";

  inherit src;

  patches = [
    ./setup.py-bazel.patch
  ];

  postPatch = ''
    substituteInPlace setup.py --replace 'xla_git_sha, torch_git_sha = get_git_head_sha(base_dir)' 'xla_git_sha, torch_git_sha = "${src.rev}", "${torch.src.rev}"'
    rm -f .bazelversion
  '';

  nativeBuildInputs = [
  ];

  propagatedBuildInputs = [
    absl-py
    cloud-tpu-client
    pyyaml
    torch
  ];

  postInstall = ''
    ln -s ${bazel-build}/lib/_XLAC.so $out/${python3.sitePackages}/
  '';

  nativeCheckInputs = [
    pytestCheckHook
  ];

  checkInputs = [
    datasets
    evaluate
    expecttest
    torchvision
    transformers
  ];

  # Use CPU for tests
  PJRT_DEVICE = "CPU";

  preCheck = ''
    # Needed to resolve some test imports
    export PYTHONPATH=test:$PYTHONPATH
  '';

  disabledTestPaths = [
    # Attempts network connections
    "test/pjrt/test_collective_ops_tpu.py"
    # Requires a TPU
    "test/pjrt/test_runtime_tpu.py"
    # TODO: requires tensorflow but there are conflicting versions of tensorboard for some reason
    "test/stablehlo/test_saved_model.py"
    # Code at module scope fails, could just be a bug
    "test/spmd/test_train_spmd_linear_model.py"
    # TODO: slow
    "test/test_profiler.py"
    # TODO: failures
    "test/metrics_compare_utils_test.py"
    "test/test_input_output_aliases.py"
    "test/ds/test_dynamic_shapes.py"
    "test/pjrt/test_ddp.py"
    "test/pjrt/test_torchrun.py"
    "test/spmd/test_dynamo_spmd.py"
    "test/spmd/test_spmd_graph_dump.py"
    "test/spmd/test_xla_distributed_checkpoint.py"
    "test/spmd/test_xla_sharding.py"
    "test/spmd/test_xla_sharding_hlo.py"
    "test/spmd/test_xla_spmd_python_api_interaction.py"
    "test/spmd/test_xla_virtual_device.py"
    "test/stablehlo/test_stablehlo_compile.py"
  ];

  disabledTests = [
    # TODO: failures
    "test_split_empty_dim"
    "test_multi_init_xla_backend"
    "TestFSDPWithMetaDevice"
    "test_dump_graph_with_dynamo_execution"
    "TestExperimentalTpu"
    "test_metrics_report"
    "test_profiler_output"
    "TestExperimentalPjrtMultiCpu"
    "test_resnet18"
  ];

  pythonImportsCheck = [
    "torch_xla"
  ];

  passthru = {
    inherit (bazel-build) deps;
  };

  inherit meta;
}
