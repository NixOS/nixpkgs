{ stdenv, buildPythonPackage, pythonOlder, fetchPypi, darwin, python, xcodebuild
, pyobjc-core<% [[ -n $python_frameworks ]] && (export IFS=' '; for i in ${python_frameworks[@]}; do printf ", pyobjc-framework-%s" "$i"; done) %> }:

# This file is generated by pkgs/development/python-modules/pyobjc/update.sh. Please don't modify it directly.
# If you need help please contact a maintainer of pyobjc.

buildPythonPackage rec {
  pname = "pyobjc-framework-<%= $framework %>";
  version = "<%= $version %>";

<% if [[ $framework != AuthenticationServices && $framework != AutomaticAssessmentConfiguration && $framework != CoreSpotlight && $framework != ExternalAccessory && $framework != Network && $framework != OSLog && $framework != PushKit && $framework != Speech && $framework != SystemExtensions && $framework != Vision ]]; then -%>
  disabled = pythonOlder "3.6";
<% elif [[ $framework == CoreSpotlight && $framework == ExternalAccessory && $framework == Vision ]]; then -%>
  disabled = pythonOlder "3.6" ||
    (stdenv.lib.versionOlder "${darwin.apple_sdk.sdk.version}" "10.13") && throw "${pname}: requires apple_sdk.sdk 10.13";
<% elif [[ $framework == Network && $framework == UserNotifications ]]; then -%>
  disabled = pythonOlder "3.6" ||
    (stdenv.lib.versionOlder "${darwin.apple_sdk.sdk.version}" "10.14") && throw "${pname}: requires apple_sdk.sdk 10.14";
<% else -%>
  disabled = pythonOlder "3.6" ||
    (stdenv.lib.versionOlder "${darwin.apple_sdk.sdk.version}" "10.15") && throw "${pname}: requires apple_sdk.sdk 10.15";
<% fi %>
  src = fetchPypi {
    inherit pname version;
    sha256 = "<%= $hash %>";
  };
<% if [[ -n $patch ]]; then %>
  patches = [ <%= $patch %> ];
<% fi %>
  postPatch = ''
    # Hardcode correct SDK version
    # Remove xcrun call, all paths are provided by nix anyway
    substituteInPlace pyobjc_setup.py \
      --replace 'os.path.basename(data)[6:-4]' '"${darwin.apple_sdk.sdk.version}"' \
      --replace 'os_level = get_os_level()' 'os_level = "${darwin.apple_sdk.sdk.version}"' \
      --replace 'os_level = get_sdk_level()' 'os_level = "${darwin.apple_sdk.sdk.version}"' \
      --replace 'os_level.split' '"${darwin.apple_sdk.sdk.version}".split' \
      --replace 'return get_os_level()' 'return "${darwin.apple_sdk.sdk.version}"' \
      --replace '["/usr/bin/xcrun", "-sdk", "macosx", "--show-sdk-path"]' '["echo", "${xcodebuild.sdk}.sdk"]'

<% if [[ $framework == Contacts || $framework == ContactsUI || $framework == CryptoTokenKit || $framework == Intents || $framework == MultipeerConnectivity || $framework == NetworkExtension || $framework == NotificationCenter || $framework == Photos || $framework == PhotosUI || $framework == SafariServices ]]; then -%>
    # Remove links to impure frameworks which also cause a link failure with sandbox
    substituteInPlace setup.py \
      --replace 'extra_link_args=["-framework", "<%= $framework %>"]' 'extra_link_args=[]'
<% fi -%>

<% if [[ $framework != Cocoa && $framework != FSEvents && $framework != DictionaryServices && $framework != GameCenter && $framework != IMServicePlugIn && $framework != iTunesLibrary && $framework != LaunchServices && $framework != libdispatch && $framework != SearchKit && $framework != Quartz ]]; then -%>
    # Import Nix Framework instead of system one
    substituteInPlace Lib/<%= $framework %>/__init__.py \
      --replace '/System/Library/Frameworks/<%= $framework %>.framework' "${darwin.apple_sdk.frameworks.<%= $framework %>}/Library/Frameworks/<%= $framework %>.framework"
<% elif [[ $framework == FSEvents || $framework == DictionaryServices || $framework == LaunchServices || $framework == SearchKit ]]; then -%>
    # Import Nix Framework instead of system one
    substituteInPlace Lib/<%= $framework %>/__init__.py \
      --replace '/System/Library/Frameworks/CoreServices.framework' "${darwin.apple_sdk.frameworks.CoreServices}/Library/Frameworks/CoreServices.framework"
<% elif [[ $framework == Cocoa ]]; then -%>
    # Import Nix Framework instead of system one
    substituteInPlace Lib/AppKit/__init__.py \
      --replace '/System/Library/Frameworks/AppKit.framework' "${darwin.apple_sdk.frameworks.AppKit}/Library/Frameworks/AppKit.framework"

    substituteInPlace Lib/CGL/__init__.py \
      --replace '/System/Library/Frameworks/OpenGL.framework' "${darwin.apple_sdk.frameworks.OpenGL}/Library/Frameworks/OpenGL.framework"

    substituteInPlace Lib/CoreFoundation/__init__.py \
      --replace '/System/Library/Frameworks/CoreFoundation.framework' "${darwin.apple_sdk.frameworks.CoreFoundation}/Library/Frameworks/CoreFoundation.framework"

    substituteInPlace Lib/Foundation/__init__.py \
      --replace '/System/Library/Frameworks/Foundation.framework' "${darwin.apple_sdk.frameworks.Foundation}/Library/Frameworks/Foundation.framework"
<% elif [[ $framework == GameCenter || $framework == IMServicePlugIn ]]; then -%>
    # Import Nix Framework instead of system one
    substituteInPlace Lib/<%= $framework %>/__init__.py \
      --replace '/System/Library/Frameworks/GameKit.framework' "${darwin.apple_sdk.frameworks.GameKit}/Library/Frameworks/GameKit.framework"
<% elif [[ $framework == Quartz ]]; then -%>
    # Import Nix Framework instead of system one
    <% for framework_patch in CoreGraphics CoreVideo ImageIO QuartzCore; do -%>
    substituteInPlace Lib/Quartz/<%= $framework_patch %>/__init__.py \
      --replace '/System/Library/Frameworks/ApplicationServices.framework/Frameworks/<%= $framework_patch %>.framework' "${darwin.apple_sdk.frameworks.<%= $framework_patch %>}/Library/Frameworks/<%= $framework_patch %>.framework"
    <% done -%>
    <% for framework_patch in ImageKit PDFKit QuartzComposer QuartzFilters QuickLookUI; do -%>
    substituteInPlace Lib/Quartz/<%= $framework_patch %>/__init__.py \
      --replace '/System/Library/Frameworks/ApplicationServices.framework/Frameworks/<%= $framework_patch %>.framework' "${darwin.apple_sdk.frameworks.Quartz}/Library/Frameworks/Quartz.framework/Frameworks/<%= $framework_patch %>.framework"
    <% done -%>
<% fi -%>
  '';
<% if [[ -n $build_frameworks ]]; then %>
  buildInputs = with darwin.apple_sdk.frameworks; [
<% export IFS=' '; for i in $build_frameworks; do printf "    %s\n" "$i"; done -%>
  ];
<% fi %>
  propagatedBuildInputs = [
    pyobjc-core
<% [[ -n $python_frameworks ]] && (export IFS=' '; for i in ${python_frameworks[@]}; do printf "    pyobjc-framework-%s\n" "$i"; done) -%>
  ];

  # clang-7: error: argument unused during compilation: '-fno-strict-overflow'
  hardeningDisable = [ "strictoverflow" ];

<% if [[ $framework == CFNetwork ]]; then -%>
  # Modules/_manual.m:28:30: error: unused variable 'mod_CFStreamClientContext' [-Werror,-Wunused-variable]
  NIX_CFLAGS_COMPILE = [ "-Wno-error=unused-variable" ];
<% elif [[ $framework == CoreAudioKit || $framework == CoreServices || $framework == SearchKit ]]; then -%>
  # TODO: Activate on 7.0.0
  doCheck = false;
<% fi -%>

<% if [[ $tests != false ]]; then -%>
  # show test names instead of just dots
  checkPhase = ''
    runHook preCheck

    ${python.interpreter} setup.py test --verbosity=3

    runHook postCheck
  '';

  preCheck = ''
    # testConstants in PyObjCTest.test_cfsocket.TestSocket returns: Segmentation fault: 11
    export DYLD_FRAMEWORK_PATH=/System/Library/Frameworks
<% if [[ $framework == AddressBook ]]; then -%>
    # Test removed because it requires network:
    # an error occurred while attempting to obtain endpoint for listener 'HostCallsAuxiliary': Connection interrupted
    rm PyObjCTest/test_abpersonview.py

    # Test removed because it likely requires network:
    # AssertionError: None is not an instance of <objective-c class ABAddressBook at 0x7fff96826300>
    rm PyObjCTest/test_abaddressbookc.py

    # Set correct SDK version
    substituteInPlace PyObjCTest/test_abglobals.py \
      --replace 'def testConstants_10_7_broken(self):' 'def disabled_testConstants_10_7_broken(self):'

    # Crash in sandbox: Terminating app due to uncaught exception 'NSInternalInconsistencyException', reason: 'Critical error: required built-in appearance SystemAppearance not found'
    rm PyObjCTest/test_abpeoplepickerc.py

    # objc.ProtocolError: ("protocol 'ABPersonPickerDelegate' does not exist", 'ABPersonPickerDelegate')
    rm PyObjCTest/test_abpersonpickerdelegate.py
<% elif [[ $framework == AVFoundation ]]; then -%>
    # AttributeError: AVAudioMake3DPoint
    rm PyObjCTest/test_avaudiotypes.py

    # AttributeError: AVMakeBeatRange
    rm PyObjCTest/test_avaudiosequencer.py

    # Remove Test which is probably missing a sdk check
    substituteInPlace PyObjCTest/test_avcapturedevice.py \
      --replace 'def testMissingConstants(self):' 'def disabled_testMissingConstants(self):'
<% elif [[ $framework == AVKit ]]; then -%>
    # objc.ProtocolError: ("protocol 'AVCaptureViewDelegate' does not exist", 'AVCaptureViewDelegate')
    rm PyObjCTest/test_avcaptureview.py
<% elif [[ $framework == CFNetwork ]]; then -%>
    # Remove Test which requires network
    rm PyObjCTest/test_cfhttpmessage.py PyObjCTest/test_cfhttpstream.py PyObjCTest/test_cfnetworkdiagnostics.py PyObjCTest/test_cfproxysupport.py

    # AssertionError: None is not an instance of <objective-c class NSArray at 0x7fff88eaa2a8>
    rm PyObjCTest/test_cfhost.py
<% elif [[ $framework == Cocoa ]]; then %>
    # symlink TestSupport.py because Python only checks the first directory in PYTHONPATH
    ln -s "${pyobjc-core.outPath}/lib/${python.libPrefix}/site-packages/PyObjCTools/TestSupport.py" Lib/PyObjCTools/TestSupport.py

    # Crash in sandbox: Terminating app due to uncaught exception 'NSInternalInconsistencyException', reason: 'Critical error: required built-in appearance SystemAppearance not found'
    rm PyObjCTest/test_ns*.py PyObjCTest/guitest_graphics.py

    # Tries to access files outside the sandbox
    rm PyObjCTest/test_cf*.py

    # Tries to connect to host system services
    rm PyObjCTest/test_weirdness.py PyObjCTest/test_appkit_protocols.py
<% elif [[ $framework == CoreAudio ]]; then -%>
    # Tries to connect to host system services
    rm PyObjCTest/test_coreaudiotypes.py
<% elif [[ $framework == iTunesLibrary ]]; then -%>
    # Remove Test which is probably missing a sdk check
    substituteInPlace PyObjCTest/test_itlibmediaitem.py \
      --replace 'def testConstants_missing(self):' 'def disabled_testConstants_missing(self):'
<% elif [[ $framework == Metal ]]; then -%>
    # Remove Test which is probably missing a sdk check
    # AttributeError: MTLSamplePositionMake
    substituteInPlace PyObjCTest/test_mtltypes.py \
      --replace 'v = Metal.MTLSamplePositionMake(0.5, 1.5)' "" \
      --replace 'self.assertIsInstance(v, Metal.MTLSamplePosition)' "" \
      --replace 'self.assertEqual(v, (0.5, 1.5))' ""

    # Remove Test which is probably missing a sdk check
    # AttributeError: MTLIndirectCommandBufferExecutionRangeMake
    substituteInPlace PyObjCTest/test_mtlindirectcommandbuffer.py \
      --replace 'def test_functions(self):' 'def disabled_test_functions(self):'
<% elif [[ $framework == SyncServices ]]; then -%>
    # Can't register for notify for com.apple.SyncServices.SyncStateChanged, rc 9
    rm PyObjCTest/test_isyncmanager.py
<% elif [[ $framework == WebKit ]]; then -%>
    # Various objc.ProtocolError's
    rm PyObjCTest/test_webdownload.py PyObjCTest/test_wkscriptmessagehandler.py \
      PyObjCTest/test_webresourceloaddelegate.py PyObjCTest/test_webeditingdelegate.py \
      PyObjCTest/test_webframeloaddelegate.py
<% fi -%>
  '';
<% else -%>
  dontUseSetuptoolsCheck = true;
<% fi %>
  # fails with
  # Assertion failed: (stat(path, &stat_data) == 0), function _open_and_mmap_for_reading, file /AppleInternal/BuildRoot/Library/Caches/com.apple.xbs/Sources/LanguageIdentifier/LanguageIdentifier-133/LanguageIdentifier.c, line 621.
  # pythonImportsCheck = [ "<%= $framework %>" ];

<% if [[ $framework == Cocoa ]]; then -%>
  postCheck = ''
    # If the symlink exists in the final package the modules can't be used in a Python environment because the file would be duplicated
    rm Lib/PyObjCTools/TestSupport.py
  '';
<% fi -%>
  meta = with stdenv.lib; {
    description = "Wrappers for the framework <%= $framework %> on Mac OS X";
    homepage = "https://pythonhosted.org/pyobjc-framework-<%= $framework %>/";
    license = licenses.mit;
    platforms = platforms.darwin;
    maintainers = with maintainers; [ SuperSandro2000 ];
  };
}
