--- a/libsonic/connection.py	2016-01-14 15:23:11.728608619 +0000
+++ b/libsonic/connection.py	2016-01-14 15:26:20.786183521 +0000
@@ -27,37 +27,13 @@
 logger = logging.getLogger(__name__)
 
 class HTTPSConnectionChain(httplib.HTTPSConnection):
-    _preferred_ssl_protos = (
-        ('TLSv1', ssl.PROTOCOL_TLSv1),
-        ('SSLv3', ssl.PROTOCOL_SSLv3),
-        ('SSLv23', ssl.PROTOCOL_SSLv23),
-    )
-    _ssl_working_proto = None
-
     def connect(self):
         sock = socket.create_connection((self.host, self.port), self.timeout)
         if self._tunnel_host:
             self.sock = sock
             self._tunnel()
-        if self._ssl_working_proto is not None:
-            # If we have a working proto, let's use that straight away
-            logger.debug("Using known working proto: '%s'",
-                         self._ssl_working_proto)
-            self.sock = ssl.wrap_socket(sock, self.key_file, self.cert_file,
-                ssl_version=self._ssl_working_proto)
-            return
-        # Try connecting via the different SSL protos in preference order
-        for proto_name, proto in self._preferred_ssl_protos:
-            try:
-                self.sock = ssl.wrap_socket(sock, self.key_file, self.cert_file,
-                    ssl_version=proto)
-            except:
-                pass
-            else:
-                # Cache the working ssl version
-                HTTPSConnectionChain._ssl_working_proto = proto
-                break
+        self.sock = ssl.wrap_socket(sock, self.key_file, self.cert_file)
 
 
 class HTTPSHandlerChain(urllib2.HTTPSHandler):
