diff --git a/slugify/tests.py b/slugify/tests.py
index 9f636c4..5562e87 100644
--- a/slugify/tests.py
+++ b/slugify/tests.py
@@ -3,7 +3,7 @@ from __future__ import unicode_literals
 
 import six
 import unittest
-from nose.tools import eq_, raises
+import pytest
 
 from slugify import slugify, smart_text, SLUG_OK
 
@@ -13,31 +13,31 @@ def test_slugify():
     x = '-'.join([u, u])
     y = ' - '.join([u, u])
 
-    @raises(ValueError)
     def test_incoherent_ok_and_only_ascii_raises_an_error():
         """Checks that only_ascii=True with non ascii "ok" chars actually raises an error."""
-        slugify('angry smiley !', ok='Ã¨_Ã©', only_ascii=True)
+        with pytest.raises(ValueError):
+            slugify('angry smiley !', ok='Ã¨_Ã©', only_ascii=True)
 
     def check(x, y):
-        eq_(slugify(x), y)
+        assert slugify(x) == y
 
     def check_only_ascii(x, y):
-        eq_(slugify(x, only_ascii=True), y)
+        assert slugify(x, only_ascii=True) == y
 
     def check_only_ascii_capital(x, y):
-        eq_(slugify(x, lower=False, only_ascii=True), y)
+        assert slugify(x, lower=False, only_ascii=True) == y
 
     def check_only_ascii_lower_nospaces(x, y):
-        eq_(slugify(x, lower=True, spaces=False, only_ascii=True), y)
+        assert slugify(x, lower=True, spaces=False, only_ascii=True) == y
 
     def check_ok_chars(x, y):
-        eq_(slugify(x, ok='-â™°Ã©_Ã¨'), y)
+        assert slugify(x, ok='-â™°Ã©_Ã¨') == y
 
     def check_empty_ok_chars(x, y):
-        eq_(slugify(x, ok=''), y)
+        assert slugify(x, ok='') == y
 
     def check_limited_ok_chars_only_ascii(x, y):
-        eq_(slugify(x, ok='-', only_ascii=True), y)
+        assert slugify(x, ok='-', only_ascii=True) == y
 
     s = [('xx x  - "#$@ x', 'xx-x-x'),
          ('BÃ¤n...g (bang)', 'bÃ¤ng-bang'),
@@ -112,11 +112,11 @@ def test_slugify():
 
     #Test custom space replacement
     x, y = ('-â˜€- pretty waves under the sunset ðŸ˜Ž', '--~pretty~waves~under~the~sunset')
-    eq_(slugify(x, space_replacement='~'), y)
+    assert slugify(x, space_replacement='~') == y
 
     #Test default auto space replacement
     x, y = ('-â˜€- pretty waves under the sunset ðŸ˜Ž', 'pretty~waves~under~the~sunset')
-    eq_(slugify(x, ok='~'), y)
+    assert slugify(x, ok='~') == y
 
 
 class SmartTextTestCase(unittest.TestCase):

