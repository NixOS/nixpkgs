--- a/compiler/passes/surfaceAstRenaming.ml
+++ b/compiler/passes/surfaceAstRenaming.ml
@@ -1110,7 +1110,7 @@ let find_opt_local_or_global name all_env =
     | None -> find_opt_global name all_env
     | v -> v
 
-let path_expr_to_module_aux p = function
+let path_expr_to_module_aux p : _ -> _ result = function
   | Some (OpenedIdent (tree, ident, path)) ->
       (match Tree.get_path_opt tree p with
            (* the path is not in the tree, which means a 'dot' access
diff --git a/ocamllib/libbase/baseInt64.mli b/ocamllib/libbase/baseInt64.mli
index fb544706..734437f9 100644
--- a/ocamllib/libbase/baseInt64.mli
+++ b/ocamllib/libbase/baseInt64.mli
@@ -40,7 +40,9 @@ external shift_right_logical : int64 -> int -> int64 = "%int64_lsr"
 external of_int : int -> int64 = "%int64_of_int"
 external to_int : int64 -> int = "%int64_to_int"
 external of_float : float -> int64 = "caml_int64_of_float"
+ "caml_int64_of_float_unboxed" [@@unboxed] [@@noalloc]
 external to_float : int64 -> float = "caml_int64_to_float"
+ "caml_int64_to_float_unboxed" [@@unboxed] [@@noalloc]
 external of_int32 : int32 -> int64 = "%int64_of_int32"
 external to_int32 : int64 -> int32 = "%int64_to_int32"
 external of_nativeint : nativeint -> int64 = "%int64_of_nativeint"
@@ -48,7 +50,9 @@ external to_nativeint : int64 -> nativeint = "%int64_to_nativeint"
 external of_string : string -> int64 = "caml_int64_of_string"
 val to_string : int64 -> string
 external bits_of_float : float -> int64 = "caml_int64_bits_of_float"
+ "caml_int64_bits_of_float_unboxed" [@@unboxed] [@@noalloc]
 external float_of_bits : int64 -> float = "caml_int64_float_of_bits"
+ "caml_int64_float_of_bits_unboxed" [@@unboxed] [@@noalloc]
 type t = int64
 val compare : t -> t -> int
 external format : string -> int64 -> string = "caml_int64_format"
