diff -rc gcc-4.1.2-orig/Makefile.in gcc-4.1.2/Makefile.in
*** gcc-4.1.2-orig/Makefile.in	Tue Apr  4 23:03:05 2006
--- gcc-4.1.2/Makefile.in	Wed May 23 11:35:41 2007
***************
*** 213,219 ****
  RAW_CXX_TARGET_EXPORTS = \
  	$(BASE_TARGET_EXPORTS) \
  	CXX_FOR_TARGET="$(RAW_CXX_FOR_TARGET)"; export CXX_FOR_TARGET; \
! 	CXX="$(RAW_CXX_FOR_TARGET)"; export CXX;
  
  NORMAL_TARGET_EXPORTS = \
  	$(BASE_TARGET_EXPORTS) \
--- 213,220 ----
  RAW_CXX_TARGET_EXPORTS = \
  	$(BASE_TARGET_EXPORTS) \
  	CXX_FOR_TARGET="$(RAW_CXX_FOR_TARGET)"; export CXX_FOR_TARGET; \
! 	CXX="$(RAW_CXX_FOR_TARGET) $(CFLAGS_FOR_BUILD)"; export CXX; \
! 	CXXCPP="$(RAW_CXX_FOR_TARGET) $(CFLAGS_FOR_BUILD) -E"; export CXXCPP;
  
  NORMAL_TARGET_EXPORTS = \
  	$(BASE_TARGET_EXPORTS) \
***************
*** 352,357 ****
--- 353,366 ----
  @host_makefile_frag@
  ###
  
+ CFLAGS += $(NIX_EXTRA_CFLAGS)
+ CPPFLAGS_FOR_TARGET += $(NIX_EXTRA_CFLAGS)
+ CXXFLAGS += $(NIX_EXTRA_CFLAGS)
+ LDFLAGS += $(NIX_EXTRA_LDFLAGS)
+ LDFLAGS_FOR_TARGET += $(NIX_EXTRA_LDFLAGS)
+ BOOT_CFLAGS += $(NIX_EXTRA_CFLAGS)
+ BOOT_LDFLAGS += $(NIX_EXTRA_LDFLAGS)
+ 
  # This is the list of directories that may be needed in RPATH_ENVVAR
  # so that prorgams built for the target machine work.
  TARGET_LIB_PATH = $(TARGET_LIB_PATH_libstdc++-v3)$(TARGET_LIB_PATH_libmudflap)$(TARGET_LIB_PATH_libssp)$(HOST_LIB_PATH_gcc)
diff -rc gcc-4.1.2-orig/gcc/Makefile.in gcc-4.1.2/gcc/Makefile.in
*** gcc-4.1.2-orig/gcc/Makefile.in	Wed Nov  1 15:40:44 2006
--- gcc-4.1.2/gcc/Makefile.in	Wed May 23 11:35:41 2007
***************
*** 383,389 ****
  MD5_H	    = $(srcdir)/../include/md5.h
  
  # Default native SYSTEM_HEADER_DIR, to be overridden by targets.
! NATIVE_SYSTEM_HEADER_DIR = /usr/include
  # Default cross SYSTEM_HEADER_DIR, to be overridden by targets.
  CROSS_SYSTEM_HEADER_DIR = @CROSS_SYSTEM_HEADER_DIR@
  
--- 383,393 ----
  MD5_H	    = $(srcdir)/../include/md5.h
  
  # Default native SYSTEM_HEADER_DIR, to be overridden by targets.
! # Nix: we override NATIVE_SYSTEM_HEADER_DIR in order to prevent
! # `fixinc' from fixing header files in /usr/include.  However,
! # NATIVE_SYSTEM_HEADER_DIR must point to an existing directory, so set
! # it to some dummy directory.
! NATIVE_SYSTEM_HEADER_DIR = $(NIX_FIXINC_DUMMY)
  # Default cross SYSTEM_HEADER_DIR, to be overridden by targets.
  CROSS_SYSTEM_HEADER_DIR = @CROSS_SYSTEM_HEADER_DIR@
  
***************
*** 3007,3013 ****
    -DGPLUSPLUS_INCLUDE_DIR=\"$(gcc_gxx_include_dir)\" \
    -DGPLUSPLUS_TOOL_INCLUDE_DIR=\"$(gcc_gxx_include_dir)/$(target_noncanonical)\" \
    -DGPLUSPLUS_BACKWARD_INCLUDE_DIR=\"$(gcc_gxx_include_dir)/backward\" \
!   -DLOCAL_INCLUDE_DIR=\"$(local_includedir)\" \
    -DCROSS_INCLUDE_DIR=\"$(CROSS_SYSTEM_HEADER_DIR)\" \
    -DTOOL_INCLUDE_DIR=\"$(gcc_tooldir)/include\" \
    @TARGET_SYSTEM_ROOT_DEFINE@
--- 3011,3017 ----
    -DGPLUSPLUS_INCLUDE_DIR=\"$(gcc_gxx_include_dir)\" \
    -DGPLUSPLUS_TOOL_INCLUDE_DIR=\"$(gcc_gxx_include_dir)/$(target_noncanonical)\" \
    -DGPLUSPLUS_BACKWARD_INCLUDE_DIR=\"$(gcc_gxx_include_dir)/backward\" \
!   -DLOCAL_INCLUDE_DIR=\"/no-such-dir\" \
    -DCROSS_INCLUDE_DIR=\"$(CROSS_SYSTEM_HEADER_DIR)\" \
    -DTOOL_INCLUDE_DIR=\"$(gcc_tooldir)/include\" \
    @TARGET_SYSTEM_ROOT_DEFINE@
diff -rc gcc-4.1.2-orig/gcc/cppdefault.c gcc-4.1.2/gcc/cppdefault.c
*** gcc-4.1.2-orig/gcc/cppdefault.c	Sat Jun 25 04:02:01 2005
--- gcc-4.1.2/gcc/cppdefault.c	Wed May 23 11:35:41 2007
***************
*** 41,46 ****
--- 41,50 ----
  # undef CROSS_INCLUDE_DIR
  #endif
  
+ #undef LOCAL_INCLUDE_DIR
+ #undef SYSTEM_INCLUDE_DIR
+ #undef STANDARD_INCLUDE_DIR
+ 
  const struct default_include cpp_include_defaults[]
  #ifdef INCLUDE_DEFAULTS
  = INCLUDE_DEFAULTS;
diff -rc gcc-4.1.2-orig/gcc/gcc.c gcc-4.1.2/gcc/gcc.c
*** gcc-4.1.2-orig/gcc/gcc.c	Tue Nov  7 15:26:21 2006
--- gcc-4.1.2/gcc/gcc.c	Wed May 23 11:35:41 2007
***************
*** 1435,1444 ****
  /* Default prefixes to attach to command names.  */
  
  #ifndef STANDARD_STARTFILE_PREFIX_1
! #define STANDARD_STARTFILE_PREFIX_1 "/lib/"
  #endif
  #ifndef STANDARD_STARTFILE_PREFIX_2
! #define STANDARD_STARTFILE_PREFIX_2 "/usr/lib/"
  #endif
  
  #ifdef CROSS_COMPILE  /* Don't use these prefixes for a cross compiler.  */
--- 1435,1444 ----
  /* Default prefixes to attach to command names.  */
  
  #ifndef STANDARD_STARTFILE_PREFIX_1
! #define STANDARD_STARTFILE_PREFIX_1 ""
  #endif
  #ifndef STANDARD_STARTFILE_PREFIX_2
! #define STANDARD_STARTFILE_PREFIX_2 ""
  #endif
  
  #ifdef CROSS_COMPILE  /* Don't use these prefixes for a cross compiler.  */
***************
*** 1459,1466 ****
  #endif
  
  static const char *const standard_exec_prefix = STANDARD_EXEC_PREFIX;
! static const char *const standard_exec_prefix_1 = "/usr/libexec/gcc/";
! static const char *const standard_exec_prefix_2 = "/usr/lib/gcc/";
  static const char *md_exec_prefix = MD_EXEC_PREFIX;
  
  static const char *md_startfile_prefix = MD_STARTFILE_PREFIX;
--- 1459,1466 ----
  #endif
  
  static const char *const standard_exec_prefix = STANDARD_EXEC_PREFIX;
! static const char *const standard_exec_prefix_1 = "/no-such-path/";
! static const char *const standard_exec_prefix_2 = "/no-such-path/";
  static const char *md_exec_prefix = MD_EXEC_PREFIX;
  
  static const char *md_startfile_prefix = MD_STARTFILE_PREFIX;
diff -rc gcc-4.1.2-orig/ltcf-cxx.sh gcc-4.1.2/ltcf-cxx.sh
*** gcc-4.1.2-orig/ltcf-cxx.sh	Sat Jul 16 04:30:53 2005
--- gcc-4.1.2/ltcf-cxx.sh	Wed May 23 11:35:41 2007
***************
*** 989,995 ****
    # the conftest object file.
    pre_test_object_deps_done=no
  
!   for p in `eval $output_verbose_link_cmd`; do
  
      case $p in
  
--- 989,995 ----
    # the conftest object file.
    pre_test_object_deps_done=no
  
!   for p in `true`; do
  
      case $p in
  
diff -rc gcc-4.1.2-orig/ltconfig gcc-4.1.2/ltconfig
*** gcc-4.1.2-orig/ltconfig	Tue Jul  4 22:30:34 2006
--- gcc-4.1.2/ltconfig	Wed May 23 11:35:41 2007
***************
*** 2322,2327 ****
--- 2322,2332 ----
  # A language-specific compiler.
  CC=$CC
  
+ # Ugly hack to get libmudflap (and possibly other libraries) to build.
+ # Libtool filters out \`-B' flags when linking (why?), so the \`-B' flag
+ # to Glibc gets lost.  Here we forcibly add it to any invocation.
+ CC="\$CC $NIX_EXTRA_CFLAGS $NIX_EXTRA_LDFLAGS"
+ 
  # Is the compiler the GNU C compiler?
  with_gcc=$with_gcc
  
