diff --git a/src/libstd/net/tcp.rs b/src/libstd/net/tcp.rs
index 86ecb10edf..626be0a52d 100644
--- a/src/libstd/net/tcp.rs
+++ b/src/libstd/net/tcp.rs
@@ -955,6 +955,7 @@ mod tests {
         }
     }
 
+    #[cfg_attr(target_os = "macos", ignore)]
     #[test]
     fn listen_localhost() {
         let socket_addr = next_test_ip4();
@@ -1013,6 +1014,7 @@ mod tests {
         })
     }
 
+    #[cfg_attr(target_os = "macos", ignore)]
     #[test]
     fn read_eof() {
         each_ip(&mut |addr| {
@@ -1032,6 +1034,7 @@ mod tests {
         })
     }
 
+    #[cfg_attr(target_os = "macos", ignore)]
     #[test]
     fn write_close() {
         each_ip(&mut |addr| {
@@ -1058,6 +1061,7 @@ mod tests {
         })
     }
 
+    #[cfg_attr(target_os = "macos", ignore)]
     #[test]
     fn multiple_connect_serial() {
         each_ip(&mut |addr| {
@@ -1080,6 +1084,7 @@ mod tests {
         })
     }
 
+    #[cfg_attr(target_os = "macos", ignore)]
     #[test]
     fn multiple_connect_interleaved_greedy_schedule() {
         const MAX: usize = 10;
@@ -1116,6 +1121,7 @@ mod tests {
     }
 
     #[test]
+    #[cfg_attr(target_os = "macos", ignore)]
     fn multiple_connect_interleaved_lazy_schedule() {
         const MAX: usize = 10;
         each_ip(&mut |addr| {
@@ -1394,6 +1400,7 @@ mod tests {
     }
 
     #[test]
+    #[cfg_attr(target_os = "macos", ignore)]
     fn clone_while_reading() {
         each_ip(&mut |addr| {
             let accept = t!(TcpListener::bind(&addr));
@@ -1504,7 +1511,10 @@ mod tests {
 
     // FIXME: re-enabled bitrig/openbsd tests once their socket timeout code
     //        no longer has rounding errors.
-    #[cfg_attr(any(target_os = "bitrig", target_os = "netbsd", target_os = "openbsd"), ignore)]
+    #[cfg_attr(any(target_os = "bitrig",
+                   target_os = "netbsd",
+                   target_os = "openbsd",
+                   target_os = "macos"), ignore)]
     #[test]
     fn timeouts() {
         let addr = next_test_ip4();
@@ -1591,6 +1601,7 @@ mod tests {
         drop(listener);
     }
 
+    #[cfg_attr(target_os = "macos", ignore)]
     #[test]
     fn nodelay() {
         let addr = next_test_ip4();
@@ -1605,6 +1616,7 @@ mod tests {
         assert_eq!(false, t!(stream.nodelay()));
     }
 
+    #[cfg_attr(target_os = "macos", ignore)]
     #[test]
     fn ttl() {
         let ttl = 100;
@@ -1642,6 +1654,7 @@ mod tests {
         }
     }
 
+    #[cfg_attr(target_os = "macos", ignore)]
     #[test]
     fn peek() {
         each_ip(&mut |addr| {
