diff -ruNp rustc-1.22.1-src/src/Cargo.lock rustc-1.22.1-src-patched/src/Cargo.lock
This patch updates the vendored "jobserver" dependency of rustc. This is needed because
"jobserver" before 0.1.8 often leads to the error "failed to acquire jobserver token" while 
running rust builds. See also https://github.com/rust-lang/rust/issues/46981

This patch was generated by running `cargo update -p jobserver --precise 0.1.9` followed by
`rm vendor/jobserver && cargo vendor` in the rust 1.22.1 source tree.
--- rustc-1.22.1-src/src/Cargo.lock	2017-11-22 22:33:00.000000000 +0100
+++ rustc-1.22.1-src-patched/src/Cargo.lock	2018-02-01 10:08:45.880047134 +0100
@@ -195,7 +195,7 @@ dependencies = [
  "hex 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "home 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "ignore 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)",
- "jobserver 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)",
+ "jobserver 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)",
  "kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)",
  "libc 0.2.31 (registry+https://github.com/rust-lang/crates.io-index)",
  "libgit2-sys 0.6.15 (registry+https://github.com/rust-lang/crates.io-index)",
@@ -782,7 +782,7 @@ source = "registry+https://github.com/ru
 
 [[package]]
 name = "jobserver"
-version = "0.1.6"
+version = "0.1.9"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 dependencies = [
  "libc 0.2.31 (registry+https://github.com/rust-lang/crates.io-index)",
@@ -1452,7 +1452,7 @@ dependencies = [
  "flate2 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)",
  "fmt_macros 0.0.0",
  "graphviz 0.0.0",
- "jobserver 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)",
+ "jobserver 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)",
  "log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)",
  "owning_ref 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)",
  "rustc_back 0.0.0",
@@ -1780,7 +1780,7 @@ dependencies = [
  "bitflags 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "cc 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "flate2 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)",
- "jobserver 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)",
+ "jobserver 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)",
  "log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)",
  "num_cpus 1.6.2 (registry+https://github.com/rust-lang/crates.io-index)",
  "owning_ref 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)",
@@ -2560,7 +2560,7 @@ source = "registry+https://github.com/ru
 "checksum idna 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)" = "014b298351066f1512874135335d62a789ffe78a9974f94b43ed5621951eaf7d"
 "checksum ignore 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)" = "b3fcaf2365eb14b28ec7603c98c06cc531f19de9eb283d89a3dff8417c8c99f5"
 "checksum itoa 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)" = "8324a32baf01e2ae060e9de58ed0bc2320c9a2833491ee36cd3b4c414de4db8c"
-"checksum jobserver 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)" = "443ae8bc0af6c106e6e8b77e04684faecc1a5ce94e058f4c2b0a037b0ea1b133"
+"checksum jobserver 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)" = "565f6106bd87b394398f813bea4e5ecad6d6b0f6aa077592d088f882a506481d"
 "checksum jsonrpc-core 7.1.1 (registry+https://github.com/rust-lang/crates.io-index)" = "b1acd0f9934da94466d2370f36832b9b19271b4abdfdb5e69f0bcd991ebcd515"
 "checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)" = "7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d"
 "checksum kuchiki 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)" = "ef2ea4f2f7883cd7c6772b06c14abca01a2cc1f75c426cebffcf6b3b925ef9fc"
diff -ruNp rustc-1.22.1-src/src/vendor/jobserver/.cargo-checksum.json rustc-1.22.1-src-patched/src/vendor/jobserver/.cargo-checksum.json
--- rustc-1.22.1-src/src/vendor/jobserver/.cargo-checksum.json	2017-11-23 00:37:34.000000000 +0100
+++ rustc-1.22.1-src-patched/src/vendor/jobserver/.cargo-checksum.json	2018-02-01 10:11:22.540050688 +0100
@@ -1 +1 @@
-{"files":{".appveyor.yml":"f6cf18ef5dd546f75aee42523bab14ed619a3c6ac49fa403ce7a716ef125c52c",".cargo-ok":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",".gitignore":"1405b421de32d7744dd83162e9d640982ece71c6ccbd7ce2dc7df3d0b2c2c47d",".travis.yml":"31d3c1bfb1d3e6cb18b2360b923a02be52373f4a9232684648f07f9e27815b44","Cargo.toml":"ec0b1630fdaa99e55520513b365ffc7c566f73f7965882101f2c70972fe0bde6","LICENSE-APACHE":"a60eea817514531668d7e00765731449fe14d059d3249e0bc93b36de45f759f2","LICENSE-MIT":"378f5840b258e2779c39418f3f2d7b2ba96f1c7917dd6be0713f88305dbda397","README.md":"f48c83086ae750b2ce48d36affc987d4da7023afc18f746c7ca070d3d0bc1121","src/lib.rs":"c7499f24ae4ba15ac02f3aa441d66ff0fa45f145d6e9fb46fbfa771df97c0359","tests/client-of-myself.rs":"9ba7aba16b276050d791931c9610eec6f33c713fa80d514fa9223a33372e6f71","tests/client.rs":"0f0eecdca8df9e46b5811c5fef33ceddbcf742b9386d970955facb503bc9c8ee","tests/helper.rs":"583e4013e2033bd6cba56219998a86651c3cc24429b2ca27f55152b75de75bdb","tests/make-as-a-client.rs":"844ce6be72c72291c7077e06646b39731f30b025afac1cbc32b2c13a32a3f327","tests/server.rs":"197c5366cb47925fb05598fdc466d4c7512058a66ac0fdbb16df517d8812954f"},"package":"443ae8bc0af6c106e6e8b77e04684faecc1a5ce94e058f4c2b0a037b0ea1b133"}
\ No newline at end of file
+{"files":{".appveyor.yml":"f6cf18ef5dd546f75aee42523bab14ed619a3c6ac49fa403ce7a716ef125c52c",".cargo-ok":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",".gitignore":"1405b421de32d7744dd83162e9d640982ece71c6ccbd7ce2dc7df3d0b2c2c47d",".travis.yml":"31d3c1bfb1d3e6cb18b2360b923a02be52373f4a9232684648f07f9e27815b44","Cargo.toml":"baa8fd4c45f708c304b6e4404811ab39b6bb16ed3a274cc903d5aa31c1cf2bd6","Cargo.toml.orig":"10506cb83dd44e6541f47b020ed96dfa0f90f98519df843c4c6a36f29720bcfc","LICENSE-APACHE":"a60eea817514531668d7e00765731449fe14d059d3249e0bc93b36de45f759f2","LICENSE-MIT":"378f5840b258e2779c39418f3f2d7b2ba96f1c7917dd6be0713f88305dbda397","README.md":"93ed1c8273dbf0c8ba13129de83e38a0a680888db7a1382d388f3a8e24f27e09","src/lib.rs":"a05f62dc8a51eda25565b67329dde57bc040808187b76da0a176e995a2854d24","tests/client-of-myself.rs":"9ba7aba16b276050d791931c9610eec6f33c713fa80d514fa9223a33372e6f71","tests/client.rs":"0f0eecdca8df9e46b5811c5fef33ceddbcf742b9386d970955facb503bc9c8ee","tests/helper.rs":"583e4013e2033bd6cba56219998a86651c3cc24429b2ca27f55152b75de75bdb","tests/make-as-a-client.rs":"d833c1a57900af7c0560ce53948eddd79b492357be35f506e473e87af1a476f1","tests/server.rs":"197c5366cb47925fb05598fdc466d4c7512058a66ac0fdbb16df517d8812954f"},"package":"565f6106bd87b394398f813bea4e5ecad6d6b0f6aa077592d088f882a506481d"}
\ No newline at end of file
diff -ruNp rustc-1.22.1-src/src/vendor/jobserver/Cargo.toml rustc-1.22.1-src-patched/src/vendor/jobserver/Cargo.toml
--- rustc-1.22.1-src/src/vendor/jobserver/Cargo.toml	2017-11-23 00:37:34.000000000 +0100
+++ rustc-1.22.1-src-patched/src/vendor/jobserver/Cargo.toml	2018-02-01 10:11:22.540050688 +0100
@@ -1,32 +1,29 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g. crates.io) dependencies
+#
+# If you believe there's an error in this file please file an
+# issue against the rust-lang/cargo repository. If you're
+# editing this file be aware that the upstream Cargo.toml
+# will likely look very different (and much more reasonable)
+
 [package]
 name = "jobserver"
-version = "0.1.6"
+version = "0.1.9"
 authors = ["Alex Crichton <alex@alexcrichton.com>"]
-license = "MIT/Apache-2.0"
-repository = "https://github.com/alexcrichton/jobserver-rs"
+description = "An implementation of the GNU make jobserver for Rust\n"
 homepage = "https://github.com/alexcrichton/jobserver-rs"
 documentation = "https://docs.rs/jobserver"
-description = """
-An implementation of the GNU make jobserver for Rust
-"""
-
-[target.'cfg(unix)'.dependencies]
-libc = "0.2"
-
-[target.'cfg(windows)'.dependencies]
-rand = "0.3"
-
-[dev-dependencies]
-futures = "0.1"
-num_cpus = "1.0"
-tempdir = "0.3"
-tokio-core = "0.1"
-tokio-process = "0.1"
+license = "MIT/Apache-2.0"
+repository = "https://github.com/alexcrichton/jobserver-rs"
 
 [[test]]
 name = "client"
-harness = false
 path = "tests/client.rs"
+harness = false
 
 [[test]]
 name = "server"
@@ -45,3 +42,21 @@ harness = false
 [[test]]
 name = "helper"
 path = "tests/helper.rs"
+[dev-dependencies.futures]
+version = "0.1"
+
+[dev-dependencies.num_cpus]
+version = "1.0"
+
+[dev-dependencies.tempdir]
+version = "0.3"
+
+[dev-dependencies.tokio-core]
+version = "0.1"
+
+[dev-dependencies.tokio-process]
+version = "0.1"
+[target."cfg(unix)".dependencies.libc]
+version = "0.2"
+[target."cfg(windows)".dependencies.rand]
+version = "0.3"
diff -ruNp rustc-1.22.1-src/src/vendor/jobserver/Cargo.toml.orig rustc-1.22.1-src-patched/src/vendor/jobserver/Cargo.toml.orig
--- rustc-1.22.1-src/src/vendor/jobserver/Cargo.toml.orig	1970-01-01 01:00:00.000000000 +0100
+++ rustc-1.22.1-src-patched/src/vendor/jobserver/Cargo.toml.orig	2018-02-01 10:11:22.540050688 +0100
@@ -0,0 +1,47 @@
+[package]
+name = "jobserver"
+version = "0.1.9"
+authors = ["Alex Crichton <alex@alexcrichton.com>"]
+license = "MIT/Apache-2.0"
+repository = "https://github.com/alexcrichton/jobserver-rs"
+homepage = "https://github.com/alexcrichton/jobserver-rs"
+documentation = "https://docs.rs/jobserver"
+description = """
+An implementation of the GNU make jobserver for Rust
+"""
+
+[target.'cfg(unix)'.dependencies]
+libc = "0.2"
+
+[target.'cfg(windows)'.dependencies]
+rand = "0.3"
+
+[dev-dependencies]
+futures = "0.1"
+num_cpus = "1.0"
+tempdir = "0.3"
+tokio-core = "0.1"
+tokio-process = "0.1"
+
+[[test]]
+name = "client"
+harness = false
+path = "tests/client.rs"
+
+[[test]]
+name = "server"
+path = "tests/server.rs"
+
+[[test]]
+name = "client-of-myself"
+path = "tests/client-of-myself.rs"
+harness = false
+
+[[test]]
+name = "make-as-a-client"
+path = "tests/make-as-a-client.rs"
+harness = false
+
+[[test]]
+name = "helper"
+path = "tests/helper.rs"
diff -ruNp rustc-1.22.1-src/src/vendor/jobserver/README.md rustc-1.22.1-src-patched/src/vendor/jobserver/README.md
--- rustc-1.22.1-src/src/vendor/jobserver/README.md	2017-11-23 00:37:34.000000000 +0100
+++ rustc-1.22.1-src-patched/src/vendor/jobserver/README.md	2018-02-01 10:11:22.540050688 +0100
@@ -25,10 +25,17 @@ extern crate jobserver;
 
 # License
 
-`jobserver-rs` is primarily distributed under the terms of both the MIT
-license and the Apache License (Version 2.0), with portions covered by various
-BSD-like licenses.
+This project is licensed under either of
 
-See LICENSE-APACHE, and LICENSE-MIT for details.
+ * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or
+   http://www.apache.org/licenses/LICENSE-2.0)
+ * MIT license ([LICENSE-MIT](LICENSE-MIT) or
+   http://opensource.org/licenses/MIT)
 
+at your option.
 
+### Contribution
+
+Unless you explicitly state otherwise, any contribution intentionally submitted
+for inclusion in Serde by you, as defined in the Apache-2.0 license, shall be
+dual licensed as above, without any additional terms or conditions.
diff -ruNp rustc-1.22.1-src/src/vendor/jobserver/src/lib.rs rustc-1.22.1-src-patched/src/vendor/jobserver/src/lib.rs
--- rustc-1.22.1-src/src/vendor/jobserver/src/lib.rs	2017-11-23 00:37:34.000000000 +0100
+++ rustc-1.22.1-src-patched/src/vendor/jobserver/src/lib.rs	2018-02-01 10:11:22.540050688 +0100
@@ -391,7 +391,9 @@ mod imp {
     use std::os::unix::prelude::*;
     use std::process::Command;
     use std::ptr;
-    use std::sync::atomic::{AtomicBool, AtomicUsize, ATOMIC_USIZE_INIT, Ordering};
+    use std::sync::atomic::{AtomicBool, AtomicUsize,
+                            ATOMIC_BOOL_INIT, ATOMIC_USIZE_INIT,
+                            Ordering};
     use std::sync::mpsc::{self, Receiver, RecvTimeoutError};
     use std::sync::{Arc, Once, ONCE_INIT};
     use std::thread::{JoinHandle, Builder};
@@ -422,13 +424,21 @@ mod imp {
         }
 
         unsafe fn mk() -> io::Result<Client> {
+            static INVALID: AtomicBool = ATOMIC_BOOL_INIT;
             let mut pipes = [0; 2];
 
-            // Attempt atomically-create-with-cloexec if we can
-            if cfg!(target_os = "linux") {
+            // Attempt atomically-create-with-cloexec if we can.  Note that even
+            // when libc has the symbol, `pipe2` might still not be supported on
+            // the running kernel -> `ENOSYS`, then we need to use the fallback.
+            if cfg!(target_os = "linux") && !INVALID.load(Ordering::SeqCst) {
                 if let Some(pipe2) = pipe2() {
-                    cvt(pipe2(pipes.as_mut_ptr(), libc::O_CLOEXEC))?;
-                    return Ok(Client::from_fds(pipes[0], pipes[1]))
+                    match cvt(pipe2(pipes.as_mut_ptr(), libc::O_CLOEXEC)) {
+                        Ok(_) => return Ok(Client::from_fds(pipes[0], pipes[1])),
+                        Err(ref e) if e.raw_os_error() == Some(libc::ENOSYS) => {
+                            INVALID.store(true, Ordering::SeqCst);
+                        }
+                        Err(e) => return Err(e),
+                    }
                 }
             }
 
@@ -479,15 +489,56 @@ mod imp {
         }
 
         pub fn acquire(&self) -> io::Result<Acquired> {
-            let mut buf = [0];
-            match (&self.read).read(&mut buf)? {
-                1 => Ok(Acquired { byte: buf[0] }),
-                _ => Err(io::Error::new(io::ErrorKind::Other,
-                                        "early EOF on jobserver pipe")),
+            // We don't actually know if the file descriptor here is set in
+            // blocking or nonblocking mode. AFAIK all released versions of
+            // `make` use blocking fds for the jobserver, but the unreleased
+            // version of `make` doesn't. In the unreleased version jobserver
+            // fds are set to nonblocking and combined with `pselect`
+            // internally.
+            //
+            // Here we try to be compatible with both strategies. We
+            // unconditionally expect the file descriptor to be in nonblocking
+            // mode and if it happens to be in blocking mode then most of this
+            // won't end up actually being necessary!
+            //
+            // We use `poll` here to block this thread waiting for read
+            // readiness, and then afterwards we perform the `read` itself. If
+            // the `read` returns that it would block then we start over and try
+            // again.
+            //
+            // Also note that we explicitly don't handle EINTR here. That's used
+            // to shut us down, so we otherwise punt all errors upwards.
+            unsafe {
+                let mut fd: libc::pollfd = mem::zeroed();
+                fd.fd = self.read.as_raw_fd();
+                fd.events = libc::POLLIN;
+                loop {
+                    fd.revents = 0;
+                    if libc::poll(&mut fd, 1, -1) == -1 {
+                        return Err(io::Error::last_os_error())
+                    }
+                    if fd.revents == 0 {
+                        continue
+                    }
+                    let mut buf = [0];
+                    match (&self.read).read(&mut buf) {
+                        Ok(1) => return Ok(Acquired { byte: buf[0] }),
+                        Ok(_) => {
+                            return Err(io::Error::new(io::ErrorKind::Other,
+                                                      "early EOF on jobserver pipe"))
+                        }
+                        Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {}
+                        Err(e) => return Err(e),
+                    }
+                }
             }
         }
 
         pub fn release(&self, data: &Acquired) -> io::Result<()> {
+            // Note that the fd may be nonblocking but we're going to go ahead
+            // and assume that the writes here are always nonblocking (we can
+            // always quickly release a token). If that turns out to not be the
+            // case we'll get an error anyway!
             match (&self.write).write(&[data.byte])? {
                 1 => Ok(()),
                 _ => Err(io::Error::new(io::ErrorKind::Other,
diff -ruNp rustc-1.22.1-src/src/vendor/jobserver/tests/make-as-a-client.rs rustc-1.22.1-src-patched/src/vendor/jobserver/tests/make-as-a-client.rs
--- rustc-1.22.1-src/src/vendor/jobserver/tests/make-as-a-client.rs	2017-11-23 00:37:34.000000000 +0100
+++ rustc-1.22.1-src-patched/src/vendor/jobserver/tests/make-as-a-client.rs	2018-02-01 10:11:22.540050688 +0100
@@ -18,6 +18,19 @@ macro_rules! t {
 }
 
 fn main() {
+    if env::var("_DO_THE_TEST").is_ok() {
+        std::process::exit(
+            Command::new(env::var_os("MAKE").unwrap())
+                .env("MAKEFLAGS", env::var_os("CARGO_MAKEFLAGS").unwrap())
+                .env_remove("_DO_THE_TEST")
+                .args(&env::args_os().skip(1).collect::<Vec<_>>())
+                .status()
+                .unwrap()
+                .code()
+                .unwrap_or(1)
+        );
+    }
+
     if let Ok(s) = env::var("TEST_ADDR") {
         let mut contents = Vec::new();
         t!(t!(TcpStream::connect(&s)).read_to_end(&mut contents));
@@ -28,11 +41,15 @@ fn main() {
     let td = TempDir::new("foo").unwrap();
 
     let prog = env::var("MAKE").unwrap_or("make".to_string());
-    let mut cmd = Command::new(prog);
-    cmd.current_dir(td.path());
 
     let me = t!(env::current_exe());
     let me = me.to_str().unwrap();
+
+    let mut cmd = Command::new(&me);
+    cmd.current_dir(td.path());
+    cmd.env("MAKE", prog);
+    cmd.env("_DO_THE_TEST", "1");
+
     t!(t!(File::create(td.path().join("Makefile"))).write_all(format!("\
 all: foo bar
 foo:
@@ -58,4 +75,3 @@ bar:
 
     assert!(t!(child.wait()).success());
 }
-
