#!/usr/bin/env nix-shell
#!nix-shell -i bash -E "with import <nixpkgs> {}; runCommandWith { name = \"shell\"; inherit (swiftPackages) stdenv; derivationArgs = { buildInputs = [ gawk gnused nix-prefetch-github jq swift swiftpm swiftpm2nix ]; }; } \"\""

set -euo pipefail

cd "$(dirname "$0")"

currentVersion="$(gawk -F'"' '/version = ".*"/ { print $2 }' ./sources.nix)"
if [[ -z "$currentVersion" ]]; then
    echo >&2 "Could not determine current Swift version from sources.nix"
    exit 1
fi

latestTag="$(curl -fsSL https://api.github.com/repos/apple/swift/releases/latest | jq -r '.tag_name')"
latestVersion="$(expr $latestTag : 'swift-\(.*\)-RELEASE')"
if [[ -z "$latestVersion" ]]; then
    echo >&2 "Could not determine latest Swift version from GitHub releases"
    exit 1
fi

if [[ "$currentVersion" == "$latestVersion" ]]; then
    echo >&2 "Swift is up-to-date: ${currentVersion}"
    exit 0
fi

echo >&2 "Updating Swift: $currentVersion -> $latestVersion"

# Update sources.nix

releaseBranch="release/$(cut -d. -f 1-2 <<< "$latestVersion")"
checkoutConfig="$(curl -fsSL "https://raw.githubusercontent.com/apple/swift/$latestTag/utils/update_checkout/update-checkout-config.json")"
repos="$(jq '.repos | map_values(.remote.id | split("/"))' <<< "$checkoutConfig")"
alternateRevs="$(
    jq --arg branch "$releaseBranch" \
        '.["branch-schemes"][$branch] | .aliases as $aliases | .repos | map_values(select(IN($aliases[]) | not))' \
        <<< "$checkoutConfig"
)"

newSourcesNix="$(mktemp)"
cat >> "$newSourcesNix" << EOF
# DO NOT EDIT. This file is generated by update.sh
{ fetchFromGitHub }: {

  version = "$latestVersion";

EOF

for name in $(jq -r 'keys | .[]' <<< "$repos"); do
    echo >&2 "Prefetching $name..."

    mapfile -t repo < <(jq -r --arg name "$name" '.[$name][]' <<< "$repos")
    rev="$(jq -r --arg name "$name" --arg latestTag "$latestTag" '.[$name] // $latestTag' <<< "$alternateRevs")"

    nix-prefetch-github --nix --rev "$rev" "${repo[0]}" "${repo[1]}" \
        | tail -n +4 \
        | sed -e "s/^  pkgs.fetch/  $name = fetch/" -e 's/}/};/g' \
        >> "$newSourcesNix"
done

echo "}" >> "$newSourcesNix"
mv "$newSourcesNix" ./sources.nix

# Update swiftpm2nix generated expressions

work="$(mktemp -d)"
clean_up() {
  rm -rf "$work"
}
trap clean_up EXIT

for generated in */generated; do
    package="$(dirname "$generated")"
    src="$(nix build --no-link --print-out-paths -f ../../../.. "swiftPackages.$package.src")"

    cp -R "$src" "$work/$package"
    chmod -R u+w "$work"
    pushd "$work/$package" > /dev/null

    echo >&2 "Running swiftpm on $package"
    swift package resolve

    echo >&2 "Running swiftpm2nix on $package"
    swiftpm2nix

    popd > /dev/null
    rm -fr "$generated"
    cp -R "$work/$package/nix" "$generated"
done
