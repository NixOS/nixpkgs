# This file was auto-generated by cabal2nix. Please do NOT edit manually!

{ cabal, aeson, alex, ansiTerminal, base64Bytestring, binary
, blazeHtml, blazeMarkup, dataDefault, deepseqGenerics, Diff
, executablePath, extensibleExceptions, filepath, haddockLibrary
, happy, highlightingKate, hslua, HTTP, httpClient, httpClientTls
, httpTypes, HUnit, JuicyPixels, mtl, network, pandocTypes, parsec
, QuickCheck, random, scientific, SHA, syb, tagsoup, temporary
, testFramework, testFrameworkHunit, testFrameworkQuickcheck2
, texmath, text, time, unorderedContainers, vector, xml, yaml
, zipArchive, zlib
}:

cabal.mkDerivation (self: {
  pname = "pandoc";
  version = "1.13";
  sha256 = "09zmh7yvasxybcr4rnnqf9bx8njhi8hwgzsik6db691j5j5yxg6l";
  isLibrary = true;
  isExecutable = true;
  buildDepends = [
    aeson alex base64Bytestring binary blazeHtml blazeMarkup
    dataDefault deepseqGenerics extensibleExceptions filepath
    haddockLibrary happy highlightingKate hslua HTTP httpClient
    httpClientTls httpTypes JuicyPixels mtl network pandocTypes parsec
    random scientific SHA syb tagsoup temporary texmath text time
    unorderedContainers vector xml yaml zipArchive zlib
  ];
  testDepends = [
    ansiTerminal Diff executablePath filepath highlightingKate HUnit
    pandocTypes QuickCheck syb testFramework testFrameworkHunit
    testFrameworkQuickcheck2 text zipArchive
  ];
  jailbreak = true;
  doCheck = false;
  meta = {
    homepage = "http://johnmacfarlane.net/pandoc";
    description = "Conversion between markup formats";
    license = "GPL";
    platforms = self.ghc.meta.platforms;
    maintainers = with self.stdenv.lib.maintainers; [ simons ];
  };
})
