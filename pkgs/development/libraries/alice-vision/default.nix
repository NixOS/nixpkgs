{ lib
, stdenv
, fetchFromGitHub
, cmake
, pkg-config

, alembic
, assimp
, boost
, ceres-solver
, clp
, cctag
, eigen
, flann
, geogram
, lemon-graph
, nanoflann
, opencv
, openexr
, openimageio
, zlib
}:

stdenv.mkDerivation rec {
  pname = "alice-vision";
  version = "unstable-2023-02-07";

  outputs = [ "lib" "dev" "out" ];

  src = fetchFromGitHub {
    owner = "alicevision";
    repo = "AliceVision";
    rev = "ad8f3c2b6b32fa64153d98f6d293219011086b1d";
    hash = "sha256-iCN7mvlLlKn0Ub0jhgvk6nxXbMo6VcMZD4EWy3xu50o=";
  };

  # Instead of using dependencies from Git submodules, we use Nix packages
  # This speeds up fetching and reduces the source archive size
  #
  # Upstream uses patched Clp/Osi/CoinUtils containing CMake build scripts.
  # Instead of the patched versions, we re-use our packages and add CMake
  # find modules that use the pkg-config files already generated by those
  # dependencies.
  postPatch =
    let
      findModules = [
        ./FindClp.cmake
        ./FindOsi.cmake
        ./FindCoinUtils.cmake
      ];
    in
    ''
      rmdir src/dependencies/nanoflann
      ln -s ${nanoflann} src/dependencies/nanoflann

      mkdir modules
      cp ${./FindClp.cmake} modules/FindClp.cmake
      cp ${./FindOsi.cmake} modules/FindOsi.cmake
      cp ${./FindCoinUtils.cmake} modules/FindCoinUtils.cmake

      substituteInPlace src/CMakeLists.txt \
        --replace 'cmake_minimum_required(VERSION 3.11)' 'cmake_minimum_required(VERSION 3.11)''\nlist(PREPEND CMAKE_MODULE_PATH ''${CMAKE_CURRENT_SOURCE_DIR}/../modules)' \
    '';

  patches = [
    # Don't optimize for the host processor (could lead to reproducibility issues)
    ./cmake-disable-optimize-for-architecture.patch
  ];

  cmakeFlags = [
    # Disable most binaries - most of them don't build due to compile errors
    "-DALICEVISION_BUILD_DOC=OFF"
    "-DALICEVISION_BUILD_TESTS=OFF"
    "-DALICEVISION_BUILD_EXAMPLES=OFF"
    "-DALICEVISION_BUILD_SOFTWARE=OFF"

    "-DALICEVISION_USE_OPENCV=ON"
    "-DALICEVISION_USE_OPENCV_CONTRIB=ON"
    "-DALICEVISION_USE_CCTAG=ON"
    # Could be enabled, but does not compile as of v2.4.0 (upstream bug)
    # "-DALICEVISION_USE_OCVSIFT=ON"
    "-DALICEVISION_USE_ALEMBIC=ON"

    "-DALICEVISION_USE_UNCERTAINTYTE=OFF"
    "-DALICEVISION_USE_APRILTAG=OFF"
    "-DALICEVISION_USE_CUDA=OFF"
    "-DALICEVISION_USE_MESHSDFILTER=OFF"
    "-DALICEVISION_USE_POPSIFT=OFF"
    "-DALICEVISION_USE_OPENGV=OFF"

    "-DALICEVISION_REQUIRE_CERES_WITH_SUITESPARSE=ON"

    # Note: Don't explicitly set ALICEVISION_USE_INTERNAL_FLANN or ALICEVISION_USE_INTERNAL_LEMON
    # to OFF, as that will cause the opposite effect since the CMake script only checks whether these
    # variables are defined (instead of picking up their value).

    "-DFLANN_INCLUDE_DIR_HINTS=${flann}"
    "-DLEMON_INCLUDE_DIR_HINTS=${lemon-graph}"
  ];

  # Remove third-party dependency headers
  postInstall = ''
    mv $out/share $dev
    mv $out/include/aliceVision/* $dev/include/aliceVision
    mv $out/include/aliceVision_dependencies $dev/include
    rmdir $out/include/aliceVision
    rmdir $out/include
  '';

  nativeBuildInputs = [
    cmake
    pkg-config
  ];

  buildInputs = [
    assimp
    eigen
    flann
    geogram
    lemon-graph
    nanoflann
    openexr
  ];

  propagatedBuildInputs = [
    alembic
    boost
    cctag
    ceres-solver
    clp
    opencv
    openimageio
    zlib
  ];

  meta = with lib; {
    description = "Photogrammetric Computer Vision Framework which provides a 3D Reconstruction and Camera Tracking algorithms";
    homepage = "https://alicevision.org";
    downloadPage = "https://github.com/alicevision/AliceVision";
    license = with licenses; [ mpl20 mit ];
    maintainers = with maintainers; [ tmarkus ];
  };
}

