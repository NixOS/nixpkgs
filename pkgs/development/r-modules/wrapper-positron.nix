{
  R,
  positron,
  gnused,
  lib,
  makeWrapper,
  packages,
  recommendedPackages,
  pythonEnv,
  runCommand,
  stdenv,
}:

runCommand (positron.name + "-wrapper")
  {
    preferLocalBuild = true;
    allowSubstitutes = false;

    nativeBuildInputs = [ makeWrapper ];
    dontWrapQtApps = true;

    buildInputs =
      [
        R
        positron
      ]
      ++ recommendedPackages
      ++ packages;

    # NOTE: see wrapper-rstudio.nix for an explanation.
    fixLibsR = "fix_libs.R";
  }
  ''
    mkdir -p $out $out/bin
    echo "# Autogenerated by wrapper-rstudio.nix from R_LIBS_SITE" > $out/$fixLibsR
    echo -n ".libPaths(c(.libPaths(), \"" >> $out/$fixLibsR
    echo -n $R_LIBS_SITE | sed -e 's/:/", "/g' >> $out/$fixLibsR
    echo -n "\"))" >> $out/$fixLibsR
    echo >> $out/$fixLibsR

    ${lib.optionalString stdenv.hostPlatform.isLinux ''
      # symlink files from unwrapped rstudio so that the desktop file and the icons
      # are also installed when using the wrapped version
      # TODO: figure out how to handle darwin .app structures
      ln -s ${positron}/share $out
    ''}

    cd ${R}/bin
    for exe in *; do
      makeWrapper "${R}/bin/$exe" "$out/bin/$exe" \
        --prefix "R_LIBS_SITE" ":" "$R_LIBS_SITE"

      # Positron finds valid R installations by looking for these two patterns.
      ${gnused}/bin/sed -i '2i# Shell wrapper for R executable' $out/bin/$exe
      ${gnused}/bin/sed -i "3iR_HOME_DIR=${R}/lib/R" $out/bin/$exe
    done

    # Using a symlink rather than adding pythonEnv to PATH in order to reduce
    # the number of duplicate interpreters positron finds.
    ln -s ${lib.getExe pythonEnv} $out/bin/python

    makeWrapper ${positron}/share/positron/positron $out/bin/positron \
      --prefix "PATH" ":" "${lib.getBin R}/bin" \
      --set R_PROFILE_USER $out/$fixLibsR
  ''
