diff --git a/build/tools/make_standalone_toolchain.py b/build/tools/make_standalone_toolchain.py
index daba3351..424b7fef 100755
--- a/build/tools/make_standalone_toolchain.py
+++ b/build/tools/make_standalone_toolchain.py
@@ -421,7 +421,9 @@ def create_toolchain(install_path, arch, api, gcc_path, clang_path,
                      platforms_path, stl, host_tag):
     """Create a standalone toolchain."""
     copy_directory_contents(gcc_path, install_path)
+    os.system('chmod -R +w "{}"'.format(install_path))
     copy_directory_contents(clang_path, install_path)
+    os.system('chmod -R +w "{}"'.format(install_path))
     triple = get_triple(arch)
     make_clang_scripts(
         install_path, triple, api, host_tag.startswith('windows'))
@@ -432,9 +434,11 @@ def create_toolchain(install_path, arch, api, gcc_path, clang_path,
     install_headers = os.path.join(install_sysroot, 'usr/include')
     os.makedirs(os.path.dirname(install_headers))
     shutil.copytree(headers, install_headers)
+    os.system('chmod -R +w "{}"'.format(install_path))
 
     arch_headers = os.path.join(sysroot, 'usr/include', triple)
     copy_directory_contents(arch_headers, os.path.join(install_headers))
+    os.system('chmod -R +w "{}"'.format(install_path))
 
     for lib_suffix in ('', '64'):
         lib_path = os.path.join(platforms_path, 'usr/lib{}'.format(lib_suffix))
@@ -442,20 +446,24 @@ def create_toolchain(install_path, arch, api, gcc_path, clang_path,
             install_sysroot, 'usr/lib{}'.format(lib_suffix))
         if os.path.exists(lib_path):
             shutil.copytree(lib_path, lib_install)
+            os.system('chmod -R +w "{}"'.format(install_path))
 
     static_lib_path = os.path.join(sysroot, 'usr/lib', triple)
     static_lib_install = os.path.join(install_sysroot, 'usr/lib')
     if arch == 'x86_64':
         static_lib_install += '64'
     copy_directory_contents(static_lib_path, static_lib_install)
+    os.system('chmod -R +w "{}"'.format(install_path))
 
     prebuilt_path = os.path.join(NDK_DIR, 'prebuilt', host_tag)
     copy_directory_contents(prebuilt_path, install_path)
+    os.system('chmod -R +w "{}"'.format(install_path))
 
     gdbserver_path = os.path.join(
         NDK_DIR, 'prebuilt', 'android-' + arch, 'gdbserver')
     gdbserver_install = os.path.join(install_path, 'share', 'gdbserver')
     shutil.copytree(gdbserver_path, gdbserver_install)
+    os.system('chmod -R +w "{}"'.format(install_path))
 
     toolchain_lib_dir = os.path.join(gcc_path, 'lib/gcc', triple)
     dirs = os.listdir(toolchain_lib_dir)
@@ -481,26 +489,33 @@ def create_toolchain(install_path, arch, api, gcc_path, clang_path,
         for abi in get_abis(arch):
             copy_gnustl_abi_headers(gnustl_dir, install_path, gcc_ver, triple,
                                     abi)
+            os.system('chmod -R +w "{}"'.format(install_path))
             copy_gnustl_libs(gnustl_dir, install_path, triple, abi)
+            os.system('chmod -R +w "{}"'.format(install_path))
             if arch == 'arm':
                 copy_gnustl_abi_headers(gnustl_dir, install_path, gcc_ver,
                                         triple, abi, thumb=True)
+                os.system('chmod -R +w "{}"'.format(install_path))
                 copy_gnustl_libs(gnustl_dir, install_path, triple, abi,
                                  thumb=True)
+                os.system('chmod -R +w "{}"'.format(install_path))
     elif stl == 'libc++':
         libcxx_dir = os.path.join(NDK_DIR, 'sources/cxx-stl/llvm-libc++')
         libcxxabi_dir = os.path.join(NDK_DIR, 'sources/cxx-stl/llvm-libc++abi')
         copy_directory_contents(os.path.join(libcxx_dir, 'include'),
                                 cxx_headers)
+        os.system('chmod -R +w "{}"'.format(install_path))
         if api < 21:
             support_dir = os.path.join(NDK_DIR, 'sources/android/support')
             copy_directory_contents(os.path.join(support_dir, 'include'),
                                     support_headers)
+            os.system('chmod -R +w "{}"'.format(install_path))
 
         # I have no idea why we need this, but the old one does it too.
         copy_directory_contents(
             os.path.join(libcxxabi_dir, 'include'),
             os.path.join(install_path, 'include/llvm-libc++abi/include'))
+        os.system('chmod -R +w "{}"'.format(install_path))
 
         headers = [
             'cxxabi.h',
@@ -515,21 +530,25 @@ def create_toolchain(install_path, arch, api, gcc_path, clang_path,
             src_libdir = get_src_libdir(libcxx_dir, abi)
             dest_libdir = get_dest_libdir(install_path, triple, abi)
             copy_libcxx_libs(src_libdir, dest_libdir, abi, api)
+            os.system('chmod -R +w "{}"'.format(install_path))
             if arch == 'arm':
                 thumb_libdir = os.path.join(dest_libdir, 'thumb')
                 copy_libcxx_libs(src_libdir, thumb_libdir, abi, api)
+                os.system('chmod -R +w "{}"'.format(install_path))
     elif stl == 'stlport':
         stlport_dir = os.path.join(NDK_DIR, 'sources/cxx-stl/stlport')
         gabixx_dir = os.path.join(NDK_DIR, 'sources/cxx-stl/gabi++')
 
         copy_directory_contents(
             os.path.join(stlport_dir, 'stlport'), cxx_headers)
+        os.system('chmod -R +w "{}"'.format(install_path))
 
         # Same as for libc++. Not sure why we have this extra directory, but
         # keep the cruft for diff.
         copy_directory_contents(
             os.path.join(gabixx_dir, 'include'),
             os.path.join(install_path, 'include/gabi++/include'))
+        os.system('chmod -R +w "{}"'.format(install_path))
 
         headers = [
             'cxxabi.h',
@@ -548,6 +567,7 @@ def create_toolchain(install_path, arch, api, gcc_path, clang_path,
             if arch == 'arm':
                 copy_stlport_libs(stlport_dir, install_path, triple, abi,
                                   thumb=True)
+                os.system('chmod -R +w "{}"'.format(install_path))
     else:
         raise ValueError(stl)
 
