(defpackage org.lispbuilds.nix/database/sqlite
  (:use :cl)
  (:import-from :str)
  (:import-from :sqlite)
  (:import-from :alexandria :read-file-into-string)
  (:import-from :arrow-macros :->>)
  (:import-from
   :org.lispbuilds.nix/util
   :replace-regexes)
  (:import-from
   :org.lispbuilds.nix/nix
   :nix-eval
   :system-master
   :nixify-symbol
   :make-pname
   :*nix-attrs-depth*)
  (:import-from
   :org.lispbuilds.nix/api
   :database->nix-expression)
  (:export :sqlite-database :init-db)
  (:local-nicknames
   (:json :com.inuoe.jzon)))

(in-package org.lispbuilds.nix/database/sqlite)

(defclass sqlite-database ()
  ((url :initarg :url
        :reader database-url
        :initform (error "url required"))
   (init-file :initarg :init-file
              :reader init-file
              :initform (error "init file required"))))

(defun init-db (db init-file)
  (let ((statements (->> (read-file-into-string init-file)
                         (replace-regexes '(".*--.*") '(""))
                         (substitute #\Space #\Newline)
                         (str:collapse-whitespaces)
                         (str:split #\;)
                         (mapcar #'str:trim)
                         (remove-if #'str:emptyp))))
    (sqlite:with-transaction db
      (dolist (s statements)
        (sqlite:execute-non-query db s)))))


;; Writing Nix

;; The '\"'\"'\" below is painful: it’s a single quote followed by a double
;; quote, so '", but with shell escaping and lisp string literal escaping.
(defparameter prelude "
# This file was auto-generated by nix-quicklisp.lisp

{ runCommand, fetchzip, pkgs, ... }:

# Ensures that every non-slashy `system` exists in a unique .asd file, without
# any other defsystems in it.  That is the convention, but some packages define
# multiple systems in one file.
#
# E.g.: in the cl-async source, the file cl-async.asd defines multiple systems:
#
# - CL-ASYNC-BASE
# - CL-ASYNC-UTIL
# - CL-ASYNC
#
# This is required because we're building and loading a system by a specific
# name. That name lives in ‘system’. When the name of the .asd file (passed in
# ‘asd’) doesn’t match, ASDF can’t find it without building and loading the
# ‘asd’ named system, first.
#
let
  createAsd = { url, sha256, asd, system }:
    let
      src = fetchzip { inherit url sha256; };
    in
      # This insane awk script strips out any defsystem that is not for this
      # specific system.
      #
      # Possible areas of improvement, to fix if any problems arise:
      #
      # - case insensitivity
      # - match aliases for ASDF, e.g. (asdf/parse-defsystem:defsystem
      #
      # While the lisp reader would be a more elegant solution to this problem,
      # it can’t be used because some packages define reader macros in their
      # defsystems, e.g. Alexandria. Those can’t be portably read.
      runCommand \"source\" {} ''
        mkdir -pv $out
        cp -r ${src}/* $out
        find $out -name \"${asd}.asd\" | while read f; do
          temp=\"$(mktemp)\"
          mv -f \"$f\" \"$temp\"
          awk '
            (/^$/ || /^[^ \\t]/) {
              f=0
            }
            (!/^\\(asdf:defsystem [#:'\"'\"'\"]*${system}\"?$/ &&
             /^\\(asdf:defsystem/) {
              f=1
            }

            !f {
              print $0
            }' \"$temp\" > \"$(dirname $f)/${system}.asd\"
          rm -f \"$temp\"
        done
      '';

getAttr = builtins.getAttr;

in {")

(defmethod database->nix-expression ((database sqlite-database) outfile)
  (sqlite:with-open-database (db (database-url database))
    (with-open-file (f outfile
                       :direction :output
                       :if-exists :supersede)

      ;; Fix known problematic packages before dumping the nix file.
      (sqlite:execute-non-query db
       "create temp table fixed_systems as select * from system_view")

      (sqlite:execute-non-query db
       "alter table fixed_systems add column systems")

      (sqlite:execute-non-query db
       "update fixed_systems set systems = json_array(name)")

      (sqlite:execute-non-query db
       "alter table fixed_systems add column asds")

      (sqlite:execute-non-query db
       "update fixed_systems set asds = json_array(name)")

      (format f prelude)

      (dolist (p (sqlite:execute-to-list db "select * from fixed_systems"))
        (destructuring-bind (name version asd url sha256 deps systems asds) p
          (format f "~%  ")
          (let ((*nix-attrs-depth* 1))
            (format
             f
             "~a = ~a;"
             (nix-eval `(:symbol ,name))
             (nix-eval
              `(:attrs
                ("pname" (:string ,(make-pname name)))
                ("version" (:string ,version))
                ("asds" (:list
                         ,@(mapcar (lambda (asd)
                                     `(:string ,(system-master asd)))
                                   (coerce (json:parse asds) 'list))))
                ("src" (:funcall
                        "createAsd"
                        (:attrs
                         ("url" (:string ,url))
                         ("sha256" (:string ,sha256))
                         ("system" (:string ,(system-master name)))
                         ("asd" (:string ,asd)))))
                ("systems" (:list
                            ,@(mapcar (lambda (sys)
                                        `(:string ,sys))
                                      (coerce (json:parse systems) 'list))))
                ("lispLibs" (:list
                             ,@(mapcar (lambda (dep)
                                         `(:funcall
                                           "getAttr"
                                           (:string ,(nixify-symbol dep))
                                           (:symbol "pkgs")))
                                       (remove "asdf"
                                               (str:split-omit-nulls #\, deps)
                                               :test #'string=))))
                ,@(when (find #\/ name)
                    '(("meta" (:attrs ("broken" (:symbol "true"))))))))))))
      (format f "~%}~%"))))
