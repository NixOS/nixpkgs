diff --git a/cpp/ycm/CMakeLists.txt b/cpp/ycm/CMakeLists.txt
index 2074c58e..9ecd6e57 100644
--- a/cpp/ycm/CMakeLists.txt
+++ b/cpp/ycm/CMakeLists.txt
@@ -335,7 +335,7 @@
       COMMAND ${CMAKE_COMMAND} -E copy "${LIBCLANG_TARGET}" "$<TARGET_FILE_DIR:${PROJECT_NAME}>"
     )
 
-    if( APPLE )
+  #if( APPLE )
       # In OS X El Capitan, Apple introduced System Integrity Protection.
       # Amongst other things, this introduces features to the dynamic loader
       # (dyld) which cause it to "sanitise" (and complain about) embedded
@@ -354,15 +354,15 @@
       # simply strip the rpath entry from the dylib.  There's no way any
       # @executable_path that python might have could be in any way useful to
       # libclang.dylib, so this seems perfectly safe.
-      get_filename_component( LIBCLANG_TAIL ${LIBCLANG_TARGET} NAME )
-      add_custom_command( TARGET ${PROJECT_NAME}
-                          POST_BUILD
-                          COMMAND install_name_tool
-                          "-delete_rpath"
-                          "@executable_path/../lib"
-                          "$<TARGET_FILE_DIR:${PROJECT_NAME}>/${LIBCLANG_TAIL}"
-                        )
-    endif()
+      #    get_filename_component( LIBCLANG_TAIL ${LIBCLANG_TARGET} NAME )
+      #add_custom_command( TARGET ${PROJECT_NAME}
+      #                    POST_BUILD
+      #                    COMMAND install_name_tool
+      #                    "-delete_rpath"
+      #                    "@executable_path/../lib"
+      #                    "$<TARGET_FILE_DIR:${PROJECT_NAME}>/${LIBCLANG_TAIL}"
+      #                  )
+      # endif()
   endif()
 endif()
