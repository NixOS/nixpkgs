{ lib
, stdenv
, fetchFromGitHub
, dpkg
, dotnet-sdk
, buildDotnetModule
, dotnetCorePackages
, xorg
, libICE
, libSM
, fontconfig
, libsecret
, git
, git-credential-manager
, mkShell
}:

buildDotnetModule rec {
  pname = "git-credential-manager";
  version = "2.0.785";

  src = fetchFromGitHub {
    owner = "GitCredentialManager";
    repo = "git-credential-manager";
    rev = "v2.0.785";
    sha256 = "djJXs3sy9cfJXPV6kmPP8fqqmiDvVLHCLPgZdV9Mvmw=";
  };

  projectFile = [
    # Main program
    "./src/shared/Git-Credential-Manager"
    # Helpers for various services
    "./src/shared/Atlassian.Bitbucket.UI.Avalonia"
    "./src/shared/GitHub.UI.Avalonia"
    "./src/shared/GitLab.UI.Avalonia"
  ];

  executables = [ "git-credential-manager-core" ];

  # This deps.nix can be generated by running
  #     nix-build -A git-credential-manager.passthru.fetch-deps | bash
  # and copying the resulting file to 'deps.nix'
  nugetDeps = ./deps.nix;

  runtimeDeps = [
    # Avalonia dependencies
    xorg.libX11
    libICE
    libSM
    fontconfig

    # GCM native dependencies
    libsecret
  ];

  buildInputs = [ git ];

  dotnet-sdk = dotnetCorePackages.sdk_6_0;
  dotnetFlags = [ "--runtime linux-x64" ];
  dotnetInstallFlags = [ "--framework net6.0" ];

  # For some reason, Avalonia **really** wants to probe a bunch of names for
  # libSkiaSharp. Moreover, the .so files installed directly by .NET are not
  # properly loaded and need to manually be added to the LD_LIBRARY_PATH.
  postFixup = ''
    ln -s $out/lib/git-credential-manager/libSkiaSharp.so \
      $out/lib/git-credential-manager/liblibSkiaSharp.so
    ln -s $out/lib/git-credential-manager/libSkiaSharp.so \
      $out/lib/git-credential-manager/liblibSkiaSharp
    ln -s $out/lib/git-credential-manager/libSkiaSharp.so \
      $out/lib/git-credential-manager/libSkiaSharp

    mkdir -p $out/bin/unpatched
    for executable in $out/bin/*; do
      if [ "$(basename $executable)" != unpatched ]; then
        mv $executable $out/bin/unpatched
        makeWrapper $out/bin/unpatched/$(basename $executable) $executable \
          --suffix LD_LIBRARY_PATH : $out/lib/git-credential-manager
      fi
    done
  '';

  meta = with lib; {
    homepage = "https://github.com/GitCredentialManager/git-credential-manager";
    description = "Secure, cross-platform Git credential storage with authentication to GitHub, Azure Repos, and other popular Git hosting services";
    longDescription = ''
      Git Credential Manager (GCM) is a secure Git credential helper built on .NET that runs on Windows, macOS, and Linux.

      Compared to Git's built-in credential helpers (Windows: wincred, macOS: osxkeychain, Linux: gnome-keyring/libsecret) which provides single-factor authentication support working on any HTTP-enabled Git repository, GCM provides multi-factor authentication support for Azure DevOps, Azure DevOps Server (formerly Team Foundation Server), GitHub, Bitbucket, and GitLab.
    '';
    sourceProvenance = with sourceTypes; [ binaryBytecode ];
    license = licenses.mit;
    platforms = [ "x86_64-linux" ];
    mainProgram = "git-credential-manager-core";
  };

  passthru.tests = {
    diagnose = mkShell {
      packages = [ git-credential-manager git ];
      shellHook = ''
        ${git-credential-manager}/bin/git-credential-manager-core diagnose
        if [ $? -eq 0 ]; then
          exit 1;
        fi
        touch $out
      '';
    };

    version = mkShell {
      packages = [ git-credential-manager git ];
      shellHook = ''
        mkdir -p $out
        ${git-credential-manager}/bin/git-credential-manager-core --version > $out/version
        grep -Fxq "${version}" $out/version
      '';
    };
  };
}
