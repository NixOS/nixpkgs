diff --git a/lib/app/configuration/command_configuration.ml b/lib/app/configuration/command_configuration.ml
index 8b09a4b..fd083cc 100644
--- a/lib/app/configuration/command_configuration.ml
+++ b/lib/app/configuration/command_configuration.ml
@@ -1,6 +1,6 @@
 open Core
 open Camlzip
-open Polymorphic_compare
+open Poly
 open Comby_kernel
 
 let debug = Sys.getenv "DEBUG_COMBY" |> Option.is_some
@@ -12,18 +12,18 @@ type 'a next =
 
 let fold_directory ?(sorted = false) root ~init ~f =
   let rec aux acc absolute_path depth =
-    if Sys.is_file absolute_path = `Yes then (
+    if Sys_unix.is_file absolute_path = `Yes then (
       match f acc ~depth ~absolute_path ~is_file:true with
       | Continue acc | Skip acc -> acc)
-    else if Sys.is_directory absolute_path = `Yes then (
+    else if Sys_unix.is_directory absolute_path = `Yes then (
       match f acc ~depth ~absolute_path ~is_file:false with
       | Skip acc -> acc
       | Continue acc ->
         let dir_contents =
           if Option.is_some (Sys.getenv "COMBY_TEST") || sorted then
-            Sys.ls_dir absolute_path |> List.sort ~compare:String.compare |> List.rev
+            Sys_unix.ls_dir absolute_path |> List.sort ~compare:String.compare |> List.rev
           else
-            Sys.ls_dir absolute_path
+            Sys_unix.ls_dir absolute_path
         in
         List.fold dir_contents ~init:acc ~f:(fun acc subdir ->
           aux acc (Filename.concat absolute_path subdir) (depth + 1)))
@@ -44,7 +44,7 @@ let parse_source_directories
   let exact_file_paths, file_patterns =
     List.partition_map file_filters ~f:(fun path ->
       let is_exact path =
-        (String.contains path '/' && Sys.is_file path = `Yes) || Sys.is_file ("." ^/ path) = `Yes
+        (String.contains path '/' && Sys_unix.is_file path = `Yes) || Sys_unix.is_file ("." ^/ path) = `Yes
         (* See if it matches something in the current directory *)
       in
       if is_exact path then Either.First path else Either.Second path)
@@ -161,8 +161,8 @@ let parse_templates ?metasyntax ?(warn_for_missing_file_in_dir = false) paths =
   let f acc ~depth:_ ~absolute_path ~is_file =
     let is_leaf_directory absolute_path =
       (not is_file)
-      && Sys.ls_dir absolute_path
-         |> List.for_all ~f:(fun path -> Sys.is_directory (absolute_path ^/ path) = `No)
+      && Sys_unix.ls_dir absolute_path
+         |> List.for_all ~f:(fun path -> Sys_unix.is_directory (absolute_path ^/ path) = `No)
     in
     if is_leaf_directory absolute_path then (
       match parse_directory absolute_path with
@@ -172,7 +172,7 @@ let parse_templates ?metasyntax ?(warn_for_missing_file_in_dir = false) paths =
       Continue acc
   in
   List.concat_map paths ~f:(fun path ->
-    if Sys.is_directory path = `Yes then
+    if Sys_unix.is_directory path = `Yes then
       fold_directory path ~sorted:true ~init:[] ~f
     else
       parse_toml ?metasyntax path)
@@ -412,7 +412,7 @@ let parse_metasyntax metasyntax_path =
   match metasyntax_path with
   | None -> Matchers.Metasyntax.default_metasyntax
   | Some metasyntax_path ->
-    (match Sys.file_exists metasyntax_path with
+    (match Sys_unix.file_exists metasyntax_path with
      | `No | `Unknown ->
        Format.eprintf "Could not open file: %s@." metasyntax_path;
        exit 1
@@ -463,14 +463,14 @@ let emit_errors { input_options; output_options; _ } =
     ; ( Option.is_some input_options.directory_depth
         && Option.value_exn input_options.directory_depth < 0
       , "-depth must be 0 or greater." )
-    ; ( Sys.is_directory input_options.target_directory = `No
+    ; ( Sys_unix.is_directory input_options.target_directory = `No
       , "Directory specified with -d or -directory is not a directory." )
     ; ( output_options.json_only_diff && not output_options.json_lines
       , "-json-only-diff can only be supplied with -json-lines." )
     ; ( Option.is_some output_options.chunk_matches && Option.is_some input_options.zip_file
       , "chunk-matches output format is not supported for zip files." )
     ; ( Option.is_some output_options.interactive_review
-        && not (String.equal input_options.target_directory (Sys.getcwd ()))
+        && not (String.equal input_options.target_directory (Sys_unix.getcwd ()))
       , "Please remove the -d option and `cd` to the directory where you want to review from. The \
          -review, -editor, or -default-no options should only be run at the root directory of the \
          project files to patch." )
@@ -478,11 +478,11 @@ let emit_errors { input_options; output_options; _ } =
          match input_options.templates with
          | Some inputs ->
            List.find_map inputs ~f:(fun input ->
-             if Sys.is_file input = `Yes then (
+             if Sys_unix.is_file input = `Yes then (
                match Toml.Parser.from_filename input with
                | `Error (s, _) -> Some s
                | _ -> None)
-             else if not (Sys.is_directory input = `Yes) then
+             else if not (Sys_unix.is_directory input = `Yes) then
                Some
                  (Format.sprintf "Directory %S specified with -templates is not a directory." input)
              else
@@ -599,7 +599,7 @@ let filter_zip_entries file_filters exclude_directory_prefix exclude_file_prefix
       && has_acceptable_suffix filename)
 
 let syntax custom_matcher_path =
-  match Sys.file_exists custom_matcher_path with
+  match Sys_unix.file_exists custom_matcher_path with
   | `No | `Unknown ->
     Format.eprintf "Could not open file: %s@." custom_matcher_path;
     exit 1
@@ -795,7 +795,7 @@ let create
     | Directory ->
       let target_directory =
         if target_directory = "." then
-          Filename.realpath target_directory
+          Filename_unix.realpath target_directory
         else
           target_directory
       in
diff --git a/lib/app/configuration/dune b/lib/app/configuration/dune
index 9e849a0..e417cfe 100644
--- a/lib/app/configuration/dune
+++ b/lib/app/configuration/dune
@@ -11,6 +11,7 @@
   comby.patdiff
   comby.camlzip
   core
+  core_unix.sys_unix
   yojson
   ppx_deriving_yojson
   toml
diff --git a/lib/app/configuration/external_semantic.ml b/lib/app/configuration/external_semantic.ml
index 4a14c11..90d023a 100644
--- a/lib/app/configuration/external_semantic.ml
+++ b/lib/app/configuration/external_semantic.ml
@@ -12,11 +12,11 @@ let lsif_endpoint =
 
 let repository_remote () =
   let open Core in
-  In_channel.input_all (Unix.open_process_in "git config --get remote.origin.url")
+  In_channel.input_all (Core_unix.open_process_in "git config --get remote.origin.url")
 
 let revision () =
   let open Core in
-  In_channel.input_all (Unix.open_process_in "git rev-parse HEAD")
+  In_channel.input_all (Core_unix.open_process_in "git rev-parse HEAD")
 
 let lsif_hover ~name:_ ~filepath ~line ~column =
   let open Core_kernel in
@@ -29,7 +29,7 @@ let lsif_hover ~name:_ ~filepath ~line ~column =
     in
     let revision = revision () |> String.rstrip in
     if debug then Format.printf "Repository remote: %s\nRevision: %s@." repository revision;
-    String.chop_prefix_if_exists filepath ~prefix:(Sys.getcwd ())
+    String.chop_prefix_if_exists filepath ~prefix:(Sys_unix.getcwd ())
     |> fun filepath_relative_root ->
     if debug then Format.printf "File relative root: %s@." filepath;
     if debug then Format.printf "Querying type at %d::%d@." line column;
diff --git a/lib/app/interactive/interactive.ml b/lib/app/interactive/interactive.ml
index 38f4641..7a8f397 100644
--- a/lib/app/interactive/interactive.ml
+++ b/lib/app/interactive/interactive.ml
@@ -1,6 +1,7 @@
 open Core
 open Lwt
 open Configuration
+module Unix = Core_unix
 
 let debug = Sys.getenv "DEBUG_COMBY" |> Option.is_some
 
@@ -19,7 +20,7 @@ module Diff = struct
       (* Use external compare program? *)
       match ext_cmp with
       | None ->
-        Patience_diff.String.get_hunks ~transform ~context ~big_enough:line_big_enough ~prev ~next
+        Patience_diff.String.get_hunks ~transform ~context ~big_enough:line_big_enough ~prev ~next ()
       | Some prog ->
         let compare x y =
           let cmd = sprintf "%s %S %S" prog x y in
@@ -36,7 +37,7 @@ module Diff = struct
             let compare = compare
           end)
         in
-        P.get_hunks ~transform ~context ~big_enough:line_big_enough ~prev ~next
+        P.get_hunks ~transform ~context ~big_enough:line_big_enough ~prev ~next ()
     in
     match float_tolerance with
     | None -> hunks
diff --git a/lib/app/pipeline/dune b/lib/app/pipeline/dune
index bd4646d..e6ec880 100644
--- a/lib/app/pipeline/dune
+++ b/lib/app/pipeline/dune
@@ -12,7 +12,7 @@
   comby.interactive
   comby.camlzip
   core
-  core.uuid
+  core_unix.uuid
   yojson
   ppx_deriving_yojson
   parany
diff --git a/lib/app/pipeline/parallel_hack.available.ml b/lib/app/pipeline/parallel_hack.available.ml
index 12dc227..9ab6cba 100644
--- a/lib/app/pipeline/parallel_hack.available.ml
+++ b/lib/app/pipeline/parallel_hack.available.ml
@@ -1,4 +1,5 @@
 open Core
+module Unix = Core_unix
 open Hack_parallel
 
 let debug = Sys.getenv "DEBUG_COMBY" |> Option.is_some
diff --git a/lib/app/vendored/patdiff/kernel/src/float_tolerance.ml b/lib/app/vendored/patdiff/kernel/src/float_tolerance.ml
index 4e064fb..ad547d9 100644
--- a/lib/app/vendored/patdiff/kernel/src/float_tolerance.ml
+++ b/lib/app/vendored/patdiff/kernel/src/float_tolerance.ml
@@ -287,7 +287,7 @@ end = struct
           ~running_step:(fun (car, pos) cadr ->
             match car, cadr with
             | Same car_lines, Same cadr_lines ->
-              Skip (Same (Array.concat [ car_lines; cadr_lines ]), pos)
+                            Skip {state = (Same (Array.concat [ car_lines; cadr_lines ]), pos)}
             | Unified _, _ | _, Unified _ ->
               raise_s
                 [%message
@@ -296,7 +296,7 @@ end = struct
                     (cadr : string Range.t)]
             | (Prev _ | Next _ | Replace _), (Prev _ | Next _ | Replace _)
             | Same _, (Prev _ | Next _ | Replace _)
-            | (Prev _ | Next _ | Replace _), Same _ -> Yield ((car, pos), (cadr, Middle)))
+            | (Prev _ | Next _ | Replace _), Same _ -> Yield {value = (car, pos); state = (cadr, Middle)})
           ~inner_finished:(fun (last, pos) ->
             match last, pos with
             | Unified _, _ ->
@@ -308,7 +308,7 @@ end = struct
               Some (last, End))
           ~finishing_step:(function
             | None -> Done
-            | Some result -> Yield (result, None))
+            | Some result -> Yield {value = result; state = None})
     ;;
 
     include struct
@@ -448,7 +448,7 @@ end = struct
         ~init:{ prev_start; next_start; ranges = [] }
         ~running_step:(fun t drop_or_keep ->
           match (drop_or_keep : Drop_or_keep.t) with
-          | Keep range -> Skip { t with ranges = range :: t.ranges }
+          | Keep range -> Skip {state = { t with ranges = range :: t.ranges }}
           | Drop n ->
             let hunk = to_hunk t in
             let t =
@@ -457,11 +457,11 @@ end = struct
               ; ranges = []
               }
             in
-            if List.is_empty (Hunk.ranges hunk) then Skip t else Yield (hunk, t))
+            if List.is_empty (Hunk.ranges hunk) then Skip {state = t} else Yield {value = hunk; state = t})
         ~inner_finished:(fun t -> if List.is_empty t.ranges then None else Some t)
         ~finishing_step:(function
           | None -> Done
-          | Some t -> Yield (to_hunk t, None))
+          | Some t -> Yield {value = to_hunk t; state = None})
     ;;
   end
 
diff --git a/lib/app/vendored/patdiff/kernel/src/patdiff_core.ml b/lib/app/vendored/patdiff/kernel/src/patdiff_core.ml
index 4f53a0b..88ee0e3 100644
--- a/lib/app/vendored/patdiff/kernel/src/patdiff_core.ml
+++ b/lib/app/vendored/patdiff/kernel/src/patdiff_core.ml
@@ -138,6 +138,7 @@ module Make (Output_impls : Output_impls) = struct
       ~big_enough:line_big_enough
       ~prev
       ~next
+      ()
   ;;
 
   type word_or_newline =
@@ -345,6 +346,7 @@ module Make (Output_impls : Output_impls) = struct
       ~big_enough:word_big_enough
       ~prev:prev_pieces
       ~next:next_pieces
+      ()
   ;;
 
   let ranges_are_just_whitespace (ranges : _ Patience_diff.Range.t list) =
diff --git a/lib/app/vendored/patdiff/lib/src/compare_core.ml b/lib/app/vendored/patdiff/lib/src/compare_core.ml
index fafb201..8b40d09 100644
--- a/lib/app/vendored/patdiff/lib/src/compare_core.ml
+++ b/lib/app/vendored/patdiff/lib/src/compare_core.ml
@@ -1,5 +1,6 @@
 open! Core
 open! Import
+module Unix = Core_unix
 
 let lines_of_contents contents =
   let lines = Array.of_list (String.split_lines contents) in
@@ -100,6 +101,7 @@ let compare_lines (config : Configuration.t) ?prev_diff ?next_diff ~prev ~next (
         ~big_enough:line_big_enough
         ~prev
         ~next
+        ()
     | Some prog ->
       let compare x y =
         let cmd = sprintf "%s %S %S" prog x y in
@@ -116,7 +118,7 @@ let compare_lines (config : Configuration.t) ?prev_diff ?next_diff ~prev ~next (
           let compare = compare
         end)
       in
-      P.get_hunks ~transform ~context ~big_enough:line_big_enough ~prev ~next
+      P.get_hunks ~transform ~context ~big_enough:line_big_enough ~prev ~next ()
   in
   let hunks =
     match config.float_tolerance with
@@ -361,7 +363,7 @@ let rec diff_dirs_internal (config : Configuration.t) ~prev_dir ~next_dir ~file_
       | None -> Fn.const true
       | Some file_filter -> file_filter
     in
-    Sys.ls_dir (File_name.real_name_exn dir)
+    Sys_unix.ls_dir (File_name.real_name_exn dir)
     |> List.filter ~f:(fun x ->
       let x = File_name.real_name_exn dir ^/ x in
       match Unix.stat x with
diff --git a/lib/app/vendored/patdiff/lib/src/compare_core.mli b/lib/app/vendored/patdiff/lib/src/compare_core.mli
index e919512..caa8dcb 100644
--- a/lib/app/vendored/patdiff/lib/src/compare_core.mli
+++ b/lib/app/vendored/patdiff/lib/src/compare_core.mli
@@ -1,5 +1,6 @@
 open! Core
 open! Import
+module Unix = Core_unix
 
 val diff_files
   :  Configuration.t
diff --git a/lib/app/vendored/patdiff/lib/src/configuration.ml b/lib/app/vendored/patdiff/lib/src/configuration.ml
index 6879daa..7d59706 100644
--- a/lib/app/vendored/patdiff/lib/src/configuration.ml
+++ b/lib/app/vendored/patdiff/lib/src/configuration.ml
@@ -481,7 +481,7 @@ let rec load_exn' ~set config_file =
        | Error _another_exn -> raise exn
        | Ok c ->
          (let new_file = config_file ^ ".new" in
-          match Sys.file_exists new_file with
+          match Sys_unix.file_exists new_file with
           | `Yes | `Unknown -> ()
           | `No ->
             (try Sexp.save_hum new_file (On_disk.V1.sexp_of_t c) with
@@ -564,7 +564,7 @@ let get_config ?filename () =
       (* ~/.patdiff exists *)
       Option.bind (Sys.getenv "HOME") ~f:(fun home ->
         let f = home ^/ ".patdiff" in
-        match Sys.file_exists f with
+        match Sys_unix.file_exists f with
         | `Yes -> Some f
         | `No | `Unknown -> None)
   in
diff --git a/lib/app/vendored/patdiff/lib/src/dune b/lib/app/vendored/patdiff/lib/src/dune
index 8f1da58..b6a0f80 100644
--- a/lib/app/vendored/patdiff/lib/src/dune
+++ b/lib/app/vendored/patdiff/lib/src/dune
@@ -4,7 +4,9 @@
  (libraries
   core_kernel.composition_infix
   core
-  core.linux_ext
+  core_unix
+  core_unix.linux_ext
+  core_unix.sys_unix
   comby.patdiff_kernel
   patience_diff)
  (preprocess
diff --git a/lib/app/vendored/patdiff/lib/src/html_output.ml b/lib/app/vendored/patdiff/lib/src/html_output.ml
index 3d08f91..93ae8af 100644
--- a/lib/app/vendored/patdiff/lib/src/html_output.ml
+++ b/lib/app/vendored/patdiff/lib/src/html_output.ml
@@ -1,5 +1,6 @@
 open! Core
 open! Import
+module Unix = Core_unix
 
 include Patdiff_kernel.Html_output.Private.Make (struct
     let mtime file =
diff --git a/lib/kernel/matchers/alpha.ml b/lib/kernel/matchers/alpha.ml
index d2321b0..e669cf8 100644
--- a/lib/kernel/matchers/alpha.ml
+++ b/lib/kernel/matchers/alpha.ml
@@ -11,19 +11,13 @@ let configuration_ref = ref (Configuration.create ())
 let weaken_delimiter_hole_matching = false
 
 let debug =
-  match Sys.getenv "DEBUG_COMBY" with
-  | exception Not_found -> false
-  | _ -> true
+  Sys.getenv "DEBUG_COMBY" |> Option.is_some
 
 let debug_hole =
-  match Sys.getenv "DEBUG_COMBY_HOLE" with
-  | exception Not_found -> false
-  | _ -> true
+  Sys.getenv "DEBUG_COMBY_HOLE" |> Option.is_some
 
 let debug_position =
-  match Sys.getenv "DEBUG_COMBY_POS" with
-  | exception Not_found -> false
-  | _ -> true
+  Sys.getenv "DEBUG_COMBY_POS" |> Option.is_some
 
 let f _ = return Types.Unit
 
@@ -139,7 +133,7 @@ module Make (Lang : Types.Language.S) (Meta : Types.Metasyntax.S) (Ext : Types.E
     let generate_spaces_parser () =
       many1 @@ choice [ skip comment_parser; spaces1 ] >>= fun _ -> f Types.Unit
 
-    let sequence_chain (plist : ('c, Match.t) parser sexp_list) : ('c, Match.t) parser =
+    let sequence_chain (plist : ('c, Match.t) parser list) : ('c, Match.t) parser =
       List.fold plist ~init:(return Types.Unit) ~f:( >> )
 
     let with_debug_matcher s tag =
@@ -745,7 +739,7 @@ module Make (Lang : Types.Language.S) (Meta : Types.Metasyntax.S) (Ext : Types.E
     let hole_parser ?at_depth sort dimension =
       let open Types.Hole in
       let hole_parser =
-        let open Polymorphic_compare in
+        let open Poly in
         List.fold ~init:[] hole_parsers ~f:(fun acc (sort', parser) ->
           if sort' = sort then parser :: acc else acc)
       in
diff --git a/lib/kernel/matchers/evaluate.ml b/lib/kernel/matchers/evaluate.ml
index cf320ea..251bd42 100644
--- a/lib/kernel/matchers/evaluate.ml
+++ b/lib/kernel/matchers/evaluate.ml
@@ -101,7 +101,7 @@ let apply
           List.fold matches ~init:(true, None) ~f:fold_matches |> Option.some
       in
       List.find_map cases ~f:(fun (template, case_expression) -> evaluate template case_expression)
-      |> Option.value_map ~f:ident ~default:(false, Some env)
+      |> Option.value_map ~f:Fn.id ~default:(false, Some env)
     (* rewrite ... { ... } *)
     | Rewrite (Template t, (match_template, rewrite_template)) ->
       let rewrite_template = substitute env rewrite_template in
diff --git a/lib/kernel/matchers/omega.ml b/lib/kernel/matchers/omega.ml
index c286781..3b0b929 100644
--- a/lib/kernel/matchers/omega.ml
+++ b/lib/kernel/matchers/omega.ml
@@ -28,14 +28,10 @@ let push_source_ref : string ref = ref ""
 let filepath_ref : string option ref = ref None
 
 let debug =
-  match Sys.getenv "DEBUG_COMBY" with
-  | exception Not_found -> false
-  | _ -> true
+  Sys.getenv "DEBUG_COMBY" |> Option.is_some
 
 let rewrite =
-  match Sys.getenv "REWRITE" with
-  | exception Not_found -> false
-  | _ -> true
+  Sys.getenv "REWRITE" |> Option.is_some
 
 let actual = Buffer.create 10
 let rewrite_template = ref ""
@@ -553,7 +549,7 @@ module Make (Language : Types.Language.S) (Meta : Metasyntax.S) (Ext : External.
     let hole_parser sort dimension : (production * 'a) t t =
       let hole_parser =
         (* This must be fold, can't be find *)
-        let open Polymorphic_compare in
+        let open Poly in
         List.fold ~init:[] Template.Matching.hole_parsers ~f:(fun acc (sort', parser) ->
           if sort' = sort then parser :: acc else acc)
       in
diff --git a/lib/kernel/matchers/rewrite.ml b/lib/kernel/matchers/rewrite.ml
index 4b12fd0..ae0fafc 100644
--- a/lib/kernel/matchers/rewrite.ml
+++ b/lib/kernel/matchers/rewrite.ml
@@ -4,9 +4,7 @@ open Match
 open Replacement
 
 let debug =
-  match Sys.getenv "DEBUG_COMBY" with
-  | exception Not_found -> false
-  | _ -> true
+  Sys.getenv "DEBUG_COMBY" |> Option.is_some
 
 let counter =
   let uuid_for_id_counter = ref 0 in
@@ -51,21 +49,21 @@ let parse_first_label ?(metasyntax = Metasyntax.default_metasyntax) template =
   in
   parse_string ~consume:All parser template
   |> function
-  | Ok label -> List.find_map label ~f:ident
+  | Ok label -> List.find_map label ~f:Fn.id
   | Error _ -> None
 
 let substitute_fresh ?(metasyntax = Metasyntax.default_metasyntax) ?(fresh = counter) template =
-  let label_table = String.Table.create () in
+  let label_table = Hashtbl.create (module String) in
   let template_ref = ref template in
   let current_label_ref = ref (parse_first_label ~metasyntax !template_ref) in
   while Option.is_some !current_label_ref do
     let label = Option.value_exn !current_label_ref in
     let id =
-      match String.Table.find label_table label with
+      match Hashtbl.find label_table label with
       | Some id -> id
       | None ->
         let id = fresh () in
-        if String.(label <> "") then String.Table.add_exn label_table ~key:label ~data:id;
+        if String.(label <> "") then Hashtbl.add_exn label_table ~key:label ~data:id;
         id
     in
     let left, right = replacement_sentinel metasyntax in
diff --git a/lib/semantic/dune b/lib/semantic/dune
index 1ddd706..4d7aaba 100644
--- a/lib/semantic/dune
+++ b/lib/semantic/dune
@@ -5,4 +5,4 @@
   (backend bisect_ppx))
  (preprocess
   (pps ppx_deriving.show ppx_deriving.eq ppx_sexp_conv))
- (libraries core lwt lwt_ssl cohttp cohttp-lwt-unix yojson))
+ (libraries core_kernel lwt lwt_ssl cohttp cohttp-lwt-unix yojson))
diff --git a/lib/semantic/lsif.ml b/lib/semantic/lsif.ml
index c150f59..36b3ea7 100644
--- a/lib/semantic/lsif.ml
+++ b/lib/semantic/lsif.ml
@@ -3,10 +3,7 @@ open Lwt
 open Cohttp
 open Cohttp_lwt_unix
 
-let debug =
-  match Sys.getenv "DEBUG_COMBY" with
-  | exception Not_found -> false
-  | _ -> true
+let debug = Sys.getenv "DEBUG_COMBY" |> Option.is_some
 
 module Formatting = struct
   type t =
diff --git a/src/dune b/src/dune
index d85b9aa..f006195 100644
--- a/src/dune
+++ b/src/dune
@@ -2,6 +2,7 @@
  (libraries
   comby
   core
+  core_unix.command_unix
   ppx_deriving_yojson
   ppx_deriving_yojson.runtime
   (select
diff --git a/src/main.ml b/src/main.ml
index bb0041e..9f15025 100644
--- a/src/main.ml
+++ b/src/main.ml
@@ -1,4 +1,5 @@
 open Core
+module Unix = Core_unix
 open Command.Let_syntax
 open Comby_kernel
 open Configuration
@@ -44,7 +45,7 @@ let substitute_environment_only_and_exit metasyntax_path anonymous_arguments jso
     match metasyntax_path with
     | None -> Matchers.Metasyntax.default_metasyntax
     | Some metasyntax_path ->
-      (match Sys.file_exists metasyntax_path with
+      (match Sys_unix.file_exists metasyntax_path with
        | `No | `Unknown ->
          Format.eprintf "Could not open file: %s@." metasyntax_path;
          exit 1
@@ -106,12 +107,12 @@ let base_command_parameters : (unit -> 'result) Command.Param.t =
       flag
         "directory"
         ~aliases:[ "d" ]
-        (optional_with_default (Sys.getcwd ()) string)
+        (optional_with_default (Sys_unix.getcwd ()) string)
         ~doc:
           (Format.sprintf
              "path Run recursively on files in a directory relative to the root. Default is \
               current directory: %s"
-          @@ Sys.getcwd ())
+          @@ Sys_unix.getcwd ())
     and directory_depth =
       flag "depth" (optional int) ~doc:"n Depth to recursively descend into directories"
     and templates =
@@ -285,7 +286,7 @@ let base_command_parameters : (unit -> 'result) Command.Param.t =
       | l ->
         List.map l ~f:(fun pattern ->
           if String.contains pattern '/' then (
-            match Filename.realpath pattern with
+            match Filename_unix.realpath pattern with
             | exception Unix.Unix_error _ ->
               Format.eprintf
                 "No such file or directory: %s. Comby interprets patterns containing '/' as file \
@@ -342,7 +343,7 @@ let base_command_parameters : (unit -> 'result) Command.Param.t =
     let omega = omega || omega_env in
     let fast_offset_conversion_env = Option.is_some @@ Sys.getenv "FAST_OFFSET_CONVERSION_COMBY" in
     let fast_offset_conversion = fast_offset_conversion_env || fast_offset_conversion in
-    let arch = Unix.Utsname.machine (Core.Unix.uname ()) in
+    let arch = Unix.Utsname.machine (Unix.uname ()) in
     let compute_mode =
       match sequential, parany, arch with
       | true, _, _ -> `Sequential
@@ -447,7 +448,7 @@ let parse_comby_dot_file () =
 
 let () =
   If_hack_parallel.check_entry_point ();
-  Command.run default_command ~version:"1.8.2" ~extend:(fun _ ->
-    match Sys.file_exists ".comby" with
+  Command_unix.run default_command ~version:"1.8.2" ~extend:(fun _ ->
+    match Sys_unix.file_exists ".comby" with
     | `Yes -> parse_comby_dot_file ()
     | _ -> [])
