From 26a65d37e388c25898a13b60a42ab606d63fda2e Mon Sep 17 00:00:00 2001
From: Tom Rix <Tom.Rix@amd.com>
Date: Fri, 25 Oct 2024 08:38:53 -0700
Subject: [PATCH] handle v1 of compressed fatbins

The size of the compressed modules is needed to uncompress them but
that information is only stored in the header in v2.

Because the uncompressed size is known, the compressed size can be
greater than what it actually is.

So if v1 is detected use the maximum possible size.

Signed-off-by: Tom Rix <Tom.Rix@amd.com>
---
 hipamd/src/hip_code_object.cpp | 9 ++++++---
 hipamd/src/hip_code_object.hpp | 2 +-
 hipamd/src/hip_fatbin.cpp      | 8 +++++---
 hipamd/src/hip_fatbin.hpp      | 2 +-
 rocclr/os/os.hpp               | 2 +-
 rocclr/os/os_posix.cpp         | 3 ++-
 rocclr/os/os_win32.cpp         | 2 +-
 7 files changed, 17 insertions(+), 11 deletions(-)

diff --git a/hipamd/src/hip_code_object.cpp b/hipamd/src/hip_code_object.cpp
index 73b9e2603c98..15098612ebf7 100644
--- a/hipamd/src/hip_code_object.cpp
+++ b/hipamd/src/hip_code_object.cpp
@@ -600,10 +600,13 @@ hipError_t CodeObject::extractCodeObjectFromFatBinary(
 }
 
 // ================================================================================================
-size_t CodeObject::getFatbinSize(const void* data, const bool isCompressed) {
+size_t CodeObject::getFatbinSize(const void* data, const bool isCompressed, size_t maximum_possible_size) {
   if (isCompressed) {
     const auto obheader = reinterpret_cast<const __ClangOffloadBundleCompressedHeader*>(data);
-    return obheader->totalSize;
+    if (obheader->versionNumber > 1)
+      return obheader->totalSize;
+    else
+      return maximum_possible_size;
   } else {
     const auto obheader = reinterpret_cast<const __ClangOffloadBundleUncompressedHeader*>(data);
     const __ClangOffloadBundleInfo* desc = &obheader->desc[0];
@@ -632,7 +635,7 @@ hipError_t CodeObject::extractCodeObjectFromFatBinaryUsingComgr(
     return hipErrorInvalidKernelFile;
   }
 
-  if (size == 0) size = getFatbinSize(data, isCompressed);
+  size = getFatbinSize(data, isCompressed, size);
 
   amd_comgr_data_t dataCodeObj{0};
   amd_comgr_data_set_t dataSetBundled{0};
diff --git a/hipamd/src/hip_code_object.hpp b/hipamd/src/hip_code_object.hpp
index f0407f7bd48f..1dbcc2ab44e1 100644
--- a/hipamd/src/hip_code_object.hpp
+++ b/hipamd/src/hip_code_object.hpp
@@ -66,7 +66,7 @@ class CodeObject {
   static bool IsClangOffloadMagicBundle(const void* data, bool& isCompressed);
 
   // Return size of fat bin
-  static size_t getFatbinSize(const void* data, const bool isCompressed = false);
+  static size_t getFatbinSize(const void* data, const bool isCompressed = false, size_t maximum_possible_size = 0);
 
   /**
      *  @brief Extract code object from fatbin using comgr unbundling action
diff --git a/hipamd/src/hip_fatbin.cpp b/hipamd/src/hip_fatbin.cpp
index 8b52e9f32fc6..1d39fa18b636 100644
--- a/hipamd/src/hip_fatbin.cpp
+++ b/hipamd/src/hip_fatbin.cpp
@@ -126,6 +126,7 @@ hipError_t FatBinaryInfo::ExtractFatBinaryUsingCOMGR(const std::vector<hip::Devi
   amd_comgr_data_t data_object {0};
   amd_comgr_status_t comgr_status = AMD_COMGR_STATUS_SUCCESS;
   hipError_t hip_status = hipSuccess;
+  size_t maximum_possible_size = 0;
 
   // If image was passed as a pointer to our hipMod* api, we can try to extract the file name
   // if it was mapped by the app. Otherwise use the COMGR data API.
@@ -135,7 +136,7 @@ hipError_t FatBinaryInfo::ExtractFatBinaryUsingCOMGR(const std::vector<hip::Devi
       return hipErrorInvalidValue;
     }
 
-    if(!amd::Os::FindFileNameFromAddress(image_, &fname_, &foffset_)) {
+    if(!amd::Os::FindFileNameFromAddress(image_, &fname_, &foffset_, &maximum_possible_size)) {
       fname_ = std::string("");
       foffset_ = 0;
     }
@@ -190,7 +191,7 @@ hipError_t FatBinaryInfo::ExtractFatBinaryUsingCOMGR(const std::vector<hip::Devi
       size_t major = 0, minor = 0;
       amd::Comgr::get_version(&major, &minor);
       if (major >= 2 && minor >= 8) {
-        hip_status = ExtractFatBinaryUsingCOMGR(image_, devices);
+	hip_status = ExtractFatBinaryUsingCOMGR(image_, maximum_possible_size, devices);
         break;
       } else if (isCompressed) {
         LogPrintfError(
@@ -467,6 +468,7 @@ hipError_t FatBinaryInfo::BuildProgram(const int device_id) {
 
 // ================================================================================================
 hipError_t FatBinaryInfo::ExtractFatBinaryUsingCOMGR(const void *data,
+    size_t maximum_possible_size,
     const std::vector<hip::Device*>& devices) {
   hipError_t hip_status = hipSuccess;
   // At this line, image should be a valid ptr.
@@ -481,7 +483,7 @@ hipError_t FatBinaryInfo::ExtractFatBinaryUsingCOMGR(const void *data,
       device_names.push_back(devices[dev_idx]->devices()[0]->isa().isaName());
     }
 
-    hip_status = CodeObject::extractCodeObjectFromFatBinaryUsingComgr(data, 0,
+    hip_status = CodeObject::extractCodeObjectFromFatBinaryUsingComgr(data, maximum_possible_size,
       device_names, code_objs);
     if (hip_status == hipErrorNoBinaryForGpu || hip_status == hipSuccess) {
       for (size_t dev_idx = 0; dev_idx < devices.size(); ++dev_idx) {
diff --git a/hipamd/src/hip_fatbin.hpp b/hipamd/src/hip_fatbin.hpp
index 5c4ea29761af..afd3cb2a2061 100644
--- a/hipamd/src/hip_fatbin.hpp
+++ b/hipamd/src/hip_fatbin.hpp
@@ -79,7 +79,7 @@ public:
      *
      *  @see CodeObject::extractCodeObjectFromFatBinaryUsingComgr()
      */
-  hipError_t ExtractFatBinaryUsingCOMGR(const void* data,
+  hipError_t ExtractFatBinaryUsingCOMGR(const void* data, size_t maximum_possible_size,
                                               const std::vector<hip::Device*>& devices);
   hipError_t ExtractFatBinary(const std::vector<hip::Device*>& devices);
   hipError_t AddDevProgram(const int device_id);
diff --git a/rocclr/os/os.hpp b/rocclr/os/os.hpp
index c9bd0b99e5cd..752f62f2f8c9 100644
--- a/rocclr/os/os.hpp
+++ b/rocclr/os/os.hpp
@@ -117,7 +117,7 @@ class Os : AllStatic {
 
   // Returns the file name & file offset of mapped memory if the file is mapped.
   static bool FindFileNameFromAddress(const void* image, std::string* fname_ptr,
-                                      size_t* foffset_ptr);
+                                      size_t* foffset_ptr, size_t *max_possible_size);
 
   // Given a valid file descriptor returns mmaped memory for size and offset
   static bool MemoryMapFileDesc(FileDesc fdesc, size_t fsize, size_t foffset,
diff --git a/rocclr/os/os_posix.cpp b/rocclr/os/os_posix.cpp
index 739795e0cb19..659bbb54a253 100644
--- a/rocclr/os/os_posix.cpp
+++ b/rocclr/os/os_posix.cpp
@@ -789,7 +789,7 @@ bool Os::GetFileHandle(const char* fname, FileDesc* fd_ptr, size_t* sz_ptr) {
 }
 
 bool amd::Os::FindFileNameFromAddress(const void* image, std::string* fname_ptr,
-                                      size_t* foffset_ptr) {
+                                      size_t* foffset_ptr, size_t *maximum_possible_size) {
 
   // Get the list of mapped file list
   bool ret_value = false;
@@ -831,6 +831,7 @@ bool amd::Os::FindFileNameFromAddress(const void* image, std::string* fname_ptr,
 
       *fname_ptr = uri_file_path;
       *foffset_ptr = offset + address - low_address;
+      *maximum_possible_size = high_address - address + 1;
       ret_value = true;
       break;
     }
diff --git a/rocclr/os/os_win32.cpp b/rocclr/os/os_win32.cpp
index 3923ec37dfc5..6fca0d9f4ccc 100644
--- a/rocclr/os/os_win32.cpp
+++ b/rocclr/os/os_win32.cpp
@@ -936,7 +936,7 @@ bool Os::MemoryMapFileTruncated(const char* fname, const void** mmap_ptr, size_t
   return true;
 }
 
-bool Os::FindFileNameFromAddress(const void* image, std::string* fname_ptr, size_t* foffset_ptr) {
+bool Os::FindFileNameFromAddress(const void* image, std::string* fname_ptr, size_t* foffset_ptr, size_t *maximum_possible_size) {
   // TODO: Implementation on windows side pending.
   return false;
 }
-- 
2.47.0

