<<<<<<< HEAD
#!/usr/bin/env nix-shell
#! nix-shell -i bash -p yarn2nix bundix coreutils diffutils nix-prefetch-github gnused jq
set -e

OWNER=mastodon
REPO=mastodon
=======
#!/usr/bin/env bash
set -e

URL=https://github.com/mastodon/mastodon.git
>>>>>>> 903308adb4b (Improved error handling, differentiate nix/non-nix networks)

POSITIONAL=()
while [[ $# -gt 0 ]]; do
    key="$1"

    case $key in
<<<<<<< HEAD
        --owner)
            OWNER="$2"
            shift # past argument
            shift # past value
            ;;
        --repo)
            REPO="$2"
=======
        --url)
            URL="$2"
>>>>>>> 903308adb4b (Improved error handling, differentiate nix/non-nix networks)
            shift # past argument
            shift # past value
            ;;
        --ver)
            VERSION="$2"
            shift # past argument
            shift # past value
            ;;
        --rev)
            REVISION="$2"
            shift # past argument
            shift # past value
            ;;
        --patches)
            PATCHES="$2"
            shift # past argument
            shift # past value
            ;;
        *)  # unknown option
            POSITIONAL+=("$1")
            shift # past argument
            ;;
    esac
done

<<<<<<< HEAD
if [[ -n "$POSITIONAL" ]]; then
    echo "Usage: update.sh [--owner OWNER] [--repo REPO] [--ver VERSION] [--rev REVISION] [--patches PATCHES]"
    echo "OWNER and REPO must be paths on github."
    echo "If REVISION is not provided, the latest tag from github.com/mastodon/mastodon is fetched and VERSION is calculated from it."
    echo "If OWNER and REPO are not provided, it defaults they default to mastodon and mastodon."
    echo "PATCHES, if provided, should be one or more Nix expressions separated by spaces."
=======
if [[ -z "$VERSION" || -n "$POSITIONAL" ]]; then
    echo "Usage: update.sh [--url URL] --ver VERSION [--rev REVISION] [--patches PATCHES]"
    echo "URL may be any path acceptable to 'git clone' and VERSION the"
    echo "semantic version number.  If VERSION is not a revision acceptable to"
    echo "'git checkout', you must provide one in REVISION.  If URL is not"
    echo "provided, it defaults to https://github.com/mastodon/mastodon.git."
    echo "PATCHES, if provided, should be one or more Nix expressions"
    echo "separated by spaces."
>>>>>>> 903308adb4b (Improved error handling, differentiate nix/non-nix networks)
    exit 1
fi

if [[ -z "$REVISION" ]]; then
<<<<<<< HEAD
    REVISION="$(curl ${GITHUB_TOKEN:+" -u \":$GITHUB_TOKEN\""} -s "https://api.github.com/repos/$OWNER/$REPO/releases" | jq -r  'map(select(.prerelease == false)) | .[0].tag_name')"
    VERSION="$(echo "$REVISION" | cut -c2-)"
fi

rm -f gemset.nix version.nix source.nix
cd "$(dirname "${BASH_SOURCE[0]}")" || exit 1
=======
    REVISION="$VERSION"
fi

rm -f gemset.nix version.nix source.nix
TARGET_DIR="$PWD"

>>>>>>> 903308adb4b (Improved error handling, differentiate nix/non-nix networks)

WORK_DIR=$(mktemp -d)

# Check that working directory was created.
<<<<<<< HEAD
if [[ -z "$WORK_DIR" || ! -d "$WORK_DIR" ]]; then
=======
if [[ ! "$WORK_DIR" || ! -d "$WORK_DIR" ]]; then
>>>>>>> 903308adb4b (Improved error handling, differentiate nix/non-nix networks)
    echo "Could not create temporary directory"
    exit 1
fi

# Delete the working directory on exit.
function cleanup {
    # Report errors, if any, from nix-prefetch-git
    grep "fatal" $WORK_DIR/nix-prefetch-git.out >/dev/stderr || true
    rm -rf "$WORK_DIR"
}
trap cleanup EXIT

<<<<<<< HEAD
echo "Fetching source code $REVISION"
JSON=$(nix-prefetch-github "$OWNER" "$REPO" --rev "$REVISION" 2> $WORK_DIR/nix-prefetch-git.out)
HASH=$(echo "$JSON" | jq -r .hash)

echo "Creating version.nix"
echo "\"$VERSION\"" | sed 's/^"v/"/' > version.nix

cat > source.nix << EOF
# This file was generated by pkgs.mastodon.updateScript.
{ fetchFromGitHub, applyPatches }: let
  src = fetchFromGitHub {
    owner = "$OWNER";
    repo = "$REPO";
    rev = "$REVISION";
    hash = "$HASH";
=======
echo "Fetching source code $REVISION from $URL"
JSON=$(nix-prefetch-git --url "$URL" --rev "$REVISION"  2> $WORK_DIR/nix-prefetch-git.out)
SHA=$(echo $JSON | jq -r .sha256)
FETCHED_SOURCE_DIR=$(grep '^path is' $WORK_DIR/nix-prefetch-git.out | sed 's/^path is //')

echo "Creating version.nix"
echo \"$VERSION\" | sed 's/^"v/"/' > version.nix

cat > source.nix << EOF
# This file was generated by pkgs.mastodon.updateScript.
{ fetchgit, applyPatches }: let
  src = fetchgit {
    url = "$URL";
    rev = "$REVISION";
    sha256 = "$SHA";
>>>>>>> 903308adb4b (Improved error handling, differentiate nix/non-nix networks)
  };
in applyPatches {
  inherit src;
  patches = [$PATCHES];
}
EOF
SOURCE_DIR="$(nix-build --no-out-link -E '(import <nixpkgs> {}).callPackage ./source.nix {}')"

echo "Creating gemset.nix"
bundix --lockfile="$SOURCE_DIR/Gemfile.lock" --gemfile="$SOURCE_DIR/Gemfile"
<<<<<<< HEAD
echo "" >> gemset.nix  # Create trailing newline to please EditorConfig checks
=======
echo "" >> $TARGET_DIR/gemset.nix  # Create trailing newline to please EditorConfig checks
>>>>>>> 903308adb4b (Improved error handling, differentiate nix/non-nix networks)
