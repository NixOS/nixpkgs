# Generated by parse-requirements.py
# Do not edit!

{
  version = "2023.11.3";
  components = {
    "3_day_blinds" = ps: with ps; [
    ];
    "abode" = ps: with ps; [
      jaraco-abode
      jaraco-functools
    ];
    "accuweather" = ps: with ps; [
      accuweather
    ];
    "acer_projector" = ps: with ps; [
      pyserial
    ];
    "acmeda" = ps: with ps; [
      aiopulse
    ];
    "actiontec" = ps: with ps; [
    ];
    "adax" = ps: with ps; [
      adax
      adax-local
    ];
    "adguard" = ps: with ps; [
      adguardhome
    ];
    "ads" = ps: with ps; [
      pyads
    ];
    "advantage_air" = ps: with ps; [
      advantage-air
    ];
    "aemet" = ps: with ps; [
      aemet-opendata
    ];
    "aftership" = ps: with ps; [
      pyaftership
    ];
    "agent_dvr" = ps: with ps; [
      agent-py
    ];
    "air_quality" = ps: with ps; [
    ];
    "airly" = ps: with ps; [
      airly
    ];
    "airnow" = ps: with ps; [
      pyairnow
    ];
    "airq" = ps: with ps; [
      aioairq
    ];
    "airthings" = ps: with ps; [
      airthings-cloud
    ];
    "airthings_ble" = ps: with ps; [
      aioesphomeapi
      aiohttp-cors
      aioruuvigateway
      aioshelly
      airthings-ble
      async-interrupt
      bleak
      bleak-retry-connector
      bluetooth-adapters
      bluetooth-auto-recovery
      bluetooth-data-tools
      dbus-fast
      esphome-dashboard-api
      fnv-hash-fast
      hassil
      home-assistant-intents
      ifaddr
      mutagen
      psutil-home-assistant
      pyserial
      pyudev
      sqlalchemy
      webrtc-noise-gain
      zeroconf
    ];
    "airtouch4" = ps: with ps; [
      airtouch4pyapi
    ];
    "airvisual" = ps: with ps; [
      pyairvisual
    ];
    "airvisual_pro" = ps: with ps; [
      pyairvisual
    ];
    "airzone" = ps: with ps; [
      aioairzone
    ];
    "airzone_cloud" = ps: with ps; [
      aioairzone-cloud
    ];
    "aladdin_connect" = ps: with ps; [
      aioaladdinconnect
    ];
    "alarm_control_panel" = ps: with ps; [
    ];
    "alarmdecoder" = ps: with ps; [
      adext
    ];
    "alert" = ps: with ps; [
    ];
    "alexa" = ps: with ps; [
      aiohttp-cors
      pyturbojpeg
    ];
    "alpha_vantage" = ps: with ps; [
      alpha-vantage
    ];
    "amazon_polly" = ps: with ps; [
      boto3
    ];
    "amberelectric" = ps: with ps; [
      amberelectric
    ];
    "ambiclimate" = ps: with ps; [
      aiohttp-cors
      ambiclimate
    ];
    "ambient_station" = ps: with ps; [
      aioambient
    ];
    "amcrest" = ps: with ps; [
      amcrest
      ha-ffmpeg
    ];
    "amp_motorization" = ps: with ps; [
    ];
    "ampio" = ps: with ps; [
      asmog
    ];
    "analytics" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      psutil-home-assistant
      sqlalchemy
    ];
    "android_ip_webcam" = ps: with ps; [
      pydroid-ipcam
    ];
    "androidtv" = ps: with ps; [
      adb-shell
      androidtv
      pure-python-adb
    ]
    ++ adb-shell.optional-dependencies.async
    ++ androidtv.optional-dependencies.async
    ++ pure-python-adb.optional-dependencies.async;
    "androidtv_remote" = ps: with ps; [
      androidtvremote2
    ];
    "anel_pwrctrl" = ps: with ps; [
      anel-pwrctrl-homeassistant
    ];
    "anova" = ps: with ps; [
    ]; # missing inputs: anova-wifi
    "anthemav" = ps: with ps; [
      anthemav
    ];
    "anwb_energie" = ps: with ps; [
    ];
    "apache_kafka" = ps: with ps; [
      aiokafka
    ];
    "apcupsd" = ps: with ps; [
      apcaccess
    ];
    "api" = ps: with ps; [
      aiohttp-cors
    ];
    "apple_tv" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      ifaddr
      psutil-home-assistant
      pyatv
      sqlalchemy
      zeroconf
    ];
    "application_credentials" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      psutil-home-assistant
      sqlalchemy
    ];
    "apprise" = ps: with ps; [
      apprise
    ];
    "aprs" = ps: with ps; [
      aprslib
      geopy
    ];
    "aqualogic" = ps: with ps; [
      aqualogic
    ];
    "aquostv" = ps: with ps; [
    ]; # missing inputs: sharp_aquos_rc
    "aranet" = ps: with ps; [
      aioesphomeapi
      aiohttp-cors
      aioruuvigateway
      aioshelly
      aranet4
      async-interrupt
      bleak
      bleak-retry-connector
      bluetooth-adapters
      bluetooth-auto-recovery
      bluetooth-data-tools
      dbus-fast
      esphome-dashboard-api
      fnv-hash-fast
      hassil
      home-assistant-intents
      ifaddr
      mutagen
      psutil-home-assistant
      pyserial
      pyudev
      sqlalchemy
      webrtc-noise-gain
      zeroconf
    ];
    "arcam_fmj" = ps: with ps; [
      arcam-fmj
    ];
    "arest" = ps: with ps; [
    ];
    "arris_tg2492lg" = ps: with ps; [
      arris-tg2492lg
    ];
    "aruba" = ps: with ps; [
      pexpect
    ];
    "arwn" = ps: with ps; [
      aiohttp-cors
      janus
      paho-mqtt
    ];
    "aseko_pool_live" = ps: with ps; [
      aioaseko
    ];
    "assist_pipeline" = ps: with ps; [
      aiohttp-cors
      hassil
      home-assistant-intents
      mutagen
      webrtc-noise-gain
    ];
    "asterisk_cdr" = ps: with ps; [
      asterisk-mbox
    ];
    "asterisk_mbox" = ps: with ps; [
      asterisk-mbox
    ];
    "asuswrt" = ps: with ps; [
      aioasuswrt
    ];
    "atag" = ps: with ps; [
      pyatag
    ];
    "aten_pe" = ps: with ps; [
      atenpdu
    ];
    "atlanticcityelectric" = ps: with ps; [
    ];
    "atome" = ps: with ps; [
      pyatome
    ];
    "august" = ps: with ps; [
      yalexs
      yalexs-ble
    ];
    "august_ble" = ps: with ps; [
    ];
    "aurora" = ps: with ps; [
      auroranoaa
    ];
    "aurora_abb_powerone" = ps: with ps; [
      aurorapy
    ];
    "aussie_broadband" = ps: with ps; [
      pyaussiebb
    ];
    "auth" = ps: with ps; [
      aiohttp-cors
    ];
    "automation" = ps: with ps; [
      aiohttp-cors
    ];
    "avea" = ps: with ps; [
      avea
    ];
    "avion" = ps: with ps; [
      avion
    ];
    "awair" = ps: with ps; [
      python-awair
    ];
    "aws" = ps: with ps; [
      aiobotocore
    ];
    "axis" = ps: with ps; [
      aiohttp-cors
      axis
      janus
      paho-mqtt
    ];
    "azure_devops" = ps: with ps; [
      aioazuredevops
    ];
    "azure_event_hub" = ps: with ps; [
      azure-eventhub
    ];
    "azure_service_bus" = ps: with ps; [
      azure-servicebus
    ];
    "backup" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      psutil-home-assistant
      securetar
      sqlalchemy
    ];
    "baf" = ps: with ps; [
      aiobafi6
    ];
    "baidu" = ps: with ps; [
    ]; # missing inputs: baidu-aip
    "balboa" = ps: with ps; [
      pybalboa
    ];
    "bayesian" = ps: with ps; [
    ];
    "bbox" = ps: with ps; [
    ]; # missing inputs: pybbox
    "beewi_smartclim" = ps: with ps; [
    ]; # missing inputs: beewi-smartclim
    "bge" = ps: with ps; [
    ];
    "binary_sensor" = ps: with ps; [
    ];
    "bitcoin" = ps: with ps; [
      blockchain
    ];
    "bizkaibus" = ps: with ps; [
      bizkaibus
    ];
    "blackbird" = ps: with ps; [
      pyblackbird
    ];
    "blebox" = ps: with ps; [
      blebox-uniapi
    ];
    "blink" = ps: with ps; [
      blinkpy
    ];
    "blinksticklight" = ps: with ps; [
      blinkstick
    ];
    "bliss_automation" = ps: with ps; [
    ];
    "bloc_blinds" = ps: with ps; [
    ];
    "blockchain" = ps: with ps; [
    ]; # missing inputs: python-blockchain-api
    "bloomsky" = ps: with ps; [
    ];
    "bluemaestro" = ps: with ps; [
      aioesphomeapi
      aiohttp-cors
      aioruuvigateway
      aioshelly
      async-interrupt
      bleak
      bleak-retry-connector
      bluemaestro-ble
      bluetooth-adapters
      bluetooth-auto-recovery
      bluetooth-data-tools
      dbus-fast
      esphome-dashboard-api
      fnv-hash-fast
      hassil
      home-assistant-intents
      ifaddr
      mutagen
      psutil-home-assistant
      pyserial
      pyudev
      sqlalchemy
      webrtc-noise-gain
      zeroconf
    ];
    "blueprint" = ps: with ps; [
    ];
    "bluesound" = ps: with ps; [
      xmltodict
    ];
    "bluetooth" = ps: with ps; [
      aiohttp-cors
      bleak
      bleak-retry-connector
      bluetooth-adapters
      bluetooth-auto-recovery
      bluetooth-data-tools
      dbus-fast
      fnv-hash-fast
      psutil-home-assistant
      pyserial
      pyudev
      sqlalchemy
    ];
    "bluetooth_adapters" = ps: with ps; [
      aioesphomeapi
      aiohttp-cors
      aioruuvigateway
      aioshelly
      async-interrupt
      bleak
      bleak-retry-connector
      bluetooth-adapters
      bluetooth-auto-recovery
      bluetooth-data-tools
      dbus-fast
      esphome-dashboard-api
      fnv-hash-fast
      hassil
      home-assistant-intents
      ifaddr
      mutagen
      psutil-home-assistant
      pyserial
      pyudev
      sqlalchemy
      webrtc-noise-gain
      zeroconf
    ];
    "bluetooth_le_tracker" = ps: with ps; [
      aioesphomeapi
      aiohttp-cors
      aioruuvigateway
      aioshelly
      async-interrupt
      bleak
      bleak-retry-connector
      bluetooth-adapters
      bluetooth-auto-recovery
      bluetooth-data-tools
      dbus-fast
      esphome-dashboard-api
      fnv-hash-fast
      hassil
      home-assistant-intents
      ifaddr
      mutagen
      psutil-home-assistant
      pyserial
      pyudev
      sqlalchemy
      webrtc-noise-gain
      zeroconf
    ];
    "bluetooth_tracker" = ps: with ps; [
      bt-proximity
      pybluez
    ];
    "bmw_connected_drive" = ps: with ps; [
      bimmer-connected
    ];
    "bond" = ps: with ps; [
      bond-async
    ];
    "bosch_shc" = ps: with ps; [
      aiohttp-cors
      boschshcpy
      fnv-hash-fast
      ifaddr
      psutil-home-assistant
      sqlalchemy
      zeroconf
    ];
    "brandt" = ps: with ps; [
    ];
    "braviatv" = ps: with ps; [
      pybravia
    ];
    "brel_home" = ps: with ps; [
    ];
    "broadlink" = ps: with ps; [
      broadlink
    ];
    "brother" = ps: with ps; [
      brother
    ];
    "brottsplatskartan" = ps: with ps; [
      brottsplatskartan
    ];
    "browser" = ps: with ps; [
    ];
    "brunt" = ps: with ps; [
      brunt
    ];
    "bsblan" = ps: with ps; [
      python-bsblan
    ];
    "bswitch" = ps: with ps; [
    ];
    "bt_home_hub_5" = ps: with ps; [
    ]; # missing inputs: bthomehub5-devicelist
    "bt_smarthub" = ps: with ps; [
      btsmarthub_devicelist
    ];
    "bthome" = ps: with ps; [
      aioesphomeapi
      aiohttp-cors
      aioruuvigateway
      aioshelly
      async-interrupt
      bleak
      bleak-retry-connector
      bluetooth-adapters
      bluetooth-auto-recovery
      bluetooth-data-tools
      bthome-ble
      dbus-fast
      esphome-dashboard-api
      fnv-hash-fast
      hassil
      home-assistant-intents
      ifaddr
      mutagen
      psutil-home-assistant
      pyserial
      pyudev
      sqlalchemy
      webrtc-noise-gain
      zeroconf
    ];
    "bticino" = ps: with ps; [
    ];
    "bubendorff" = ps: with ps; [
    ];
    "buienradar" = ps: with ps; [
      buienradar
    ];
    "button" = ps: with ps; [
    ];
    "caldav" = ps: with ps; [
      caldav
    ];
    "calendar" = ps: with ps; [
      aiohttp-cors
    ];
    "camera" = ps: with ps; [
      aiohttp-cors
      pyturbojpeg
    ];
    "canary" = ps: with ps; [
      ha-ffmpeg
      py-canary
    ];
    "cast" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      hass-nabucasa
      hassil
      home-assistant-intents
      ifaddr
      mutagen
      plexapi
      plexauth
      plexwebsocket
      psutil-home-assistant
      pychromecast
      pyturbojpeg
      sqlalchemy
      webrtc-noise-gain
      zeroconf
    ];
    "cert_expiry" = ps: with ps; [
    ];
    "channels" = ps: with ps; [
      pychannels
    ];
    "circuit" = ps: with ps; [
      circuit-webhook
    ];
    "cisco_ios" = ps: with ps; [
      pexpect
    ];
    "cisco_mobility_express" = ps: with ps; [
      ciscomobilityexpress
    ];
    "cisco_webex_teams" = ps: with ps; [
      webexteamssdk
    ];
    "citybikes" = ps: with ps; [
    ];
    "clementine" = ps: with ps; [
    ]; # missing inputs: python-clementine-remote
    "clickatell" = ps: with ps; [
    ];
    "clicksend" = ps: with ps; [
    ];
    "clicksend_tts" = ps: with ps; [
    ];
    "climate" = ps: with ps; [
    ];
    "cloud" = ps: with ps; [
      aiohttp-cors
      hass-nabucasa
      hassil
      home-assistant-intents
      mutagen
      pyturbojpeg
      webrtc-noise-gain
    ];
    "cloudflare" = ps: with ps; [
      pycfdns
    ];
    "cmus" = ps: with ps; [
    ]; # missing inputs: pycmus
    "co2signal" = ps: with ps; [
      co2signal
    ];
    "coinbase" = ps: with ps; [
    ]; # missing inputs: coinbase
    "color_extractor" = ps: with ps; [
      colorthief
    ];
    "comed" = ps: with ps; [
    ];
    "comed_hourly_pricing" = ps: with ps; [
    ];
    "comelit" = ps: with ps; [
      aiocomelit
    ];
    "comfoconnect" = ps: with ps; [
      pycomfoconnect
    ];
    "command_line" = ps: with ps; [
    ];
    "compensation" = ps: with ps; [
      numpy
    ];
    "concord232" = ps: with ps; [
    ]; # missing inputs: concord232
    "coned" = ps: with ps; [
    ];
    "config" = ps: with ps; [
      aiohttp-cors
    ];
    "configurator" = ps: with ps; [
    ];
    "control4" = ps: with ps; [
      pycontrol4
    ];
    "conversation" = ps: with ps; [
      aiohttp-cors
      hassil
      home-assistant-intents
    ];
    "coolmaster" = ps: with ps; [
      pycoolmasternet-async
    ];
    "counter" = ps: with ps; [
    ];
    "cover" = ps: with ps; [
    ];
    "cozytouch" = ps: with ps; [
    ];
    "cppm_tracker" = ps: with ps; [
    ]; # missing inputs: clearpasspy
    "cpuspeed" = ps: with ps; [
      py-cpuinfo
    ];
    "cribl" = ps: with ps; [
    ];
    "crownstone" = ps: with ps; [
      aiohttp-cors
      crownstone-cloud
      crownstone-sse
      crownstone-uart
      fnv-hash-fast
      psutil-home-assistant
      pyserial
      pyudev
      sqlalchemy
    ];
    "cups" = ps: with ps; [
      pycups
    ];
    "currencylayer" = ps: with ps; [
    ];
    "dacia" = ps: with ps; [
    ];
    "daikin" = ps: with ps; [
      pydaikin
    ];
    "danfoss_air" = ps: with ps; [
      pydanfossair
    ];
    "datadog" = ps: with ps; [
      datadog
    ];
    "date" = ps: with ps; [
    ];
    "datetime" = ps: with ps; [
    ];
    "ddwrt" = ps: with ps; [
    ];
    "debugpy" = ps: with ps; [
      debugpy
    ];
    "deconz" = ps: with ps; [
      pydeconz
    ];
    "decora" = ps: with ps; [
      bluepy
    ]; # missing inputs: decora
    "decora_wifi" = ps: with ps; [
    ]; # missing inputs: decora-wifi
    "default_config" = ps: with ps; [
      aiodiscover
      aiohttp-cors
      async-upnp-client
      bleak
      bleak-retry-connector
      bluetooth-adapters
      bluetooth-auto-recovery
      bluetooth-data-tools
      dbus-fast
      fnv-hash-fast
      ha-av
      hass-nabucasa
      hassil
      home-assistant-frontend
      home-assistant-intents
      ifaddr
      janus
      mutagen
      numpy
      pillow
      psutil-home-assistant
      pynacl
      pyserial
      pyturbojpeg
      pyudev
      scapy
      securetar
      sqlalchemy
      webrtc-noise-gain
      zeroconf
    ];
    "delijn" = ps: with ps; [
      pydelijn
    ];
    "delmarva" = ps: with ps; [
    ];
    "deluge" = ps: with ps; [
      deluge-client
    ];
    "demo" = ps: with ps; [
      aiohttp-cors
      hassil
      home-assistant-intents
    ];
    "denon" = ps: with ps; [
    ];
    "denonavr" = ps: with ps; [
      denonavr
    ];
    "derivative" = ps: with ps; [
    ];
    "device_automation" = ps: with ps; [
    ];
    "device_sun_light_trigger" = ps: with ps; [
      aiohttp-cors
      pillow
    ];
    "device_tracker" = ps: with ps; [
    ];
    "devolo_home_control" = ps: with ps; [
      aiohttp-cors
      devolo-home-control-api
      fnv-hash-fast
      ifaddr
      psutil-home-assistant
      sqlalchemy
      zeroconf
    ];
    "devolo_home_network" = ps: with ps; [
      devolo-plc-api
    ];
    "dexcom" = ps: with ps; [
      pydexcom
    ];
    "dhcp" = ps: with ps; [
      aiodiscover
      scapy
    ];
    "diagnostics" = ps: with ps; [
      aiohttp-cors
    ];
    "dialogflow" = ps: with ps; [
      aiohttp-cors
    ];
    "diaz" = ps: with ps; [
    ];
    "digital_loggers" = ps: with ps; [
    ];
    "digital_ocean" = ps: with ps; [
      digital-ocean
    ];
    "directv" = ps: with ps; [
      directv
    ];
    "discogs" = ps: with ps; [
      discogs-client
    ];
    "discord" = ps: with ps; [
      nextcord
    ];
    "discovergy" = ps: with ps; [
      pydiscovergy
    ];
    "dlib_face_detect" = ps: with ps; [
      face-recognition
    ];
    "dlib_face_identify" = ps: with ps; [
      face-recognition
    ];
    "dlink" = ps: with ps; [
    ]; # missing inputs: pyW215
    "dlna_dmr" = ps: with ps; [
      aiohttp-cors
      async-upnp-client
      fnv-hash-fast
      getmac
      ifaddr
      psutil-home-assistant
      sqlalchemy
      zeroconf
    ];
    "dlna_dms" = ps: with ps; [
      aiohttp-cors
      async-upnp-client
      fnv-hash-fast
      ifaddr
      psutil-home-assistant
      sqlalchemy
      zeroconf
    ];
    "dnsip" = ps: with ps; [
      aiodns
    ];
    "dominos" = ps: with ps; [
      aiohttp-cors
    ]; # missing inputs: pizzapi
    "doods" = ps: with ps; [
      pillow
      pydoods
    ];
    "doorbird" = ps: with ps; [
      aiohttp-cors
      doorbirdpy
    ];
    "dooya" = ps: with ps; [
    ];
    "dormakaba_dkey" = ps: with ps; [
      aioesphomeapi
      aiohttp-cors
      aioruuvigateway
      aioshelly
      async-interrupt
      bleak
      bleak-retry-connector
      bluetooth-adapters
      bluetooth-auto-recovery
      bluetooth-data-tools
      dbus-fast
      esphome-dashboard-api
      fnv-hash-fast
      hassil
      home-assistant-intents
      ifaddr
      mutagen
      psutil-home-assistant
      py-dormakaba-dkey
      pyserial
      pyudev
      sqlalchemy
      webrtc-noise-gain
      zeroconf
    ];
    "dovado" = ps: with ps; [
    ]; # missing inputs: dovado
    "downloader" = ps: with ps; [
    ];
    "dremel_3d_printer" = ps: with ps; [
      dremel3dpy
    ];
    "dsmr" = ps: with ps; [
      dsmr-parser
    ];
    "dsmr_reader" = ps: with ps; [
      aiohttp-cors
      janus
      paho-mqtt
    ];
    "dte_energy_bridge" = ps: with ps; [
    ];
    "dublin_bus_transport" = ps: with ps; [
    ];
    "duckdns" = ps: with ps; [
    ];
    "dunehd" = ps: with ps; [
      pdunehd
    ];
    "duotecno" = ps: with ps; [
      pyduotecno
    ];
    "dwd_weather_warnings" = ps: with ps; [
      dwdwfsapi
    ];
    "dweet" = ps: with ps; [
    ]; # missing inputs: dweepy
    "dynalite" = ps: with ps; [
      aiohttp-cors
      dynalite-devices
      fnv-hash-fast
      home-assistant-frontend
      janus
      pillow
      psutil-home-assistant
      sqlalchemy
    ]; # missing inputs: dynalite-panel
    "eafm" = ps: with ps; [
      aioeafm
    ];
    "eastron" = ps: with ps; [
    ];
    "easyenergy" = ps: with ps; [
      easyenergy
    ];
    "ebox" = ps: with ps; [
    ]; # missing inputs: pyebox
    "ebusd" = ps: with ps; [
    ]; # missing inputs: ebusdpy
    "ecoal_boiler" = ps: with ps; [
      ecoaliface
    ];
    "ecobee" = ps: with ps; [
      python-ecobee-api
    ];
    "ecoforest" = ps: with ps; [
      pyecoforest
    ];
    "econet" = ps: with ps; [
      pyeconet
    ];
    "ecovacs" = ps: with ps; [
    ]; # missing inputs: py-sucks
    "ecowitt" = ps: with ps; [
      aioecowitt
      aiohttp-cors
    ];
    "eddystone_temperature" = ps: with ps; [
    ]; # missing inputs: beacontools
    "edimax" = ps: with ps; [
      pyedimax
    ];
    "edl21" = ps: with ps; [
      pysml
    ];
    "efergy" = ps: with ps; [
      pyefergy
    ];
    "egardia" = ps: with ps; [
      pythonegardia
    ];
    "eight_sleep" = ps: with ps; [
    ];
    "electrasmart" = ps: with ps; [
    ]; # missing inputs: pyElectra
    "electric_kiwi" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      psutil-home-assistant
      sqlalchemy
    ]; # missing inputs: electrickiwi-api
    "elgato" = ps: with ps; [
      elgato
    ];
    "eliqonline" = ps: with ps; [
      eliqonline
    ];
    "elkm1" = ps: with ps; [
      aiohttp-cors
      elkm1-lib
      fnv-hash-fast
      ifaddr
      psutil-home-assistant
      sqlalchemy
    ];
    "elmax" = ps: with ps; [
      elmax-api
    ];
    "elv" = ps: with ps; [
      pypca
    ];
    "emby" = ps: with ps; [
      pyemby
    ];
    "emoncms" = ps: with ps; [
    ];
    "emoncms_history" = ps: with ps; [
    ];
    "emonitor" = ps: with ps; [
      aioemonitor
    ];
    "emulated_hue" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      ifaddr
      psutil-home-assistant
      sqlalchemy
    ];
    "emulated_kasa" = ps: with ps; [
      sense-energy
    ];
    "emulated_roku" = ps: with ps; [
      aiohttp-cors
      emulated-roku
      fnv-hash-fast
      ifaddr
      psutil-home-assistant
      sqlalchemy
    ];
    "energie_vanons" = ps: with ps; [
    ];
    "energy" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      psutil-home-assistant
      sqlalchemy
    ];
    "energyzero" = ps: with ps; [
      energyzero
    ];
    "enigma2" = ps: with ps; [
      openwebifpy
    ];
    "enmax" = ps: with ps; [
    ];
    "enocean" = ps: with ps; [
      enocean
    ];
    "enphase_envoy" = ps: with ps; [
      pyenphase
    ];
    "entur_public_transport" = ps: with ps; [
      enturclient
    ];
    "environment_canada" = ps: with ps; [
      env-canada
    ];
    "envisalink" = ps: with ps; [
      pyenvisalink
    ];
    "ephember" = ps: with ps; [
      pyephember
    ];
    "epson" = ps: with ps; [
      epson-projector
    ];
    "epsonworkforce" = ps: with ps; [
    ]; # missing inputs: epsonprinter
    "eq3btsmart" = ps: with ps; [
      aioesphomeapi
      aiohttp-cors
      aioruuvigateway
      aioshelly
      async-interrupt
      bleak
      bleak-retry-connector
      bluetooth-adapters
      bluetooth-auto-recovery
      bluetooth-data-tools
      construct
      dbus-fast
      esphome-dashboard-api
      fnv-hash-fast
      hassil
      home-assistant-intents
      ifaddr
      mutagen
      psutil-home-assistant
      pyserial
      pyudev
      sqlalchemy
      webrtc-noise-gain
      zeroconf
    ]; # missing inputs: python-eq3bt
    "escea" = ps: with ps; [
      pescea
    ];
    "esera_onewire" = ps: with ps; [
    ];
    "esphome" = ps: with ps; [
      aioesphomeapi
      aiohttp-cors
      async-interrupt
      bleak
      bleak-retry-connector
      bluetooth-adapters
      bluetooth-auto-recovery
      bluetooth-data-tools
      dbus-fast
      esphome-dashboard-api
      fnv-hash-fast
      hassil
      home-assistant-intents
      ifaddr
      mutagen
      psutil-home-assistant
      pyserial
      pyudev
      sqlalchemy
      webrtc-noise-gain
      zeroconf
    ];
    "etherscan" = ps: with ps; [
    ]; # missing inputs: python-etherscan-api
    "eufy" = ps: with ps; [
      lakeside
    ];
    "eufylife_ble" = ps: with ps; [
      aioesphomeapi
      aiohttp-cors
      aioruuvigateway
      aioshelly
      async-interrupt
      bleak
      bleak-retry-connector
      bluetooth-adapters
      bluetooth-auto-recovery
      bluetooth-data-tools
      dbus-fast
      esphome-dashboard-api
      eufylife-ble-client
      fnv-hash-fast
      hassil
      home-assistant-intents
      ifaddr
      mutagen
      psutil-home-assistant
      pyserial
      pyudev
      sqlalchemy
      webrtc-noise-gain
      zeroconf
    ];
    "event" = ps: with ps; [
    ];
    "evergy" = ps: with ps; [
    ];
    "everlights" = ps: with ps; [
      pyeverlights
    ];
    "evil_genius_labs" = ps: with ps; [
      pyevilgenius
    ];
    "evohome" = ps: with ps; [
      evohome-async
    ];
    "ezviz" = ps: with ps; [
      ha-ffmpeg
      pyezviz
    ];
    "faa_delays" = ps: with ps; [
      faadelays
    ];
    "facebook" = ps: with ps; [
    ];
    "facebox" = ps: with ps; [
    ];
    "fail2ban" = ps: with ps; [
    ];
    "familyhub" = ps: with ps; [
      python-family-hub-local
    ];
    "fan" = ps: with ps; [
    ];
    "fastdotcom" = ps: with ps; [
    ]; # missing inputs: fastdotcom
    "feedreader" = ps: with ps; [
      feedparser
    ];
    "ffmpeg" = ps: with ps; [
      ha-ffmpeg
    ];
    "ffmpeg_motion" = ps: with ps; [
      ha-ffmpeg
    ];
    "ffmpeg_noise" = ps: with ps; [
      ha-ffmpeg
    ];
    "fibaro" = ps: with ps; [
      pyfibaro
    ];
    "fido" = ps: with ps; [
      pyfido
    ];
    "file" = ps: with ps; [
      file-read-backwards
    ];
    "file_upload" = ps: with ps; [
      aiohttp-cors
      janus
    ];
    "filesize" = ps: with ps; [
    ];
    "filter" = ps: with ps; [
      fnv-hash-fast
      psutil-home-assistant
      sqlalchemy
    ];
    "fints" = ps: with ps; [
      fints
    ];
    "fire_tv" = ps: with ps; [
    ];
    "fireservicerota" = ps: with ps; [
      pyfireservicerota
    ];
    "firmata" = ps: with ps; [
      pymata-express
    ];
    "fitbit" = ps: with ps; [
      aiohttp-cors
      fitbit
      fnv-hash-fast
      psutil-home-assistant
      sqlalchemy
    ];
    "fivem" = ps: with ps; [
      fivem-api
    ];
    "fixer" = ps: with ps; [
      fixerio
    ];
    "fjaraskupan" = ps: with ps; [
      aioesphomeapi
      aiohttp-cors
      aioruuvigateway
      aioshelly
      async-interrupt
      bleak
      bleak-retry-connector
      bluetooth-adapters
      bluetooth-auto-recovery
      bluetooth-data-tools
      dbus-fast
      esphome-dashboard-api
      fjaraskupan
      fnv-hash-fast
      hassil
      home-assistant-intents
      ifaddr
      mutagen
      psutil-home-assistant
      pyserial
      pyudev
      sqlalchemy
      webrtc-noise-gain
      zeroconf
    ];
    "fleetgo" = ps: with ps; [
      ritassist
    ];
    "flexit" = ps: with ps; [
      pymodbus
    ];
    "flexom" = ps: with ps; [
    ];
    "flic" = ps: with ps; [
      pyflic
    ];
    "flick_electric" = ps: with ps; [
      pyflick
    ];
    "flipr" = ps: with ps; [
      flipr-api
    ];
    "flo" = ps: with ps; [
      aioflo
    ];
    "flock" = ps: with ps; [
    ];
    "flume" = ps: with ps; [
      pyflume
    ];
    "flux" = ps: with ps; [
    ];
    "flux_led" = ps: with ps; [
      aiohttp-cors
      flux-led
      fnv-hash-fast
      ifaddr
      psutil-home-assistant
      sqlalchemy
    ];
    "folder" = ps: with ps; [
    ];
    "folder_watcher" = ps: with ps; [
      watchdog
    ];
    "foobot" = ps: with ps; [
      foobot-async
    ];
    "forecast_solar" = ps: with ps; [
      forecast-solar
    ];
    "forked_daapd" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      psutil-home-assistant
      spotipy
      sqlalchemy
    ]; # missing inputs: pyforked-daapd pylibrespot-java
    "fortios" = ps: with ps; [
      fortiosapi
    ];
    "foscam" = ps: with ps; [
      libpyfoscam
    ];
    "foursquare" = ps: with ps; [
      aiohttp-cors
    ];
    "free_mobile" = ps: with ps; [
    ]; # missing inputs: freesms
    "freebox" = ps: with ps; [
      freebox-api
      ha-ffmpeg
    ];
    "freedns" = ps: with ps; [
    ];
    "freedompro" = ps: with ps; [
      pyfreedompro
    ];
    "fritz" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      fritzconnection
      ifaddr
      psutil-home-assistant
      sqlalchemy
      xmltodict
    ]
    ++ fritzconnection.optional-dependencies.qr;
    "fritzbox" = ps: with ps; [
      pyfritzhome
    ];
    "fritzbox_callmonitor" = ps: with ps; [
      fritzconnection
    ]
    ++ fritzconnection.optional-dependencies.qr;
    "fronius" = ps: with ps; [
      pyfronius
    ];
    "frontend" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      home-assistant-frontend
      janus
      pillow
      psutil-home-assistant
      sqlalchemy
    ];
    "frontier_silicon" = ps: with ps; [
      afsapi
    ];
    "fully_kiosk" = ps: with ps; [
      python-fullykiosk
    ];
    "futurenow" = ps: with ps; [
      pyfnip
    ];
    "garadget" = ps: with ps; [
    ];
    "garages_amsterdam" = ps: with ps; [
      odp-amsterdam
    ];
    "gardena_bluetooth" = ps: with ps; [
      aioesphomeapi
      aiohttp-cors
      aioruuvigateway
      aioshelly
      async-interrupt
      bleak
      bleak-retry-connector
      bluetooth-adapters
      bluetooth-auto-recovery
      bluetooth-data-tools
      dbus-fast
      esphome-dashboard-api
      fnv-hash-fast
      hassil
      home-assistant-intents
      ifaddr
      mutagen
      psutil-home-assistant
      pyserial
      pyudev
      sqlalchemy
      webrtc-noise-gain
      zeroconf
    ]; # missing inputs: gardena-bluetooth
    "gaviota" = ps: with ps; [
    ];
    "gc100" = ps: with ps; [
    ]; # missing inputs: python-gc100
    "gdacs" = ps: with ps; [
      aio-georss-gdacs
    ];
    "generic" = ps: with ps; [
      aiohttp-cors
      ha-av
      pillow
    ];
    "generic_hygrostat" = ps: with ps; [
    ];
    "generic_thermostat" = ps: with ps; [
      fnv-hash-fast
      psutil-home-assistant
      sqlalchemy
    ];
    "geniushub" = ps: with ps; [
      geniushub-client
    ];
    "geo_json_events" = ps: with ps; [
      aio-geojson-generic-client
    ];
    "geo_location" = ps: with ps; [
    ];
    "geo_rss_events" = ps: with ps; [
      georss-generic-client
    ];
    "geocaching" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      geocachingapi
      psutil-home-assistant
      sqlalchemy
    ];
    "geofency" = ps: with ps; [
      aiohttp-cors
    ];
    "geonetnz_quakes" = ps: with ps; [
      aio-geojson-geonetnz-quakes
    ];
    "geonetnz_volcano" = ps: with ps; [
      aio-geojson-geonetnz-volcano
    ];
    "gios" = ps: with ps; [
      gios
    ];
    "github" = ps: with ps; [
      aiogithubapi
    ];
    "gitlab_ci" = ps: with ps; [
      python-gitlab
    ];
    "gitter" = ps: with ps; [
    ]; # missing inputs: gitterpy
    "glances" = ps: with ps; [
      glances-api
    ];
    "goalzero" = ps: with ps; [
      goalzero
    ];
    "gogogate2" = ps: with ps; [
      ismartgate
    ];
    "goodwe" = ps: with ps; [
      goodwe
    ];
    "google" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      gcal-sync
      oauth2client
      psutil-home-assistant
      sqlalchemy
    ];
    "google_assistant" = ps: with ps; [
      aiohttp-cors
      pyturbojpeg
    ];
    "google_assistant_sdk" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      gassist-text
      psutil-home-assistant
      sqlalchemy
    ];
    "google_cloud" = ps: with ps; [
      google-cloud-texttospeech
    ];
    "google_domains" = ps: with ps; [
    ];
    "google_generative_ai_conversation" = ps: with ps; [
      aiohttp-cors
      google-generativeai
      hassil
      home-assistant-intents
    ];
    "google_mail" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      google-api-python-client
      psutil-home-assistant
      sqlalchemy
    ];
    "google_maps" = ps: with ps; [
      locationsharinglib
    ];
    "google_pubsub" = ps: with ps; [
      google-cloud-pubsub
    ];
    "google_sheets" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      gspread
      psutil-home-assistant
      sqlalchemy
    ];
    "google_tasks" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      google-api-python-client
      psutil-home-assistant
      sqlalchemy
    ];
    "google_translate" = ps: with ps; [
      gtts
    ];
    "google_travel_time" = ps: with ps; [
      googlemaps
    ];
    "google_wifi" = ps: with ps; [
    ];
    "govee_ble" = ps: with ps; [
      aioesphomeapi
      aiohttp-cors
      aioruuvigateway
      aioshelly
      async-interrupt
      bleak
      bleak-retry-connector
      bluetooth-adapters
      bluetooth-auto-recovery
      bluetooth-data-tools
      dbus-fast
      esphome-dashboard-api
      fnv-hash-fast
      govee-ble
      hassil
      home-assistant-intents
      ifaddr
      mutagen
      psutil-home-assistant
      pyserial
      pyudev
      sqlalchemy
      webrtc-noise-gain
      zeroconf
    ];
    "gpsd" = ps: with ps; [
      gps3
    ];
    "gpslogger" = ps: with ps; [
      aiohttp-cors
    ];
    "graphite" = ps: with ps; [
    ];
    "gree" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      greeclimate
      ifaddr
      psutil-home-assistant
      sqlalchemy
    ];
    "greeneye_monitor" = ps: with ps; [
      greeneye-monitor
    ];
    "greenwave" = ps: with ps; [
    ]; # missing inputs: greenwavereality
    "group" = ps: with ps; [
    ];
    "growatt_server" = ps: with ps; [
      growattserver
    ];
    "gstreamer" = ps: with ps; [
    ]; # missing inputs: gstreamer-player
    "gtfs" = ps: with ps; [
      pygtfs
    ];
    "guardian" = ps: with ps; [
      aioguardian
    ];
    "habitica" = ps: with ps; [
      habitipy
    ];
    "hardkernel" = ps: with ps; [
      aiohttp-cors
      psutil-home-assistant
    ];
    "hardware" = ps: with ps; [
      psutil-home-assistant
    ];
    "harman_kardon_avr" = ps: with ps; [
      hkavr
    ];
    "harmony" = ps: with ps; [
      aioharmony
    ];
    "hassio" = ps: with ps; [
      aiohttp-cors
    ];
    "havana_shade" = ps: with ps; [
    ];
    "haveibeenpwned" = ps: with ps; [
    ];
    "hddtemp" = ps: with ps; [
    ];
    "hdmi_cec" = ps: with ps; [
      pycec
    ];
    "heatmiser" = ps: with ps; [
    ]; # missing inputs: heatmiserV3
    "heiwa" = ps: with ps; [
    ];
    "heos" = ps: with ps; [
      pyheos
    ];
    "here_travel_time" = ps: with ps; [
      here-routing
      here-transit
    ];
    "hexaom" = ps: with ps; [
    ];
    "hi_kumo" = ps: with ps; [
    ];
    "hikvision" = ps: with ps; [
    ]; # missing inputs: pyHik
    "hikvisioncam" = ps: with ps; [
      hikvision
    ];
    "hisense_aehw4a1" = ps: with ps; [
      pyaehw4a1
    ];
    "history" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      psutil-home-assistant
      sqlalchemy
    ];
    "history_stats" = ps: with ps; [
      fnv-hash-fast
      psutil-home-assistant
      sqlalchemy
    ];
    "hitron_coda" = ps: with ps; [
    ];
    "hive" = ps: with ps; [
      pyhiveapi
    ];
    "hlk_sw16" = ps: with ps; [
      hlk-sw16
    ];
    "home_connect" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      homeconnect
      psutil-home-assistant
      sqlalchemy
    ];
    "home_plus_control" = ps: with ps; [
      aiohttp-cors
      homepluscontrol
    ];
    "homeassistant" = ps: with ps; [
    ];
    "homeassistant_alerts" = ps: with ps; [
    ];
    "homeassistant_green" = ps: with ps; [
      aiohttp-cors
      bellows
      fnv-hash-fast
      janus
      pillow
      psutil-home-assistant
      pyserial
      pyserial-asyncio
      pyserial-asyncio-fast
      pyudev
      sqlalchemy
      universal-silabs-flasher
      zha-quirks
      zigpy
      zigpy-deconz
      zigpy-xbee
      zigpy-zigate
      zigpy-znp
    ];
    "homeassistant_hardware" = ps: with ps; [
      aiohttp-cors
      bellows
      fnv-hash-fast
      janus
      pillow
      psutil-home-assistant
      pyserial
      pyserial-asyncio
      pyserial-asyncio-fast
      pyudev
      sqlalchemy
      universal-silabs-flasher
      zha-quirks
      zigpy
      zigpy-deconz
      zigpy-xbee
      zigpy-zigate
      zigpy-znp
    ];
    "homeassistant_sky_connect" = ps: with ps; [
      aiohttp-cors
      bellows
      fnv-hash-fast
      janus
      pillow
      psutil-home-assistant
      pyserial
      pyserial-asyncio
      pyserial-asyncio-fast
      pyudev
      sqlalchemy
      universal-silabs-flasher
      zha-quirks
      zigpy
      zigpy-deconz
      zigpy-xbee
      zigpy-zigate
      zigpy-znp
    ];
    "homeassistant_yellow" = ps: with ps; [
      aiohttp-cors
      bellows
      fnv-hash-fast
      janus
      pillow
      psutil-home-assistant
      pyserial
      pyserial-asyncio
      pyserial-asyncio-fast
      pyudev
      sqlalchemy
      universal-silabs-flasher
      zha-quirks
      zigpy
      zigpy-deconz
      zigpy-xbee
      zigpy-zigate
      zigpy-znp
    ];
    "homekit" = ps: with ps; [
      aiohttp-cors
      base36
      fnv-hash-fast
      ha-ffmpeg
      hap-python
      ifaddr
      psutil-home-assistant
      pyqrcode
      pyturbojpeg
      sqlalchemy
      zeroconf
    ];
    "homekit_controller" = ps: with ps; [
      aioesphomeapi
      aiohomekit
      aiohttp-cors
      aioruuvigateway
      aioshelly
      async-interrupt
      bleak
      bleak-retry-connector
      bluetooth-adapters
      bluetooth-auto-recovery
      bluetooth-data-tools
      dbus-fast
      esphome-dashboard-api
      fnv-hash-fast
      hassil
      home-assistant-intents
      ifaddr
      mutagen
      psutil-home-assistant
      pyroute2
      pyserial
      python-otbr-api
      pyudev
      sqlalchemy
      webrtc-noise-gain
      zeroconf
    ];
    "homematic" = ps: with ps; [
      pyhomematic
    ];
    "homematicip_cloud" = ps: with ps; [
      homematicip
    ];
    "homewizard" = ps: with ps; [
      python-homewizard-energy
    ];
    "homeworks" = ps: with ps; [
      pyhomeworks
    ];
    "honeywell" = ps: with ps; [
      aiosomecomfort
    ];
    "horizon" = ps: with ps; [
    ]; # missing inputs: horimote
    "hp_ilo" = ps: with ps; [
      python-hpilo
    ];
    "html5" = ps: with ps; [
      aiohttp-cors
      pywebpush
    ];
    "http" = ps: with ps; [
      aiohttp-cors
    ];
    "huawei_lte" = ps: with ps; [
      huawei-lte-api
      stringcase
      url-normalize
    ];
    "hue" = ps: with ps; [
      aiohue
    ];
    "huisbaasje" = ps: with ps; [
      energyflip-client
    ];
    "humidifier" = ps: with ps; [
    ];
    "hunterdouglas_powerview" = ps: with ps; [
      aiopvapi
    ];
    "hurrican_shutters_wholesale" = ps: with ps; [
    ];
    "hvv_departures" = ps: with ps; [
      pygti
    ];
    "hydrawise" = ps: with ps; [
      pydrawise
    ];
    "hyperion" = ps: with ps; [
      hyperion-py
    ];
    "ialarm" = ps: with ps; [
      pyialarm
    ];
    "iammeter" = ps: with ps; [
      iammeter
    ];
    "iaqualink" = ps: with ps; [
      h2
      iaqualink
    ];
    "ibeacon" = ps: with ps; [
      aioesphomeapi
      aiohttp-cors
      aioruuvigateway
      aioshelly
      async-interrupt
      bleak
      bleak-retry-connector
      bluetooth-adapters
      bluetooth-auto-recovery
      bluetooth-data-tools
      dbus-fast
      esphome-dashboard-api
      fnv-hash-fast
      hassil
      home-assistant-intents
      ibeacon-ble
      ifaddr
      mutagen
      psutil-home-assistant
      pyserial
      pyudev
      sqlalchemy
      webrtc-noise-gain
      zeroconf
    ];
    "icloud" = ps: with ps; [
      pyicloud
    ];
    "idasen_desk" = ps: with ps; [
      aioesphomeapi
      aiohttp-cors
      aioruuvigateway
      aioshelly
      async-interrupt
      bleak
      bleak-retry-connector
      bluetooth-adapters
      bluetooth-auto-recovery
      bluetooth-data-tools
      dbus-fast
      esphome-dashboard-api
      fnv-hash-fast
      hassil
      home-assistant-intents
      ifaddr
      mutagen
      psutil-home-assistant
      pyserial
      pyudev
      sqlalchemy
      webrtc-noise-gain
      zeroconf
    ]; # missing inputs: idasen-ha
    "idteck_prox" = ps: with ps; [
    ]; # missing inputs: rfk101py
    "ifttt" = ps: with ps; [
      aiohttp-cors
      pyfttt
    ];
    "iglo" = ps: with ps; [
    ]; # missing inputs: iglo
    "ign_sismologia" = ps: with ps; [
      georss-ign-sismologia-client
    ];
    "ihc" = ps: with ps; [
      defusedxml
    ]; # missing inputs: ihcsdk
    "image" = ps: with ps; [
      aiohttp-cors
    ];
    "image_processing" = ps: with ps; [
      aiohttp-cors
      pyturbojpeg
    ];
    "image_upload" = ps: with ps; [
      aiohttp-cors
      pillow
    ];
    "imap" = ps: with ps; [
      aiohttp-cors
      aioimaplib
    ];
    "improv_ble" = ps: with ps; [
      aioesphomeapi
      aiohttp-cors
      aioruuvigateway
      aioshelly
      async-interrupt
      bleak
      bleak-retry-connector
      bluetooth-adapters
      bluetooth-auto-recovery
      bluetooth-data-tools
      dbus-fast
      esphome-dashboard-api
      fnv-hash-fast
      hassil
      home-assistant-intents
      ifaddr
      mutagen
      psutil-home-assistant
      pyserial
      pyudev
      sqlalchemy
      webrtc-noise-gain
      zeroconf
    ]; # missing inputs: py-improv-ble-client
    "incomfort" = ps: with ps; [
      incomfort-client
    ];
    "influxdb" = ps: with ps; [
      influxdb
      influxdb-client
    ];
    "inkbird" = ps: with ps; [
      aioesphomeapi
      aiohttp-cors
      aioruuvigateway
      aioshelly
      async-interrupt
      bleak
      bleak-retry-connector
      bluetooth-adapters
      bluetooth-auto-recovery
      bluetooth-data-tools
      dbus-fast
      esphome-dashboard-api
      fnv-hash-fast
      hassil
      home-assistant-intents
      ifaddr
      inkbird-ble
      mutagen
      psutil-home-assistant
      pyserial
      pyudev
      sqlalchemy
      webrtc-noise-gain
      zeroconf
    ];
    "input_boolean" = ps: with ps; [
    ];
    "input_button" = ps: with ps; [
    ];
    "input_datetime" = ps: with ps; [
    ];
    "input_number" = ps: with ps; [
    ];
    "input_select" = ps: with ps; [
    ];
    "input_text" = ps: with ps; [
    ];
    "inspired_shades" = ps: with ps; [
    ];
    "insteon" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      home-assistant-frontend
      insteon-frontend-home-assistant
      janus
      pillow
      psutil-home-assistant
      pyinsteon
      pyserial
      pyudev
      sqlalchemy
    ];
    "integration" = ps: with ps; [
    ];
    "intellifire" = ps: with ps; [
      intellifire4py
    ];
    "intent" = ps: with ps; [
      aiohttp-cors
    ];
    "intent_script" = ps: with ps; [
    ];
    "intesishome" = ps: with ps; [
      pyintesishome
    ];
    "ios" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      ifaddr
      psutil-home-assistant
      sqlalchemy
      zeroconf
    ];
    "iotawatt" = ps: with ps; [
    ]; # missing inputs: ha-iotawattpy
    "iperf3" = ps: with ps; [
    ]; # missing inputs: iperf3
    "ipma" = ps: with ps; [
      pyipma
    ];
    "ipp" = ps: with ps; [
      pyipp
    ];
    "iqvia" = ps: with ps; [
      numpy
      pyiqvia
    ];
    "irish_rail_transport" = ps: with ps; [
    ]; # missing inputs: pyirishrail
    "islamic_prayer_times" = ps: with ps; [
      prayer-times-calculator
    ];
    "ismartwindow" = ps: with ps; [
    ];
    "iss" = ps: with ps; [
    ]; # missing inputs: pyiss
    "isy994" = ps: with ps; [
      pyisy
    ];
    "itach" = ps: with ps; [
    ]; # missing inputs: pyitachip2ir
    "itunes" = ps: with ps; [
    ];
    "izone" = ps: with ps; [
      python-izone
    ];
    "jellyfin" = ps: with ps; [
      jellyfin-apiclient-python
    ];
    "jewish_calendar" = ps: with ps; [
      hdate
    ];
    "joaoapps_join" = ps: with ps; [
    ]; # missing inputs: python-join-api
    "juicenet" = ps: with ps; [
      python-juicenet
    ];
    "justnimbus" = ps: with ps; [
      justnimbus
    ];
    "jvc_projector" = ps: with ps; [
    ]; # missing inputs: pyjvcprojector
    "kaiterra" = ps: with ps; [
    ]; # missing inputs: kaiterra-async-client
    "kaleidescape" = ps: with ps; [
      pykaleidescape
    ];
    "kankun" = ps: with ps; [
    ];
    "keba" = ps: with ps; [
      keba-kecontact
    ];
    "keenetic_ndms2" = ps: with ps; [
      ndms2-client
    ];
    "kef" = ps: with ps; [
      aiokef
      getmac
    ];
    "kegtron" = ps: with ps; [
      aioesphomeapi
      aiohttp-cors
      aioruuvigateway
      aioshelly
      async-interrupt
      bleak
      bleak-retry-connector
      bluetooth-adapters
      bluetooth-auto-recovery
      bluetooth-data-tools
      dbus-fast
      esphome-dashboard-api
      fnv-hash-fast
      hassil
      home-assistant-intents
      ifaddr
      kegtron-ble
      mutagen
      psutil-home-assistant
      pyserial
      pyudev
      sqlalchemy
      webrtc-noise-gain
      zeroconf
    ];
    "keyboard" = ps: with ps; [
    ]; # missing inputs: pyuserinput
    "keyboard_remote" = ps: with ps; [
      asyncinotify
      evdev
    ];
    "keymitt_ble" = ps: with ps; [
      aioesphomeapi
      aiohttp-cors
      aioruuvigateway
      aioshelly
      async-interrupt
      bleak
      bleak-retry-connector
      bluetooth-adapters
      bluetooth-auto-recovery
      bluetooth-data-tools
      dbus-fast
      esphome-dashboard-api
      fnv-hash-fast
      hassil
      home-assistant-intents
      ifaddr
      mutagen
      psutil-home-assistant
      pymicrobot
      pyserial
      pyudev
      sqlalchemy
      webrtc-noise-gain
      zeroconf
    ];
    "kira" = ps: with ps; [
      pykira
    ];
    "kitchen_sink" = ps: with ps; [
      fnv-hash-fast
      psutil-home-assistant
      sqlalchemy
    ];
    "kiwi" = ps: with ps; [
      kiwiki-client
    ];
    "kmtronic" = ps: with ps; [
      pykmtronic
    ];
    "knx" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      home-assistant-frontend
      janus
      knx-frontend
      pillow
      psutil-home-assistant
      sqlalchemy
      xknx
      xknxproject
    ];
    "kodi" = ps: with ps; [
      aiohttp-cors
      pykodi
    ];
    "konnected" = ps: with ps; [
      aiohttp-cors
      konnected
    ];
    "kostal_plenticore" = ps: with ps; [
      pykoplenti
    ];
    "kraken" = ps: with ps; [
      krakenex
      pykrakenapi
    ];
    "kulersky" = ps: with ps; [
      pykulersky
    ];
    "kwb" = ps: with ps; [
      pykwb
    ];
    "lacrosse" = ps: with ps; [
      pylacrosse
    ];
    "lacrosse_view" = ps: with ps; [
    ]; # missing inputs: lacrosse-view
    "lametric" = ps: with ps; [
      aiohttp-cors
      demetriek
      fnv-hash-fast
      psutil-home-assistant
      sqlalchemy
    ];
    "landisgyr_heat_meter" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      psutil-home-assistant
      pyserial
      pyudev
      sqlalchemy
      ultraheat-api
    ];
    "lannouncer" = ps: with ps; [
    ];
    "lastfm" = ps: with ps; [
      pylast
    ];
    "launch_library" = ps: with ps; [
      pylaunches
    ];
    "laundrify" = ps: with ps; [
      laundrify-aio
    ];
    "lawn_mower" = ps: with ps; [
    ];
    "lcn" = ps: with ps; [
      pypck
    ];
    "ld2410_ble" = ps: with ps; [
      aioesphomeapi
      aiohttp-cors
      aioruuvigateway
      aioshelly
      async-interrupt
      bleak
      bleak-retry-connector
      bluetooth-adapters
      bluetooth-auto-recovery
      bluetooth-data-tools
      dbus-fast
      esphome-dashboard-api
      fnv-hash-fast
      hassil
      home-assistant-intents
      ifaddr
      ld2410-ble
      mutagen
      psutil-home-assistant
      pyserial
      pyudev
      sqlalchemy
      webrtc-noise-gain
      zeroconf
    ];
    "led_ble" = ps: with ps; [
      aioesphomeapi
      aiohttp-cors
      aioruuvigateway
      aioshelly
      async-interrupt
      bleak
      bleak-retry-connector
      bluetooth-adapters
      bluetooth-auto-recovery
      bluetooth-data-tools
      dbus-fast
      esphome-dashboard-api
      fnv-hash-fast
      hassil
      home-assistant-intents
      ifaddr
      led-ble
      mutagen
      psutil-home-assistant
      pyserial
      pyudev
      sqlalchemy
      webrtc-noise-gain
      zeroconf
    ];
    "legrand" = ps: with ps; [
    ];
    "lg_netcast" = ps: with ps; [
      pylgnetcast
    ];
    "lg_soundbar" = ps: with ps; [
      temescal
    ];
    "lidarr" = ps: with ps; [
      aiopyarr
    ];
    "life360" = ps: with ps; [
      life360
    ];
    "lifx" = ps: with ps; [
      aiohttp-cors
      aiolifx
      aiolifx-effects
      aiolifx-themes
      fnv-hash-fast
      ifaddr
      psutil-home-assistant
      sqlalchemy
    ];
    "lifx_cloud" = ps: with ps; [
    ];
    "light" = ps: with ps; [
    ];
    "lightwave" = ps: with ps; [
      lightwave
    ];
    "limitlessled" = ps: with ps; [
      limitlessled
    ];
    "linksys_smart" = ps: with ps; [
    ];
    "linode" = ps: with ps; [
      linode-api
    ];
    "linux_battery" = ps: with ps; [
      batinfo
    ];
    "lirc" = ps: with ps; [
    ]; # missing inputs: python-lirc
    "litejet" = ps: with ps; [
    ]; # missing inputs: pylitejet
    "litterrobot" = ps: with ps; [
      pylitterbot
    ];
    "livisi" = ps: with ps; [
      aiolivisi
    ];
    "llamalab_automate" = ps: with ps; [
    ];
    "local_calendar" = ps: with ps; [
      ical
    ];
    "local_file" = ps: with ps; [
    ];
    "local_ip" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      ifaddr
      psutil-home-assistant
      sqlalchemy
    ];
    "local_todo" = ps: with ps; [
      ical
    ];
    "locative" = ps: with ps; [
      aiohttp-cors
    ];
    "lock" = ps: with ps; [
    ];
    "logbook" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      home-assistant-frontend
      janus
      pillow
      psutil-home-assistant
      sqlalchemy
    ];
    "logentries" = ps: with ps; [
    ];
    "logger" = ps: with ps; [
    ];
    "logi_circle" = ps: with ps; [
      aiohttp-cors
      ha-ffmpeg
      logi-circle
    ];
    "london_air" = ps: with ps; [
    ];
    "london_underground" = ps: with ps; [
    ]; # missing inputs: london-tube-status
    "lookin" = ps: with ps; [
      aiolookin
    ];
    "loqed" = ps: with ps; [
      aiohttp-cors
      hass-nabucasa
      hassil
      home-assistant-intents
      loqedapi
      mutagen
      pyturbojpeg
      webrtc-noise-gain
    ];
    "lovelace" = ps: with ps; [
    ];
    "luci" = ps: with ps; [
      openwrt-luci-rpc
    ];
    "luftdaten" = ps: with ps; [
      luftdaten
    ];
    "lupusec" = ps: with ps; [
      lupupy
    ];
    "lutron" = ps: with ps; [
      pylutron
    ];
    "lutron_caseta" = ps: with ps; [
      pylutron-caseta
    ];
    "luxaflex" = ps: with ps; [
    ];
    "lw12wifi" = ps: with ps; [
    ]; # missing inputs: lw12
    "lyric" = ps: with ps; [
      aiohttp-cors
      aiolyric
      fnv-hash-fast
      psutil-home-assistant
      sqlalchemy
    ];
    "mailbox" = ps: with ps; [
      aiohttp-cors
    ];
    "mailgun" = ps: with ps; [
      aiohttp-cors
      pymailgunner
    ];
    "manual" = ps: with ps; [
    ];
    "manual_mqtt" = ps: with ps; [
      aiohttp-cors
      janus
      paho-mqtt
    ];
    "map" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      home-assistant-frontend
      janus
      pillow
      psutil-home-assistant
      sqlalchemy
    ];
    "marantz" = ps: with ps; [
    ];
    "martec" = ps: with ps; [
    ];
    "marytts" = ps: with ps; [
    ]; # missing inputs: speak2mary
    "mastodon" = ps: with ps; [
      mastodon-py
    ];
    "matrix" = ps: with ps; [
      matrix-nio
      pillow
    ];
    "matter" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      psutil-home-assistant
      python-matter-server
      sqlalchemy
    ];
    "maxcube" = ps: with ps; [
      maxcube-api
    ];
    "mazda" = ps: with ps; [
    ];
    "meater" = ps: with ps; [
      meater-python
    ];
    "medcom_ble" = ps: with ps; [
      aioesphomeapi
      aiohttp-cors
      aioruuvigateway
      aioshelly
      async-interrupt
      bleak
      bleak-retry-connector
      bluetooth-adapters
      bluetooth-auto-recovery
      bluetooth-data-tools
      dbus-fast
      esphome-dashboard-api
      fnv-hash-fast
      hassil
      home-assistant-intents
      ifaddr
      mutagen
      psutil-home-assistant
      pyserial
      pyudev
      sqlalchemy
      webrtc-noise-gain
      zeroconf
    ]; # missing inputs: medcom-ble
    "media_extractor" = ps: with ps; [
      aiohttp-cors
      yt-dlp
    ];
    "media_player" = ps: with ps; [
      aiohttp-cors
    ];
    "media_source" = ps: with ps; [
      aiohttp-cors
    ];
    "mediaroom" = ps: with ps; [
      pymediaroom
    ];
    "melcloud" = ps: with ps; [
      pymelcloud
    ];
    "melissa" = ps: with ps; [
    ]; # missing inputs: py-melissa-climate
    "melnor" = ps: with ps; [
      aioesphomeapi
      aiohttp-cors
      aioruuvigateway
      aioshelly
      async-interrupt
      bleak
      bleak-retry-connector
      bluetooth-adapters
      bluetooth-auto-recovery
      bluetooth-data-tools
      dbus-fast
      esphome-dashboard-api
      fnv-hash-fast
      hassil
      home-assistant-intents
      ifaddr
      mutagen
      psutil-home-assistant
      pyserial
      pyudev
      sqlalchemy
      webrtc-noise-gain
      zeroconf
    ]; # missing inputs: melnor-bluetooth
    "meraki" = ps: with ps; [
      aiohttp-cors
    ];
    "message_bird" = ps: with ps; [
      messagebird
    ];
    "met" = ps: with ps; [
      pymetno
    ];
    "met_eireann" = ps: with ps; [
      pymeteireann
    ];
    "meteo_france" = ps: with ps; [
      meteofrance-api
    ];
    "meteoalarm" = ps: with ps; [
      meteoalertapi
    ];
    "meteoclimatic" = ps: with ps; [
      pymeteoclimatic
    ];
    "metoffice" = ps: with ps; [
      datapoint
    ];
    "mfi" = ps: with ps; [
    ]; # missing inputs: mficlient
    "microsoft" = ps: with ps; [
    ]; # missing inputs: pycsspeechtts
    "microsoft_face" = ps: with ps; [
      aiohttp-cors
      pyturbojpeg
    ];
    "microsoft_face_detect" = ps: with ps; [
      aiohttp-cors
      pyturbojpeg
    ];
    "microsoft_face_identify" = ps: with ps; [
      aiohttp-cors
      pyturbojpeg
    ];
    "mijndomein_energie" = ps: with ps; [
    ];
    "mikrotik" = ps: with ps; [
      librouteros
    ];
    "mill" = ps: with ps; [
      mill-local
      millheater
    ];
    "min_max" = ps: with ps; [
    ];
    "minecraft_server" = ps: with ps; [
      mcstatus
    ];
    "minio" = ps: with ps; [
      minio
    ];
    "mjpeg" = ps: with ps; [
    ];
    "moat" = ps: with ps; [
      aioesphomeapi
      aiohttp-cors
      aioruuvigateway
      aioshelly
      async-interrupt
      bleak
      bleak-retry-connector
      bluetooth-adapters
      bluetooth-auto-recovery
      bluetooth-data-tools
      dbus-fast
      esphome-dashboard-api
      fnv-hash-fast
      hassil
      home-assistant-intents
      ifaddr
      moat-ble
      mutagen
      psutil-home-assistant
      pyserial
      pyudev
      sqlalchemy
      webrtc-noise-gain
      zeroconf
    ];
    "mobile_app" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      hass-nabucasa
      hassil
      home-assistant-intents
      mutagen
      pillow
      psutil-home-assistant
      pynacl
      pyturbojpeg
      sqlalchemy
      webrtc-noise-gain
    ];
    "mochad" = ps: with ps; [
    ]; # missing inputs: pymochad
    "modbus" = ps: with ps; [
      pymodbus
    ];
    "modem_callerid" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      phone-modem
      psutil-home-assistant
      pyserial
      pyudev
      sqlalchemy
    ];
    "modern_forms" = ps: with ps; [
      aiomodernforms
    ];
    "moehlenhoff_alpha2" = ps: with ps; [
    ]; # missing inputs: moehlenhoff-alpha2
    "mold_indicator" = ps: with ps; [
    ];
    "monessen" = ps: with ps; [
    ];
    "monoprice" = ps: with ps; [
    ]; # missing inputs: pymonoprice
    "moon" = ps: with ps; [
    ];
    "mopeka" = ps: with ps; [
      aioesphomeapi
      aiohttp-cors
      aioruuvigateway
      aioshelly
      async-interrupt
      bleak
      bleak-retry-connector
      bluetooth-adapters
      bluetooth-auto-recovery
      bluetooth-data-tools
      dbus-fast
      esphome-dashboard-api
      fnv-hash-fast
      hassil
      home-assistant-intents
      ifaddr
      mopeka-iot-ble
      mutagen
      psutil-home-assistant
      pyserial
      pyudev
      sqlalchemy
      webrtc-noise-gain
      zeroconf
    ];
    "motion_blinds" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      ifaddr
      motionblinds
      psutil-home-assistant
      sqlalchemy
    ];
    "motioneye" = ps: with ps; [
      aiohttp-cors
      motioneye-client
    ];
    "mpd" = ps: with ps; [
      mpd2
    ];
    "mqtt" = ps: with ps; [
      aiohttp-cors
      janus
      paho-mqtt
    ];
    "mqtt_eventstream" = ps: with ps; [
      aiohttp-cors
      janus
      paho-mqtt
    ];
    "mqtt_json" = ps: with ps; [
      aiohttp-cors
      janus
      paho-mqtt
    ];
    "mqtt_room" = ps: with ps; [
      aiohttp-cors
      janus
      paho-mqtt
    ];
    "mqtt_statestream" = ps: with ps; [
      aiohttp-cors
      janus
      paho-mqtt
    ];
    "msteams" = ps: with ps; [
      pymsteams
    ];
    "mullvad" = ps: with ps; [
      mullvad-api
    ];
    "mutesync" = ps: with ps; [
      mutesync
    ];
    "mvglive" = ps: with ps; [
      pymvglive
    ];
    "my" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      home-assistant-frontend
      janus
      pillow
      psutil-home-assistant
      sqlalchemy
    ];
    "myq" = ps: with ps; [
      python-myq
    ];
    "mysensors" = ps: with ps; [
      aiohttp-cors
      janus
      paho-mqtt
      pymysensors
    ];
    "mystrom" = ps: with ps; [
      aiohttp-cors
      python-mystrom
    ];
    "mythicbeastsdns" = ps: with ps; [
      mbddns
    ];
    "nad" = ps: with ps; [
      nad-receiver
    ];
    "nam" = ps: with ps; [
      nettigo-air-monitor
    ];
    "namecheapdns" = ps: with ps; [
      defusedxml
    ];
    "nanoleaf" = ps: with ps; [
      aionanoleaf
    ];
    "neato" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      psutil-home-assistant
      pybotvac
      sqlalchemy
    ];
    "nederlandse_spoorwegen" = ps: with ps; [
      nsapi
    ];
    "ness_alarm" = ps: with ps; [
      nessclient
    ];
    "nest" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      google-nest-sdm
      ha-ffmpeg
      psutil-home-assistant
      sqlalchemy
    ];
    "netatmo" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      hass-nabucasa
      hassil
      home-assistant-intents
      mutagen
      psutil-home-assistant
      pyatmo
      pyturbojpeg
      sqlalchemy
      webrtc-noise-gain
    ];
    "netdata" = ps: with ps; [
      netdata
    ];
    "netgear" = ps: with ps; [
      pynetgear
    ];
    "netgear_lte" = ps: with ps; [
      eternalegypt
    ];
    "netio" = ps: with ps; [
      aiohttp-cors
    ]; # missing inputs: pynetio
    "network" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      ifaddr
      psutil-home-assistant
      sqlalchemy
    ];
    "neurio_energy" = ps: with ps; [
    ]; # missing inputs: neurio
    "nexia" = ps: with ps; [
      nexia
    ];
    "nexity" = ps: with ps; [
    ];
    "nextbus" = ps: with ps; [
      py-nextbusnext
    ];
    "nextcloud" = ps: with ps; [
      nextcloudmonitor
    ];
    "nextdns" = ps: with ps; [
      nextdns
    ];
    "nfandroidtv" = ps: with ps; [
      notifications-android-tv
    ];
    "nibe_heatpump" = ps: with ps; [
      nibe
    ];
    "nightscout" = ps: with ps; [
      py-nightscout
    ];
    "niko_home_control" = ps: with ps; [
      niko-home-control
    ];
    "nilu" = ps: with ps; [
      niluclient
    ];
    "nina" = ps: with ps; [
      pynina
    ];
    "nissan_leaf" = ps: with ps; [
      pycarwings2
    ];
    "nmap_tracker" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      getmac
      ifaddr
      mac-vendor-lookup
      netmap
      psutil-home-assistant
      sqlalchemy
    ];
    "nmbs" = ps: with ps; [
    ]; # missing inputs: pyrail
    "no_ip" = ps: with ps; [
    ];
    "noaa_tides" = ps: with ps; [
    ]; # missing inputs: noaa-coops
    "nobo_hub" = ps: with ps; [
      pynobo
    ];
    "norway_air" = ps: with ps; [
      pymetno
    ];
    "notify" = ps: with ps; [
    ];
    "notify_events" = ps: with ps; [
      notify-events
    ];
    "notion" = ps: with ps; [
      aionotion
    ];
    "nsw_fuel_station" = ps: with ps; [
    ]; # missing inputs: nsw-fuel-api-client
    "nsw_rural_fire_service_feed" = ps: with ps; [
      aio-geojson-nsw-rfs-incidents
    ];
    "nuheat" = ps: with ps; [
      nuheat
    ];
    "nuki" = ps: with ps; [
      aiohttp-cors
      pynuki
    ];
    "numato" = ps: with ps; [
    ]; # missing inputs: numato-gpio
    "number" = ps: with ps; [
    ];
    "nut" = ps: with ps; [
      pynut2
    ];
    "nutrichef" = ps: with ps; [
    ];
    "nws" = ps: with ps; [
      pynws
    ];
    "nx584" = ps: with ps; [
      pynx584
    ];
    "nzbget" = ps: with ps; [
    ]; # missing inputs: pynzbgetapi
    "oasa_telematics" = ps: with ps; [
      oasatelematics
    ];
    "obihai" = ps: with ps; [
      pyobihai
    ];
    "octoprint" = ps: with ps; [
      pyoctoprintapi
    ];
    "oem" = ps: with ps; [
      oemthermostat
    ];
    "ohmconnect" = ps: with ps; [
      defusedxml
    ];
    "ombi" = ps: with ps; [
      pyombi
    ];
    "omnilogic" = ps: with ps; [
      omnilogic
    ];
    "onboarding" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      pillow
      psutil-home-assistant
      sqlalchemy
    ];
    "oncue" = ps: with ps; [
      aiooncue
    ];
    "ondilo_ico" = ps: with ps; [
      aiohttp-cors
      ondilo
    ];
    "onewire" = ps: with ps; [
      pyownet
    ];
    "onkyo" = ps: with ps; [
      onkyo-eiscp
    ];
    "onvif" = ps: with ps; [
      ha-ffmpeg
      onvif-zeep-async
      wsdiscovery
    ];
    "open_meteo" = ps: with ps; [
      open-meteo
    ];
    "openai_conversation" = ps: with ps; [
      aiohttp-cors
      hassil
      home-assistant-intents
      openai
    ];
    "openalpr_cloud" = ps: with ps; [
    ];
    "opencv" = ps: with ps; [
      numpy
    ]; # missing inputs: opencv-python-headless
    "openerz" = ps: with ps; [
      openerz-api
    ];
    "openevse" = ps: with ps; [
      openevsewifi
    ];
    "openexchangerates" = ps: with ps; [
      aioopenexchangerates
    ];
    "opengarage" = ps: with ps; [
      open-garage
    ];
    "openhardwaremonitor" = ps: with ps; [
    ];
    "openhome" = ps: with ps; [
      openhomedevice
    ];
    "opensensemap" = ps: with ps; [
      opensensemap-api
    ];
    "opensky" = ps: with ps; [
      python-opensky
    ];
    "opentherm_gw" = ps: with ps; [
      pyotgw
    ];
    "openuv" = ps: with ps; [
      pyopenuv
    ];
    "openweathermap" = ps: with ps; [
      pyowm
    ];
    "opnsense" = ps: with ps; [
      pyopnsense
    ];
    "opower" = ps: with ps; [
      fnv-hash-fast
      opower
      psutil-home-assistant
      sqlalchemy
    ];
    "opple" = ps: with ps; [
    ]; # missing inputs: pyoppleio-legacy
    "oralb" = ps: with ps; [
      aioesphomeapi
      aiohttp-cors
      aioruuvigateway
      aioshelly
      async-interrupt
      bleak
      bleak-retry-connector
      bluetooth-adapters
      bluetooth-auto-recovery
      bluetooth-data-tools
      dbus-fast
      esphome-dashboard-api
      fnv-hash-fast
      hassil
      home-assistant-intents
      ifaddr
      mutagen
      oralb-ble
      psutil-home-assistant
      pyserial
      pyudev
      sqlalchemy
      webrtc-noise-gain
      zeroconf
    ];
    "oru" = ps: with ps; [
    ]; # missing inputs: oru
    "oru_opower" = ps: with ps; [
    ];
    "orvibo" = ps: with ps; [
      orvibo
    ];
    "osramlightify" = ps: with ps; [
    ]; # missing inputs: lightify
    "otbr" = ps: with ps; [
      aiohttp-cors
      bellows
      fnv-hash-fast
      ifaddr
      janus
      pillow
      psutil-home-assistant
      pyroute2
      pyserial
      pyserial-asyncio
      pyserial-asyncio-fast
      python-otbr-api
      pyudev
      sqlalchemy
      universal-silabs-flasher
      zeroconf
      zha-quirks
      zigpy
      zigpy-deconz
      zigpy-xbee
      zigpy-zigate
      zigpy-znp
    ];
    "otp" = ps: with ps; [
      pyotp
    ];
    "overkiz" = ps: with ps; [
      pyoverkiz
    ];
    "ovo_energy" = ps: with ps; [
      ovoenergy
    ];
    "owntracks" = ps: with ps; [
      aiohttp-cors
      hass-nabucasa
      hassil
      home-assistant-intents
      janus
      mutagen
      paho-mqtt
      pynacl
      pyturbojpeg
      webrtc-noise-gain
    ];
    "p1_monitor" = ps: with ps; [
      p1monitor
    ];
    "panasonic_bluray" = ps: with ps; [
      panacotta
    ];
    "panasonic_viera" = ps: with ps; [
      panasonic-viera
    ];
    "pandora" = ps: with ps; [
      pexpect
    ];
    "panel_custom" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      home-assistant-frontend
      janus
      pillow
      psutil-home-assistant
      sqlalchemy
    ];
    "panel_iframe" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      home-assistant-frontend
      janus
      pillow
      psutil-home-assistant
      sqlalchemy
    ];
    "pcs_lighting" = ps: with ps; [
    ];
    "peco" = ps: with ps; [
      peco
    ];
    "peco_opower" = ps: with ps; [
    ];
    "pegel_online" = ps: with ps; [
      aiopegelonline
    ];
    "pencom" = ps: with ps; [
      pencompy
    ];
    "pepco" = ps: with ps; [
    ];
    "persistent_notification" = ps: with ps; [
    ];
    "person" = ps: with ps; [
      aiohttp-cors
      pillow
    ];
    "pge" = ps: with ps; [
    ];
    "philips_js" = ps: with ps; [
      ha-philipsjs
    ];
    "pi_hole" = ps: with ps; [
      hole
    ];
    "picnic" = ps: with ps; [
      python-picnic-api
    ];
    "picotts" = ps: with ps; [
    ];
    "pilight" = ps: with ps; [
    ]; # missing inputs: pilight
    "ping" = ps: with ps; [
      icmplib
    ];
    "pioneer" = ps: with ps; [
    ];
    "piper" = ps: with ps; [
    ];
    "pjlink" = ps: with ps; [
    ]; # missing inputs: pypjlink2
    "plaato" = ps: with ps; [
      aiohttp-cors
      hass-nabucasa
      hassil
      home-assistant-intents
      mutagen
      pyplaato
      pyturbojpeg
      webrtc-noise-gain
    ];
    "plant" = ps: with ps; [
      fnv-hash-fast
      psutil-home-assistant
      sqlalchemy
    ];
    "plex" = ps: with ps; [
      aiohttp-cors
      plexapi
      plexauth
      plexwebsocket
    ];
    "plugwise" = ps: with ps; [
      plugwise
    ];
    "plum_lightpad" = ps: with ps; [
    ]; # missing inputs: plumlightpad
    "pocketcasts" = ps: with ps; [
      pycketcasts
    ];
    "point" = ps: with ps; [
      aiohttp-cors
      pypoint
    ];
    "poolsense" = ps: with ps; [
      poolsense
    ];
    "portlandgeneral" = ps: with ps; [
    ];
    "powerwall" = ps: with ps; [
      tesla-powerwall
    ];
    "private_ble_device" = ps: with ps; [
      aioesphomeapi
      aiohttp-cors
      aioruuvigateway
      aioshelly
      async-interrupt
      bleak
      bleak-retry-connector
      bluetooth-adapters
      bluetooth-auto-recovery
      bluetooth-data-tools
      dbus-fast
      esphome-dashboard-api
      fnv-hash-fast
      hassil
      home-assistant-intents
      ifaddr
      mutagen
      psutil-home-assistant
      pyserial
      pyudev
      sqlalchemy
      webrtc-noise-gain
      zeroconf
    ];
    "profiler" = ps: with ps; [
      guppy3
      objgraph
      pyprof2calltree
    ];
    "progettihwsw" = ps: with ps; [
    ]; # missing inputs: ProgettiHWSW
    "proliphix" = ps: with ps; [
    ]; # missing inputs: proliphix
    "prometheus" = ps: with ps; [
      aiohttp-cors
      prometheus-client
    ];
    "prosegur" = ps: with ps; [
      pyprosegur
    ];
    "prowl" = ps: with ps; [
    ];
    "proximity" = ps: with ps; [
    ];
    "proxmoxve" = ps: with ps; [
      proxmoxer
    ];
    "proxy" = ps: with ps; [
      pillow
    ];
    "prusalink" = ps: with ps; [
      pyprusalink
    ];
    "ps4" = ps: with ps; [
    ]; # missing inputs: pyps4-2ndscreen
    "pse" = ps: with ps; [
    ];
    "pulseaudio_loopback" = ps: with ps; [
      pulsectl
    ];
    "pure_energie" = ps: with ps; [
      gridnet
    ];
    "purpleair" = ps: with ps; [
      aiopurpleair
    ];
    "push" = ps: with ps; [
      aiohttp-cors
    ];
    "pushbullet" = ps: with ps; [
      pushbullet-py
    ];
    "pushover" = ps: with ps; [
      pushover-complete
    ];
    "pushsafer" = ps: with ps; [
    ];
    "pvoutput" = ps: with ps; [
      pvo
    ];
    "pvpc_hourly_pricing" = ps: with ps; [
      aiopvpc
    ];
    "pyload" = ps: with ps; [
    ];
    "python_script" = ps: with ps; [
      restrictedpython
      restrictedpython
    ];
    "qbittorrent" = ps: with ps; [
    ]; # missing inputs: python-qbittorrent
    "qingping" = ps: with ps; [
      aioesphomeapi
      aiohttp-cors
      aioruuvigateway
      aioshelly
      async-interrupt
      bleak
      bleak-retry-connector
      bluetooth-adapters
      bluetooth-auto-recovery
      bluetooth-data-tools
      dbus-fast
      esphome-dashboard-api
      fnv-hash-fast
      hassil
      home-assistant-intents
      ifaddr
      mutagen
      psutil-home-assistant
      pyserial
      pyudev
      qingping-ble
      sqlalchemy
      webrtc-noise-gain
      zeroconf
    ];
    "qld_bushfire" = ps: with ps; [
      georss-qld-bushfire-alert-client
    ];
    "qnap" = ps: with ps; [
      qnapstats
    ];
    "qnap_qsw" = ps: with ps; [
      aioqsw
    ];
    "qrcode" = ps: with ps; [
      pillow
      pyzbar
    ];
    "quadrafire" = ps: with ps; [
    ];
    "quantum_gateway" = ps: with ps; [
      quantum-gateway
    ];
    "qvr_pro" = ps: with ps; [
      pyqvrpro
    ];
    "qwikswitch" = ps: with ps; [
      pyqwikswitch
    ];
    "rachio" = ps: with ps; [
      aiohttp-cors
      hass-nabucasa
      hassil
      home-assistant-intents
      mutagen
      pyturbojpeg
      rachiopy
      webrtc-noise-gain
    ];
    "radarr" = ps: with ps; [
      aiopyarr
    ];
    "radio_browser" = ps: with ps; [
      radios
    ];
    "radiotherm" = ps: with ps; [
      radiotherm
    ];
    "rainbird" = ps: with ps; [
      pyrainbird
    ];
    "raincloud" = ps: with ps; [
      raincloudy
    ];
    "rainforest_eagle" = ps: with ps; [
      aioeagle
      eagle100
    ];
    "rainmachine" = ps: with ps; [
      regenmaschine
    ];
    "random" = ps: with ps; [
    ];
    "rapt_ble" = ps: with ps; [
      aioesphomeapi
      aiohttp-cors
      aioruuvigateway
      aioshelly
      async-interrupt
      bleak
      bleak-retry-connector
      bluetooth-adapters
      bluetooth-auto-recovery
      bluetooth-data-tools
      dbus-fast
      esphome-dashboard-api
      fnv-hash-fast
      hassil
      home-assistant-intents
      ifaddr
      mutagen
      psutil-home-assistant
      pyserial
      pyudev
      rapt-ble
      sqlalchemy
      webrtc-noise-gain
      zeroconf
    ];
    "raspberry_pi" = ps: with ps; [
      aiohttp-cors
      psutil-home-assistant
    ];
    "raspyrfm" = ps: with ps; [
    ]; # missing inputs: raspyrfm-client
    "raven_rock_mfg" = ps: with ps; [
    ];
    "rdw" = ps: with ps; [
      vehicle
    ];
    "recollect_waste" = ps: with ps; [
      aiorecollect
    ];
    "recorder" = ps: with ps; [
      fnv-hash-fast
      psutil-home-assistant
      sqlalchemy
    ];
    "recovery_mode" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      hass-nabucasa
      hassil
      home-assistant-frontend
      home-assistant-intents
      janus
      mutagen
      pillow
      psutil-home-assistant
      pyturbojpeg
      sqlalchemy
      webrtc-noise-gain
    ];
    "recswitch" = ps: with ps; [
    ]; # missing inputs: pyrecswitch
    "reddit" = ps: with ps; [
      praw
    ];
    "rejseplanen" = ps: with ps; [
      rjpl
    ];
    "remember_the_milk" = ps: with ps; [
      httplib2
    ]; # missing inputs: RtmAPI
    "remote" = ps: with ps; [
    ];
    "remote_rpi_gpio" = ps: with ps; [
      gpiozero
    ]; # missing inputs: pigpio
    "renault" = ps: with ps; [
      renault-api
    ];
    "renson" = ps: with ps; [
    ]; # missing inputs: renson-endura-delta
    "reolink" = ps: with ps; [
      aiohttp-cors
      reolink-aio
    ];
    "repairs" = ps: with ps; [
      aiohttp-cors
    ];
    "repetier" = ps: with ps; [
    ]; # missing inputs: pyrepetierng
    "rest" = ps: with ps; [
      jsonpath
      xmltodict
    ];
    "rest_command" = ps: with ps; [
    ];
    "rexel" = ps: with ps; [
    ];
    "rflink" = ps: with ps; [
      rflink
    ];
    "rfxtrx" = ps: with ps; [
      pyrfxtrx
    ];
    "rhasspy" = ps: with ps; [
      aiohttp-cors
    ];
    "ridwell" = ps: with ps; [
      aioridwell
    ];
    "ring" = ps: with ps; [
      ha-ffmpeg
      ring-doorbell
    ];
    "ripple" = ps: with ps; [
    ]; # missing inputs: python-ripple-api
    "risco" = ps: with ps; [
      pyrisco
    ];
    "rituals_perfume_genie" = ps: with ps; [
      pyrituals
    ];
    "rmvtransport" = ps: with ps; [
      pyrmvtransport
    ];
    "roborock" = ps: with ps; [
      python-roborock
    ];
    "rocketchat" = ps: with ps; [
    ]; # missing inputs: rocketchat-API
    "roku" = ps: with ps; [
      rokuecp
    ];
    "roomba" = ps: with ps; [
      roombapy
    ];
    "roon" = ps: with ps; [
      roonapi
    ];
    "route53" = ps: with ps; [
      boto3
    ];
    "rova" = ps: with ps; [
      rova
    ];
    "rpi_camera" = ps: with ps; [
    ];
    "rpi_power" = ps: with ps; [
      rpi-bad-power
    ];
    "rss_feed_template" = ps: with ps; [
      aiohttp-cors
    ];
    "rtorrent" = ps: with ps; [
    ];
    "rtsp_to_webrtc" = ps: with ps; [
      aiohttp-cors
      pyturbojpeg
      rtsp-to-webrtc
    ];
    "ruckus_unleashed" = ps: with ps; [
      aioruckus
    ];
    "russound_rio" = ps: with ps; [
    ]; # missing inputs: russound-rio
    "russound_rnet" = ps: with ps; [
    ]; # missing inputs: russound
    "ruuvi_gateway" = ps: with ps; [
      aiohttp-cors
      aioruuvigateway
      bleak
      bleak-retry-connector
      bluetooth-adapters
      bluetooth-auto-recovery
      bluetooth-data-tools
      dbus-fast
      fnv-hash-fast
      psutil-home-assistant
      pyserial
      pyudev
      sqlalchemy
    ];
    "ruuvitag_ble" = ps: with ps; [
      aioesphomeapi
      aiohttp-cors
      aioruuvigateway
      aioshelly
      async-interrupt
      bleak
      bleak-retry-connector
      bluetooth-adapters
      bluetooth-auto-recovery
      bluetooth-data-tools
      dbus-fast
      esphome-dashboard-api
      fnv-hash-fast
      hassil
      home-assistant-intents
      ifaddr
      mutagen
      psutil-home-assistant
      pyserial
      pyudev
      ruuvitag-ble
      sqlalchemy
      webrtc-noise-gain
      zeroconf
    ];
    "rympro" = ps: with ps; [
    ]; # missing inputs: pyrympro
    "sabnzbd" = ps: with ps; [
      pysabnzbd
    ];
    "saj" = ps: with ps; [
      pysaj
    ];
    "samsungtv" = ps: with ps; [
      aiohttp-cors
      async-upnp-client
      fnv-hash-fast
      getmac
      ifaddr
      psutil-home-assistant
      samsungctl
      samsungtvws
      sqlalchemy
      wakeonlan
      zeroconf
    ]
    ++ samsungctl.optional-dependencies.websocket
    ++ samsungtvws.optional-dependencies.async
    ++ samsungtvws.optional-dependencies.encrypted;
    "satel_integra" = ps: with ps; [
    ]; # missing inputs: satel-integra
    "scene" = ps: with ps; [
    ];
    "schedule" = ps: with ps; [
    ];
    "schlage" = ps: with ps; [
      pyschlage
    ];
    "schluter" = ps: with ps; [
    ]; # missing inputs: py-schluter
    "scrape" = ps: with ps; [
      beautifulsoup4
      jsonpath
      lxml
      xmltodict
    ];
    "screenaway" = ps: with ps; [
    ];
    "screenlogic" = ps: with ps; [
      screenlogicpy
    ];
    "script" = ps: with ps; [
    ];
    "scsgate" = ps: with ps; [
    ]; # missing inputs: scsgate
    "search" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      psutil-home-assistant
      sqlalchemy
    ];
    "season" = ps: with ps; [
      ephem
    ];
    "select" = ps: with ps; [
    ];
    "sendgrid" = ps: with ps; [
      sendgrid
    ];
    "sense" = ps: with ps; [
      sense-energy
    ];
    "sensibo" = ps: with ps; [
      pysensibo
    ];
    "sensirion_ble" = ps: with ps; [
      aioesphomeapi
      aiohttp-cors
      aioruuvigateway
      aioshelly
      async-interrupt
      bleak
      bleak-retry-connector
      bluetooth-adapters
      bluetooth-auto-recovery
      bluetooth-data-tools
      dbus-fast
      esphome-dashboard-api
      fnv-hash-fast
      hassil
      home-assistant-intents
      ifaddr
      mutagen
      psutil-home-assistant
      pyserial
      pyudev
      sensirion-ble
      sqlalchemy
      webrtc-noise-gain
      zeroconf
    ];
    "sensor" = ps: with ps; [
      fnv-hash-fast
      psutil-home-assistant
      sqlalchemy
    ];
    "sensorblue" = ps: with ps; [
    ];
    "sensorpro" = ps: with ps; [
      aioesphomeapi
      aiohttp-cors
      aioruuvigateway
      aioshelly
      async-interrupt
      bleak
      bleak-retry-connector
      bluetooth-adapters
      bluetooth-auto-recovery
      bluetooth-data-tools
      dbus-fast
      esphome-dashboard-api
      fnv-hash-fast
      hassil
      home-assistant-intents
      ifaddr
      mutagen
      psutil-home-assistant
      pyserial
      pyudev
      sensorpro-ble
      sqlalchemy
      webrtc-noise-gain
      zeroconf
    ];
    "sensorpush" = ps: with ps; [
      aioesphomeapi
      aiohttp-cors
      aioruuvigateway
      aioshelly
      async-interrupt
      bleak
      bleak-retry-connector
      bluetooth-adapters
      bluetooth-auto-recovery
      bluetooth-data-tools
      dbus-fast
      esphome-dashboard-api
      fnv-hash-fast
      hassil
      home-assistant-intents
      ifaddr
      mutagen
      psutil-home-assistant
      pyserial
      pyudev
      sensorpush-ble
      sqlalchemy
      webrtc-noise-gain
      zeroconf
    ];
    "sentry" = ps: with ps; [
      sentry-sdk
    ];
    "senz" = ps: with ps; [
      aiohttp-cors
      aiosenz
      fnv-hash-fast
      psutil-home-assistant
      sqlalchemy
    ];
    "serial" = ps: with ps; [
      pyserial-asyncio
    ];
    "serial_pm" = ps: with ps; [
      pmsensor
    ];
    "sesame" = ps: with ps; [
    ]; # missing inputs: pysesame2
    "seven_segments" = ps: with ps; [
      pillow
    ];
    "seventeentrack" = ps: with ps; [
      py17track
    ];
    "sfr_box" = ps: with ps; [
      sfrbox-api
    ];
    "sharkiq" = ps: with ps; [
      sharkiq
    ];
    "shell_command" = ps: with ps; [
    ];
    "shelly" = ps: with ps; [
      aiohttp-cors
      aioshelly
      bleak
      bleak-retry-connector
      bluetooth-adapters
      bluetooth-auto-recovery
      bluetooth-data-tools
      dbus-fast
      fnv-hash-fast
      psutil-home-assistant
      pyserial
      pyudev
      sqlalchemy
    ];
    "shodan" = ps: with ps; [
      shodan
    ];
    "shopping_list" = ps: with ps; [
      aiohttp-cors
    ];
    "sia" = ps: with ps; [
      pysiaalarm
    ];
    "sigfox" = ps: with ps; [
    ];
    "sighthound" = ps: with ps; [
      pillow
      simplehound
    ];
    "signal_messenger" = ps: with ps; [
      pysignalclirestapi
    ];
    "simplepush" = ps: with ps; [
      simplepush
    ];
    "simplisafe" = ps: with ps; [
      simplisafe-python
    ];
    "simply_automated" = ps: with ps; [
    ];
    "simu" = ps: with ps; [
    ];
    "simulated" = ps: with ps; [
    ];
    "sinch" = ps: with ps; [
    ]; # missing inputs: clx-sdk-xms
    "siren" = ps: with ps; [
    ];
    "sisyphus" = ps: with ps; [
      sisyphus-control
    ];
    "sky_hub" = ps: with ps; [
      pyskyqhub
    ];
    "skybeacon" = ps: with ps; [
      pygatt
    ]
    ++ pygatt.optional-dependencies.GATTTOOL;
    "skybell" = ps: with ps; [
      aioskybell
      ha-ffmpeg
    ];
    "slack" = ps: with ps; [
      slackclient
    ];
    "sleepiq" = ps: with ps; [
      asyncsleepiq
    ];
    "slide" = ps: with ps; [
    ]; # missing inputs: goslide-api
    "slimproto" = ps: with ps; [
      aiohttp-cors
      aioslimproto
    ];
    "sma" = ps: with ps; [
      pysma
    ];
    "smappee" = ps: with ps; [
      aiohttp-cors
      pysmappee
    ];
    "smart_blinds" = ps: with ps; [
    ];
    "smart_home" = ps: with ps; [
    ];
    "smart_meter_texas" = ps: with ps; [
      smart-meter-texas
    ];
    "smarther" = ps: with ps; [
    ];
    "smartthings" = ps: with ps; [
      aiohttp-cors
      hass-nabucasa
      hassil
      home-assistant-intents
      mutagen
      pysmartapp
      pysmartthings
      pyturbojpeg
      webrtc-noise-gain
    ];
    "smarttub" = ps: with ps; [
      python-smarttub
    ];
    "smhi" = ps: with ps; [
      smhi-pkg
    ];
    "sms" = ps: with ps; [
      python-gammu
    ];
    "smtp" = ps: with ps; [
    ];
    "snapcast" = ps: with ps; [
      snapcast
    ];
    "snips" = ps: with ps; [
      aiohttp-cors
      janus
      paho-mqtt
    ];
    "snmp" = ps: with ps; [
      pysnmplib
    ];
    "snooz" = ps: with ps; [
      aioesphomeapi
      aiohttp-cors
      aioruuvigateway
      aioshelly
      async-interrupt
      bleak
      bleak-retry-connector
      bluetooth-adapters
      bluetooth-auto-recovery
      bluetooth-data-tools
      dbus-fast
      esphome-dashboard-api
      fnv-hash-fast
      hassil
      home-assistant-intents
      ifaddr
      mutagen
      psutil-home-assistant
      pyserial
      pysnooz
      pyudev
      sqlalchemy
      webrtc-noise-gain
      zeroconf
    ];
    "solaredge" = ps: with ps; [
      solaredge
      stringcase
    ];
    "solaredge_local" = ps: with ps; [
    ]; # missing inputs: solaredge-local
    "solarlog" = ps: with ps; [
      sunwatcher
    ];
    "solax" = ps: with ps; [
      solax
    ];
    "soma" = ps: with ps; [
      pysoma
    ];
    "somfy" = ps: with ps; [
    ];
    "somfy_mylink" = ps: with ps; [
      somfy-mylink-synergy
    ];
    "sonarr" = ps: with ps; [
      aiopyarr
    ];
    "songpal" = ps: with ps; [
      python-songpal
    ];
    "sonos" = ps: with ps; [
      aiohttp-cors
      async-upnp-client
      fnv-hash-fast
      ifaddr
      plexapi
      plexauth
      plexwebsocket
      psutil-home-assistant
      soco
      sonos-websocket
      spotipy
      sqlalchemy
      zeroconf
    ];
    "sony_projector" = ps: with ps; [
      pysdcp
    ];
    "soundtouch" = ps: with ps; [
      libsoundtouch
    ];
    "spaceapi" = ps: with ps; [
      aiohttp-cors
    ];
    "spc" = ps: with ps; [
      pyspcwebgw
    ];
    "speedtestdotnet" = ps: with ps; [
      speedtest-cli
    ];
    "spider" = ps: with ps; [
      spiderpy
    ];
    "splunk" = ps: with ps; [
    ]; # missing inputs: hass-splunk
    "spotify" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      psutil-home-assistant
      spotipy
      sqlalchemy
    ];
    "sql" = ps: with ps; [
      sqlalchemy
    ];
    "squeezebox" = ps: with ps; [
      pysqueezebox
    ];
    "srp_energy" = ps: with ps; [
      srpenergy
    ];
    "ssdp" = ps: with ps; [
      aiohttp-cors
      async-upnp-client
      fnv-hash-fast
      ifaddr
      psutil-home-assistant
      sqlalchemy
      zeroconf
    ];
    "starline" = ps: with ps; [
      starline
    ];
    "starlingbank" = ps: with ps; [
    ]; # missing inputs: starlingbank
    "starlink" = ps: with ps; [
    ]; # missing inputs: starlink-grpc-core
    "startca" = ps: with ps; [
      xmltodict
    ];
    "statistics" = ps: with ps; [
      fnv-hash-fast
      psutil-home-assistant
      sqlalchemy
    ];
    "statsd" = ps: with ps; [
      statsd
    ];
    "steam_online" = ps: with ps; [
      steamodd
    ];
    "steamist" = ps: with ps; [
      aiohttp-cors
      aiosteamist
      discovery30303
      fnv-hash-fast
      ifaddr
      psutil-home-assistant
      sqlalchemy
    ];
    "stiebel_eltron" = ps: with ps; [
      pymodbus
    ]; # missing inputs: pystiebeleltron
    "stookalert" = ps: with ps; [
      stookalert
    ];
    "stookwijzer" = ps: with ps; [
    ]; # missing inputs: stookwijzer
    "stream" = ps: with ps; [
      aiohttp-cors
      ha-av
      numpy
      pyturbojpeg
    ];
    "streamlabswater" = ps: with ps; [
      streamlabswater
    ];
    "stt" = ps: with ps; [
      aiohttp-cors
    ];
    "subaru" = ps: with ps; [
      subarulink
    ];
    "suez_water" = ps: with ps; [
      pysuez
    ];
    "sun" = ps: with ps; [
    ];
    "supervisord" = ps: with ps; [
    ];
    "supla" = ps: with ps; [
    ]; # missing inputs: asyncpysupla
    "surepetcare" = ps: with ps; [
      surepy
    ];
    "swiss_hydrological_data" = ps: with ps; [
      swisshydrodata
    ];
    "swiss_public_transport" = ps: with ps; [
      python-opendata-transport
    ];
    "swisscom" = ps: with ps; [
    ];
    "switch" = ps: with ps; [
    ];
    "switch_as_x" = ps: with ps; [
    ];
    "switchbee" = ps: with ps; [
      pyswitchbee
    ];
    "switchbot" = ps: with ps; [
      aioesphomeapi
      aiohttp-cors
      aioruuvigateway
      aioshelly
      async-interrupt
      bleak
      bleak-retry-connector
      bluetooth-adapters
      bluetooth-auto-recovery
      bluetooth-data-tools
      dbus-fast
      esphome-dashboard-api
      fnv-hash-fast
      hassil
      home-assistant-intents
      ifaddr
      mutagen
      psutil-home-assistant
      pyserial
      pyswitchbot
      pyudev
      sqlalchemy
      webrtc-noise-gain
      zeroconf
    ];
    "switchbot_cloud" = ps: with ps; [
    ]; # missing inputs: switchbot-api
    "switcher_kis" = ps: with ps; [
      aioswitcher
    ];
    "switchmate" = ps: with ps; [
    ]; # missing inputs: PySwitchmate
    "symfonisk" = ps: with ps; [
    ];
    "syncthing" = ps: with ps; [
      aiosyncthing
    ];
    "syncthru" = ps: with ps; [
      pysyncthru
      url-normalize
    ];
    "synology_chat" = ps: with ps; [
    ];
    "synology_dsm" = ps: with ps; [
      aiohttp-cors
      py-synologydsm-api
    ];
    "synology_srm" = ps: with ps; [
    ]; # missing inputs: synology-srm
    "syslog" = ps: with ps; [
    ];
    "system_bridge" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      ifaddr
      psutil-home-assistant
      sqlalchemy
      zeroconf
    ]; # missing inputs: systembridgeconnector
    "system_health" = ps: with ps; [
      aiohttp-cors
    ];
    "system_log" = ps: with ps; [
    ];
    "systemmonitor" = ps: with ps; [
      psutil
    ];
    "tado" = ps: with ps; [
      python-tado
    ];
    "tag" = ps: with ps; [
    ];
    "tailscale" = ps: with ps; [
      tailscale
    ];
    "tami4" = ps: with ps; [
    ]; # missing inputs: Tami4EdgeAPI
    "tank_utility" = ps: with ps; [
      tank-utility
    ];
    "tankerkoenig" = ps: with ps; [
      pytankerkoenig
    ];
    "tapsaff" = ps: with ps; [
    ]; # missing inputs: tapsaff
    "tasmota" = ps: with ps; [
      aiohttp-cors
      hatasmota
      janus
      paho-mqtt
    ];
    "tautulli" = ps: with ps; [
      pytautulli
    ];
    "tcp" = ps: with ps; [
    ];
    "ted5000" = ps: with ps; [
      xmltodict
    ];
    "telegram" = ps: with ps; [
      aiohttp-cors
      pysocks
      python-telegram-bot
    ];
    "telegram_bot" = ps: with ps; [
      aiohttp-cors
      pysocks
      python-telegram-bot
    ];
    "tellduslive" = ps: with ps; [
      tellduslive
    ];
    "tellstick" = ps: with ps; [
    ]; # missing inputs: tellcore-net tellcore-py
    "telnet" = ps: with ps; [
    ];
    "temper" = ps: with ps; [
      temperusb
    ];
    "template" = ps: with ps; [
    ];
    "tensorflow" = ps: with ps; [
      numpy
      pillow
      pycocotools
      tensorflow
    ]; # missing inputs: tf-models-official
    "tesla_wall_connector" = ps: with ps; [
      tesla-wall-connector
    ];
    "text" = ps: with ps; [
    ];
    "tfiac" = ps: with ps; [
    ]; # missing inputs: pytfiac
    "thermobeacon" = ps: with ps; [
      aioesphomeapi
      aiohttp-cors
      aioruuvigateway
      aioshelly
      async-interrupt
      bleak
      bleak-retry-connector
      bluetooth-adapters
      bluetooth-auto-recovery
      bluetooth-data-tools
      dbus-fast
      esphome-dashboard-api
      fnv-hash-fast
      hassil
      home-assistant-intents
      ifaddr
      mutagen
      psutil-home-assistant
      pyserial
      pyudev
      sqlalchemy
      thermobeacon-ble
      webrtc-noise-gain
      zeroconf
    ];
    "thermoplus" = ps: with ps; [
    ];
    "thermopro" = ps: with ps; [
      aioesphomeapi
      aiohttp-cors
      aioruuvigateway
      aioshelly
      async-interrupt
      bleak
      bleak-retry-connector
      bluetooth-adapters
      bluetooth-auto-recovery
      bluetooth-data-tools
      dbus-fast
      esphome-dashboard-api
      fnv-hash-fast
      hassil
      home-assistant-intents
      ifaddr
      mutagen
      psutil-home-assistant
      pyserial
      pyudev
      sqlalchemy
      thermopro-ble
      webrtc-noise-gain
      zeroconf
    ];
    "thermoworks_smoke" = ps: with ps; [
      stringcase
    ]; # missing inputs: thermoworks-smoke
    "thethingsnetwork" = ps: with ps; [
    ];
    "thingspeak" = ps: with ps; [
    ]; # missing inputs: thingspeak
    "thinkingcleaner" = ps: with ps; [
    ]; # missing inputs: pythinkingcleaner
    "thomson" = ps: with ps; [
    ];
    "thread" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      ifaddr
      psutil-home-assistant
      pyroute2
      python-otbr-api
      sqlalchemy
      zeroconf
    ];
    "threshold" = ps: with ps; [
    ];
    "tibber" = ps: with ps; [
      fnv-hash-fast
      psutil-home-assistant
      pytibber
      sqlalchemy
    ];
    "tikteck" = ps: with ps; [
    ]; # missing inputs: tikteck
    "tile" = ps: with ps; [
      pytile
    ];
    "tilt_ble" = ps: with ps; [
      aioesphomeapi
      aiohttp-cors
      aioruuvigateway
      aioshelly
      async-interrupt
      bleak
      bleak-retry-connector
      bluetooth-adapters
      bluetooth-auto-recovery
      bluetooth-data-tools
      dbus-fast
      esphome-dashboard-api
      fnv-hash-fast
      hassil
      home-assistant-intents
      ifaddr
      mutagen
      psutil-home-assistant
      pyserial
      pyudev
      sqlalchemy
      tilt-ble
      webrtc-noise-gain
      zeroconf
    ];
    "time" = ps: with ps; [
    ];
    "time_date" = ps: with ps; [
    ];
    "timer" = ps: with ps; [
    ];
    "tmb" = ps: with ps; [
      tmb
    ];
    "tod" = ps: with ps; [
    ];
    "todo" = ps: with ps; [
      aiohttp-cors
    ];
    "todoist" = ps: with ps; [
      todoist-api-python
    ];
    "tolo" = ps: with ps; [
      tololib
    ];
    "tomato" = ps: with ps; [
    ];
    "tomorrowio" = ps: with ps; [
      pytomorrowio
    ];
    "toon" = ps: with ps; [
      aiohttp-cors
      hass-nabucasa
      hassil
      home-assistant-intents
      mutagen
      pyturbojpeg
      toonapi
      webrtc-noise-gain
    ];
    "torque" = ps: with ps; [
      aiohttp-cors
    ];
    "totalconnect" = ps: with ps; [
      total-connect-client
    ];
    "touchline" = ps: with ps; [
    ]; # missing inputs: pytouchline
    "tplink" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      ifaddr
      psutil-home-assistant
      python-kasa
      sqlalchemy
    ]; # missing inputs: python-kasa.optional-dependencies.speedups
    "tplink_lte" = ps: with ps; [
    ]; # missing inputs: tp-connected
    "tplink_omada" = ps: with ps; [
      tplink-omada-client
    ];
    "traccar" = ps: with ps; [
      aiohttp-cors
      pytraccar
      stringcase
    ];
    "trace" = ps: with ps; [
    ];
    "tractive" = ps: with ps; [
      aiotractive
    ];
    "tradfri" = ps: with ps; [
      pytradfri
    ]
    ++ pytradfri.optional-dependencies.async;
    "trafikverket_camera" = ps: with ps; [
      pytrafikverket
    ];
    "trafikverket_ferry" = ps: with ps; [
      pytrafikverket
    ];
    "trafikverket_train" = ps: with ps; [
      pytrafikverket
    ];
    "trafikverket_weatherstation" = ps: with ps; [
      pytrafikverket
    ];
    "transmission" = ps: with ps; [
      transmission-rpc
    ];
    "transport_nsw" = ps: with ps; [
      pytransportnsw
    ];
    "travisci" = ps: with ps; [
    ]; # missing inputs: TravisPy
    "trend" = ps: with ps; [
      numpy
    ];
    "tts" = ps: with ps; [
      aiohttp-cors
      mutagen
    ];
    "tuya" = ps: with ps; [
      ha-ffmpeg
      tuya-iot-py-sdk
    ];
    "twentemilieu" = ps: with ps; [
      twentemilieu
    ];
    "twilio" = ps: with ps; [
      aiohttp-cors
      twilio
    ];
    "twilio_call" = ps: with ps; [
      aiohttp-cors
      twilio
    ];
    "twilio_sms" = ps: with ps; [
      aiohttp-cors
      twilio
    ];
    "twinkly" = ps: with ps; [
      ttls
    ];
    "twitch" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      psutil-home-assistant
      sqlalchemy
      twitchapi
    ];
    "twitter" = ps: with ps; [
      twitterapi
    ];
    "ubiwizz" = ps: with ps; [
    ];
    "ubus" = ps: with ps; [
      openwrt-ubus-rpc
    ];
    "ue_smart_radio" = ps: with ps; [
    ];
    "uk_transport" = ps: with ps; [
    ];
    "ukraine_alarm" = ps: with ps; [
      uasiren
    ];
    "ultraloq" = ps: with ps; [
    ];
    "unifi" = ps: with ps; [
      aiounifi
    ];
    "unifi_direct" = ps: with ps; [
      pexpect
    ];
    "unifiled" = ps: with ps; [
      unifiled
    ];
    "unifiprotect" = ps: with ps; [
      aiohttp-cors
      pyunifiprotect
      unifi-discovery
    ];
    "universal" = ps: with ps; [
    ];
    "upb" = ps: with ps; [
      upb-lib
    ];
    "upc_connect" = ps: with ps; [
      connect-box
    ];
    "upcloud" = ps: with ps; [
      upcloud-api
    ];
    "update" = ps: with ps; [
    ];
    "upnp" = ps: with ps; [
      aiohttp-cors
      async-upnp-client
      fnv-hash-fast
      getmac
      ifaddr
      psutil-home-assistant
      sqlalchemy
      zeroconf
    ];
    "uprise_smart_shades" = ps: with ps; [
    ];
    "uptime" = ps: with ps; [
    ];
    "uptimerobot" = ps: with ps; [
      pyuptimerobot
    ];
    "usb" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      psutil-home-assistant
      pyserial
      pyudev
      sqlalchemy
    ];
    "usgs_earthquakes_feed" = ps: with ps; [
      aio-geojson-usgs-earthquakes
    ];
    "utility_meter" = ps: with ps; [
      croniter
    ];
    "uvc" = ps: with ps; [
      uvcclient
    ];
    "vacuum" = ps: with ps; [
    ];
    "vallox" = ps: with ps; [
      vallox-websocket-api
    ];
    "vasttrafik" = ps: with ps; [
    ]; # missing inputs: vtjp
    "velbus" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      psutil-home-assistant
      pyserial
      pyudev
      sqlalchemy
      velbus-aio
    ];
    "velux" = ps: with ps; [
      pyvlx
    ];
    "venstar" = ps: with ps; [
      venstarcolortouch
    ];
    "vera" = ps: with ps; [
      pyvera
    ];
    "verisure" = ps: with ps; [
      vsure
    ];
    "vermont_castings" = ps: with ps; [
    ];
    "versasense" = ps: with ps; [
      pyversasense
    ];
    "version" = ps: with ps; [
      pyhaversion
    ];
    "vesync" = ps: with ps; [
      pyvesync
    ];
    "viaggiatreno" = ps: with ps; [
    ];
    "vicare" = ps: with ps; [
      pyvicare
    ];
    "vilfo" = ps: with ps; [
      vilfo-api-client
    ];
    "vivotek" = ps: with ps; [
      libpyvivotek
    ];
    "vizio" = ps: with ps; [
      pyvizio
    ];
    "vlc" = ps: with ps; [
      python-vlc
    ];
    "vlc_telnet" = ps: with ps; [
      aiovlc
    ];
    "vodafone_station" = ps: with ps; [
      aiovodafone
    ];
    "voicerss" = ps: with ps; [
    ];
    "voip" = ps: with ps; [
      aiohttp-cors
      hassil
      home-assistant-intents
      mutagen
      webrtc-noise-gain
    ]; # missing inputs: voip-utils
    "volkszaehler" = ps: with ps; [
      volkszaehler
    ];
    "volumio" = ps: with ps; [
      pyvolumio
    ];
    "volvooncall" = ps: with ps; [
      volvooncall
    ];
    "vulcan" = ps: with ps; [
      vulcan-api
    ];
    "vultr" = ps: with ps; [
      vultr
    ];
    "w800rf32" = ps: with ps; [
    ]; # missing inputs: pyW800rf32
    "wake_on_lan" = ps: with ps; [
      wakeonlan
    ];
    "wake_word" = ps: with ps; [
    ];
    "wallbox" = ps: with ps; [
      wallbox
    ];
    "waqi" = ps: with ps; [
      aiowaqi
    ];
    "water_heater" = ps: with ps; [
    ];
    "waterfurnace" = ps: with ps; [
      waterfurnace
    ];
    "watson_iot" = ps: with ps; [
    ]; # missing inputs: ibmiotf
    "watttime" = ps: with ps; [
      aiowatttime
    ];
    "waze_travel_time" = ps: with ps; [
      pywaze
    ];
    "weather" = ps: with ps; [
    ];
    "weatherflow" = ps: with ps; [
      pyweatherflowudp
    ];
    "weatherkit" = ps: with ps; [
      apple-weatherkit
    ];
    "webhook" = ps: with ps; [
      aiohttp-cors
    ];
    "webostv" = ps: with ps; [
      aiowebostv
    ];
    "websocket_api" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      psutil-home-assistant
      sqlalchemy
    ];
    "wemo" = ps: with ps; [
      pywemo
    ];
    "whirlpool" = ps: with ps; [
      whirlpool-sixth-sense
    ];
    "whisper" = ps: with ps; [
    ];
    "whois" = ps: with ps; [
      whois
    ];
    "wiffi" = ps: with ps; [
      wiffi
    ];
    "wilight" = ps: with ps; [
      pywilight
    ];
    "wirelesstag" = ps: with ps; [
    ]; # missing inputs: wirelesstagpy
    "withings" = ps: with ps; [
      aiohttp-cors
      aiowithings
      fnv-hash-fast
      hass-nabucasa
      hassil
      home-assistant-intents
      mutagen
      psutil-home-assistant
      pyturbojpeg
      sqlalchemy
      webrtc-noise-gain
    ];
    "wiz" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      ifaddr
      psutil-home-assistant
      pywizlight
      sqlalchemy
    ];
    "wled" = ps: with ps; [
      wled
    ];
    "wolflink" = ps: with ps; [
    ]; # missing inputs: wolf-smartset
    "workday" = ps: with ps; [
      holidays
    ];
    "worldclock" = ps: with ps; [
    ];
    "worldtidesinfo" = ps: with ps; [
    ];
    "worxlandroid" = ps: with ps; [
    ];
    "ws66i" = ps: with ps; [
      pyws66i
    ];
    "wsdot" = ps: with ps; [
    ];
    "wyoming" = ps: with ps; [
      wyoming
    ];
    "x10" = ps: with ps; [
    ];
    "xbox" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      psutil-home-assistant
      sqlalchemy
      xbox-webapi
    ];
    "xeoma" = ps: with ps; [
      pyxeoma
    ];
    "xiaomi" = ps: with ps; [
      ha-ffmpeg
    ];
    "xiaomi_aqara" = ps: with ps; [
      pyxiaomigateway
    ];
    "xiaomi_ble" = ps: with ps; [
      aioesphomeapi
      aiohttp-cors
      aioruuvigateway
      aioshelly
      async-interrupt
      bleak
      bleak-retry-connector
      bluetooth-adapters
      bluetooth-auto-recovery
      bluetooth-data-tools
      dbus-fast
      esphome-dashboard-api
      fnv-hash-fast
      hassil
      home-assistant-intents
      ifaddr
      mutagen
      psutil-home-assistant
      pyserial
      pyudev
      sqlalchemy
      webrtc-noise-gain
      xiaomi-ble
      zeroconf
    ];
    "xiaomi_miio" = ps: with ps; [
      construct
      micloud
      python-miio
    ];
    "xiaomi_tv" = ps: with ps; [
      pymitv
    ];
    "xmpp" = ps: with ps; [
      emoji
      slixmpp
    ];
    "xs1" = ps: with ps; [
    ]; # missing inputs: xs1-api-client
    "yale_home" = ps: with ps; [
    ];
    "yale_smart_alarm" = ps: with ps; [
      yalesmartalarmclient
    ];
    "yalexs_ble" = ps: with ps; [
      aioesphomeapi
      aiohttp-cors
      aioruuvigateway
      aioshelly
      async-interrupt
      bleak
      bleak-retry-connector
      bluetooth-adapters
      bluetooth-auto-recovery
      bluetooth-data-tools
      dbus-fast
      esphome-dashboard-api
      fnv-hash-fast
      hassil
      home-assistant-intents
      ifaddr
      mutagen
      psutil-home-assistant
      pyserial
      pyudev
      sqlalchemy
      webrtc-noise-gain
      yalexs-ble
      zeroconf
    ];
    "yamaha" = ps: with ps; [
      rxv
    ];
    "yamaha_musiccast" = ps: with ps; [
      aiohttp-cors
      aiomusiccast
      async-upnp-client
      fnv-hash-fast
      ifaddr
      psutil-home-assistant
      sqlalchemy
      zeroconf
    ];
    "yandex_transport" = ps: with ps; [
      aioymaps
    ];
    "yandextts" = ps: with ps; [
    ];
    "yardian" = ps: with ps; [
      pyyardian
    ];
    "yeelight" = ps: with ps; [
      aiohttp-cors
      async-upnp-client
      fnv-hash-fast
      ifaddr
      psutil-home-assistant
      sqlalchemy
      yeelight
      zeroconf
    ];
    "yeelightsunflower" = ps: with ps; [
    ]; # missing inputs: yeelightsunflower
    "yi" = ps: with ps; [
      aioftp
      ha-ffmpeg
    ];
    "yolink" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      psutil-home-assistant
      sqlalchemy
      yolink-api
    ];
    "youless" = ps: with ps; [
      youless-api
    ];
    "youtube" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      psutil-home-assistant
      sqlalchemy
    ]; # missing inputs: youtubeaio
    "zabbix" = ps: with ps; [
      py-zabbix
    ];
    "zamg" = ps: with ps; [
      zamg
    ];
    "zengge" = ps: with ps; [
      bluepy
    ]; # missing inputs: zengge
    "zeroconf" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      ifaddr
      psutil-home-assistant
      sqlalchemy
      zeroconf
    ];
    "zerproc" = ps: with ps; [
      pyzerproc
    ];
    "zestimate" = ps: with ps; [
      xmltodict
    ];
    "zeversolar" = ps: with ps; [
    ]; # missing inputs: zeversolar
    "zha" = ps: with ps; [
      aiohttp-cors
      bellows
      fnv-hash-fast
      janus
      pillow
      psutil-home-assistant
      pyserial
      pyserial-asyncio
      pyserial-asyncio-fast
      pyudev
      sqlalchemy
      universal-silabs-flasher
      zha-quirks
      zigpy
      zigpy-deconz
      zigpy-xbee
      zigpy-zigate
      zigpy-znp
    ];
    "zhong_hong" = ps: with ps; [
    ]; # missing inputs: zhong-hong-hvac
    "ziggo_mediabox_xl" = ps: with ps; [
    ]; # missing inputs: ziggo-mediabox-xl
    "zodiac" = ps: with ps; [
    ];
    "zone" = ps: with ps; [
    ];
    "zoneminder" = ps: with ps; [
      zm-py
    ];
    "zwave_js" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      psutil-home-assistant
      pyserial
      pyudev
      sqlalchemy
      zwave-js-server-python
    ];
    "zwave_me" = ps: with ps; [
      aiohttp-cors
      fnv-hash-fast
      ifaddr
      psutil-home-assistant
      sqlalchemy
      url-normalize
      zeroconf
      zwave-me-ws
    ];
  };
  # components listed in tests/components for which all dependencies are packaged
  supportedComponentsWithTests = [
    "abode"
    "accuweather"
    "acmeda"
    "adax"
    "adguard"
    "advantage_air"
    "aemet"
    "aftership"
    "agent_dvr"
    "air_quality"
    "airly"
    "airnow"
    "airq"
    "airthings"
    "airthings_ble"
    "airtouch4"
    "airvisual"
    "airvisual_pro"
    "airzone"
    "airzone_cloud"
    "aladdin_connect"
    "alarm_control_panel"
    "alarmdecoder"
    "alert"
    "alexa"
    "amberelectric"
    "ambiclimate"
    "ambient_station"
    "analytics"
    "android_ip_webcam"
    "androidtv"
    "androidtv_remote"
    "anthemav"
    "apache_kafka"
    "apcupsd"
    "api"
    "apple_tv"
    "application_credentials"
    "apprise"
    "aprs"
    "aranet"
    "arcam_fmj"
    "aseko_pool_live"
    "assist_pipeline"
    "asuswrt"
    "atag"
    "august"
    "aurora"
    "aurora_abb_powerone"
    "aussie_broadband"
    "auth"
    "automation"
    "awair"
    "aws"
    "axis"
    "azure_devops"
    "azure_event_hub"
    "backup"
    "baf"
    "balboa"
    "bayesian"
    "binary_sensor"
    "blackbird"
    "blebox"
    "blink"
    "bluemaestro"
    "blueprint"
    "bluetooth"
    "bluetooth_adapters"
    "bluetooth_le_tracker"
    "bmw_connected_drive"
    "bond"
    "bosch_shc"
    "braviatv"
    "broadlink"
    "brother"
    "brottsplatskartan"
    "brunt"
    "bsblan"
    "bthome"
    "buienradar"
    "button"
    "caldav"
    "calendar"
    "camera"
    "canary"
    "cast"
    "cert_expiry"
    "clicksend_tts"
    "climate"
    "cloud"
    "cloudflare"
    "co2signal"
    "color_extractor"
    "comelit"
    "comfoconnect"
    "command_line"
    "compensation"
    "config"
    "configurator"
    "control4"
    "conversation"
    "coolmaster"
    "counter"
    "cover"
    "cpuspeed"
    "crownstone"
    "daikin"
    "datadog"
    "date"
    "datetime"
    "debugpy"
    "deconz"
    "default_config"
    "deluge"
    "demo"
    "denonavr"
    "derivative"
    "device_automation"
    "device_sun_light_trigger"
    "device_tracker"
    "devolo_home_control"
    "devolo_home_network"
    "dexcom"
    "dhcp"
    "diagnostics"
    "dialogflow"
    "directv"
    "discord"
    "discovergy"
    "dlna_dmr"
    "dlna_dms"
    "dnsip"
    "doorbird"
    "dormakaba_dkey"
    "dremel_3d_printer"
    "dsmr"
    "dsmr_reader"
    "dte_energy_bridge"
    "duckdns"
    "dunehd"
    "duotecno"
    "dwd_weather_warnings"
    "eafm"
    "easyenergy"
    "ecobee"
    "ecoforest"
    "econet"
    "ecowitt"
    "edl21"
    "efergy"
    "eight_sleep"
    "elgato"
    "elkm1"
    "elmax"
    "emonitor"
    "emulated_hue"
    "emulated_kasa"
    "emulated_roku"
    "energy"
    "energyzero"
    "enocean"
    "enphase_envoy"
    "environment_canada"
    "epson"
    "escea"
    "esphome"
    "eufylife_ble"
    "event"
    "everlights"
    "evil_genius_labs"
    "ezviz"
    "faa_delays"
    "facebook"
    "facebox"
    "fail2ban"
    "fan"
    "feedreader"
    "ffmpeg"
    "fibaro"
    "fido"
    "file"
    "file_upload"
    "filesize"
    "filter"
    "fireservicerota"
    "firmata"
    "fitbit"
    "fivem"
    "fjaraskupan"
    "flic"
    "flick_electric"
    "flipr"
    "flo"
    "flume"
    "flux"
    "flux_led"
    "folder"
    "folder_watcher"
    "foobot"
    "forecast_solar"
    "foscam"
    "freebox"
    "freedns"
    "freedompro"
    "fritz"
    "fritzbox"
    "fritzbox_callmonitor"
    "fronius"
    "frontend"
    "frontier_silicon"
    "fully_kiosk"
    "garages_amsterdam"
    "gdacs"
    "generic"
    "generic_hygrostat"
    "generic_thermostat"
    "geo_json_events"
    "geo_location"
    "geo_rss_events"
    "geocaching"
    "geofency"
    "geonetnz_quakes"
    "geonetnz_volcano"
    "gios"
    "github"
    "glances"
    "goalzero"
    "gogogate2"
    "goodwe"
    "google"
    "google_assistant"
    "google_assistant_sdk"
    "google_domains"
    "google_generative_ai_conversation"
    "google_mail"
    "google_pubsub"
    "google_sheets"
    "google_tasks"
    "google_translate"
    "google_travel_time"
    "google_wifi"
    "govee_ble"
    "gpslogger"
    "graphite"
    "gree"
    "greeneye_monitor"
    "group"
    "growatt_server"
    "guardian"
    "habitica"
    "hardkernel"
    "hardware"
    "harmony"
    "hassio"
    "hddtemp"
    "hdmi_cec"
    "heos"
    "here_travel_time"
    "hisense_aehw4a1"
    "history"
    "history_stats"
    "hive"
    "hlk_sw16"
    "home_connect"
    "home_plus_control"
    "homeassistant"
    "homeassistant_alerts"
    "homeassistant_green"
    "homeassistant_hardware"
    "homeassistant_sky_connect"
    "homeassistant_yellow"
    "homekit"
    "homekit_controller"
    "homematic"
    "homematicip_cloud"
    "homewizard"
    "honeywell"
    "html5"
    "http"
    "huawei_lte"
    "hue"
    "huisbaasje"
    "humidifier"
    "hunterdouglas_powerview"
    "hvv_departures"
    "hydrawise"
    "hyperion"
    "ialarm"
    "iaqualink"
    "ibeacon"
    "icloud"
    "ifttt"
    "ign_sismologia"
    "image"
    "image_processing"
    "image_upload"
    "imap"
    "influxdb"
    "inkbird"
    "input_boolean"
    "input_button"
    "input_datetime"
    "input_number"
    "input_select"
    "input_text"
    "insteon"
    "integration"
    "intellifire"
    "intent"
    "intent_script"
    "ios"
    "ipma"
    "ipp"
    "iqvia"
    "islamic_prayer_times"
    "isy994"
    "izone"
    "jellyfin"
    "jewish_calendar"
    "juicenet"
    "justnimbus"
    "kaleidescape"
    "keenetic_ndms2"
    "kegtron"
    "keymitt_ble"
    "kira"
    "kitchen_sink"
    "kmtronic"
    "knx"
    "kodi"
    "konnected"
    "kostal_plenticore"
    "kraken"
    "kulersky"
    "lametric"
    "landisgyr_heat_meter"
    "lastfm"
    "launch_library"
    "laundrify"
    "lawn_mower"
    "lcn"
    "ld2410_ble"
    "led_ble"
    "lg_soundbar"
    "lidarr"
    "life360"
    "lifx"
    "light"
    "litterrobot"
    "livisi"
    "local_calendar"
    "local_file"
    "local_ip"
    "local_todo"
    "locative"
    "lock"
    "logbook"
    "logentries"
    "logger"
    "logi_circle"
    "london_air"
    "lookin"
    "loqed"
    "lovelace"
    "luftdaten"
    "lutron_caseta"
    "lyric"
    "mailbox"
    "mailgun"
    "manual"
    "manual_mqtt"
    "matrix"
    "matter"
    "maxcube"
    "mazda"
    "meater"
    "media_extractor"
    "media_player"
    "media_source"
    "melcloud"
    "meraki"
    "met"
    "met_eireann"
    "meteo_france"
    "meteoclimatic"
    "metoffice"
    "microsoft_face"
    "microsoft_face_detect"
    "microsoft_face_identify"
    "mikrotik"
    "mill"
    "min_max"
    "minecraft_server"
    "minio"
    "mjpeg"
    "moat"
    "mobile_app"
    "modbus"
    "modem_callerid"
    "modern_forms"
    "mold_indicator"
    "moon"
    "mopeka"
    "motion_blinds"
    "motioneye"
    "mqtt"
    "mqtt_eventstream"
    "mqtt_json"
    "mqtt_room"
    "mqtt_statestream"
    "mullvad"
    "mutesync"
    "my"
    "myq"
    "mysensors"
    "mystrom"
    "mythicbeastsdns"
    "nam"
    "namecheapdns"
    "nanoleaf"
    "neato"
    "ness_alarm"
    "nest"
    "netatmo"
    "netgear"
    "network"
    "nexia"
    "nextbus"
    "nextcloud"
    "nextdns"
    "nfandroidtv"
    "nibe_heatpump"
    "nightscout"
    "nina"
    "nmap_tracker"
    "no_ip"
    "nobo_hub"
    "notify"
    "notify_events"
    "notion"
    "nsw_rural_fire_service_feed"
    "nuheat"
    "nuki"
    "number"
    "nut"
    "nws"
    "nx584"
    "obihai"
    "octoprint"
    "omnilogic"
    "onboarding"
    "oncue"
    "ondilo_ico"
    "onewire"
    "onvif"
    "open_meteo"
    "openai_conversation"
    "openalpr_cloud"
    "openerz"
    "openexchangerates"
    "opengarage"
    "openhardwaremonitor"
    "openhome"
    "opensky"
    "opentherm_gw"
    "openuv"
    "openweathermap"
    "opnsense"
    "opower"
    "oralb"
    "otbr"
    "overkiz"
    "ovo_energy"
    "owntracks"
    "p1_monitor"
    "panasonic_viera"
    "panel_custom"
    "panel_iframe"
    "peco"
    "pegel_online"
    "persistent_notification"
    "person"
    "philips_js"
    "pi_hole"
    "picnic"
    "ping"
    "plaato"
    "plant"
    "plex"
    "plugwise"
    "point"
    "poolsense"
    "powerwall"
    "private_ble_device"
    "profiler"
    "prometheus"
    "prosegur"
    "proximity"
    "prusalink"
    "pure_energie"
    "purpleair"
    "push"
    "pushbullet"
    "pushover"
    "pvoutput"
    "pvpc_hourly_pricing"
    "python_script"
    "qingping"
    "qld_bushfire"
    "qnap"
    "qnap_qsw"
    "qwikswitch"
    "rachio"
    "radarr"
    "radio_browser"
    "radiotherm"
    "rainbird"
    "rainforest_eagle"
    "rainmachine"
    "random"
    "rapt_ble"
    "raspberry_pi"
    "rdw"
    "recollect_waste"
    "recorder"
    "recovery_mode"
    "reddit"
    "remote"
    "renault"
    "reolink"
    "repairs"
    "rest"
    "rest_command"
    "rflink"
    "rfxtrx"
    "rhasspy"
    "ridwell"
    "ring"
    "risco"
    "rituals_perfume_genie"
    "rmvtransport"
    "roborock"
    "roku"
    "roomba"
    "roon"
    "rpi_power"
    "rss_feed_template"
    "rtsp_to_webrtc"
    "ruckus_unleashed"
    "ruuvi_gateway"
    "ruuvitag_ble"
    "sabnzbd"
    "samsungtv"
    "scene"
    "schedule"
    "schlage"
    "scrape"
    "screenlogic"
    "script"
    "search"
    "season"
    "select"
    "sense"
    "sensibo"
    "sensirion_ble"
    "sensor"
    "sensorpro"
    "sensorpush"
    "sentry"
    "senz"
    "seventeentrack"
    "sfr_box"
    "sharkiq"
    "shell_command"
    "shelly"
    "shopping_list"
    "sia"
    "sigfox"
    "sighthound"
    "signal_messenger"
    "simplepush"
    "simplisafe"
    "simulated"
    "siren"
    "skybell"
    "slack"
    "sleepiq"
    "slimproto"
    "sma"
    "smappee"
    "smart_meter_texas"
    "smartthings"
    "smarttub"
    "smhi"
    "smtp"
    "snapcast"
    "snips"
    "snmp"
    "snooz"
    "solaredge"
    "solarlog"
    "solax"
    "soma"
    "somfy_mylink"
    "sonarr"
    "songpal"
    "sonos"
    "soundtouch"
    "spaceapi"
    "spc"
    "speedtestdotnet"
    "spider"
    "spotify"
    "sql"
    "squeezebox"
    "srp_energy"
    "ssdp"
    "starline"
    "startca"
    "statistics"
    "statsd"
    "steam_online"
    "steamist"
    "stookalert"
    "stream"
    "stt"
    "subaru"
    "sun"
    "surepetcare"
    "switch"
    "switch_as_x"
    "switchbee"
    "switchbot"
    "switcher_kis"
    "syncthing"
    "syncthru"
    "synology_dsm"
    "system_health"
    "system_log"
    "tado"
    "tag"
    "tailscale"
    "tankerkoenig"
    "tasmota"
    "tautulli"
    "tcp"
    "telegram"
    "telegram_bot"
    "tellduslive"
    "temper"
    "template"
    "tesla_wall_connector"
    "text"
    "thermobeacon"
    "thermopro"
    "thread"
    "threshold"
    "tibber"
    "tile"
    "tilt_ble"
    "time"
    "time_date"
    "timer"
    "tod"
    "todo"
    "todoist"
    "tolo"
    "tomato"
    "tomorrowio"
    "toon"
    "totalconnect"
    "tplink_omada"
    "traccar"
    "trace"
    "tractive"
    "tradfri"
    "trafikverket_camera"
    "trafikverket_ferry"
    "trafikverket_train"
    "trafikverket_weatherstation"
    "transmission"
    "transport_nsw"
    "trend"
    "tts"
    "tuya"
    "twentemilieu"
    "twilio"
    "twinkly"
    "twitch"
    "uk_transport"
    "ukraine_alarm"
    "unifi"
    "unifi_direct"
    "unifiprotect"
    "universal"
    "upb"
    "upcloud"
    "update"
    "upnp"
    "uptime"
    "uptimerobot"
    "usb"
    "usgs_earthquakes_feed"
    "utility_meter"
    "uvc"
    "vacuum"
    "vallox"
    "velbus"
    "venstar"
    "vera"
    "verisure"
    "version"
    "vesync"
    "vicare"
    "vilfo"
    "vizio"
    "vlc_telnet"
    "vodafone_station"
    "voicerss"
    "volumio"
    "volvooncall"
    "vulcan"
    "vultr"
    "wake_on_lan"
    "wake_word"
    "wallbox"
    "waqi"
    "water_heater"
    "watttime"
    "waze_travel_time"
    "weather"
    "weatherflow"
    "weatherkit"
    "webhook"
    "webostv"
    "websocket_api"
    "wemo"
    "whirlpool"
    "whois"
    "wiffi"
    "wilight"
    "withings"
    "wiz"
    "wled"
    "workday"
    "worldclock"
    "ws66i"
    "wsdot"
    "wyoming"
    "xbox"
    "xiaomi"
    "xiaomi_aqara"
    "xiaomi_ble"
    "xiaomi_miio"
    "yale_smart_alarm"
    "yalexs_ble"
    "yamaha"
    "yamaha_musiccast"
    "yandex_transport"
    "yandextts"
    "yardian"
    "yeelight"
    "yolink"
    "youless"
    "zamg"
    "zeroconf"
    "zerproc"
    "zha"
    "zodiac"
    "zone"
    "zwave_js"
    "zwave_me"
  ];
}
