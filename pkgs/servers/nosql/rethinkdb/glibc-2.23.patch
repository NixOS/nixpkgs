From 84be09f314c4cbf88b4ac8fe9dbff1d36f0f5781 Mon Sep 17 00:00:00 2001
From: Daniel Mewes <daniel@rethinkdb.com>
Date: Fri, 5 Feb 2016 18:45:28 -0800
Subject: [PATCH] Alpinelinux compilation fixes

by @clandmeter
---
 src/containers/buffer_group.hpp                            |  1 +
 src/containers/printf_buffer.hpp                           |  1 +
 src/errors.cc                                              |  2 +-
 src/rdb_protocol/geo/s2/util/math/exactfloat/exactfloat.cc |  4 ++--
 src/rdb_protocol/geo/s2/util/math/mathlimits.h             | 12 ++++++------
 src/threading.hpp                                          |  2 ++
 6 files changed, 13 insertions(+), 9 deletions(-)

diff --git a/src/containers/buffer_group.hpp b/src/containers/buffer_group.hpp
index 865c5cb..0403db6 100644
--- a/src/containers/buffer_group.hpp
+++ b/src/containers/buffer_group.hpp
@@ -3,6 +3,7 @@
 #define CONTAINERS_BUFFER_GROUP_HPP_
 
 #include <stdlib.h>
+#include <sys/types.h>
 #include <unistd.h>
 #include <vector>
 
diff --git a/src/containers/printf_buffer.hpp b/src/containers/printf_buffer.hpp
index b7a5154..76959f3 100644
--- a/src/containers/printf_buffer.hpp
+++ b/src/containers/printf_buffer.hpp
@@ -5,6 +5,7 @@
 #include <stdarg.h>
 #include <stdio.h>
 #include <string.h>
+#include <sys/types.h>
 
 // Cannot include utils.hpp, we are included by utils.hpp.
 #include "errors.hpp"
diff --git a/src/errors.cc b/src/errors.cc
index d40c04f..39efc9f 100644
--- a/src/errors.cc
+++ b/src/errors.cc
@@ -89,7 +89,7 @@ void report_fatal_error(const char *file, int line, const char *msg, ...) {
 }
 
 const char *errno_string_maybe_using_buffer(int errsv, char *buf, size_t buflen) {
-#ifdef _GNU_SOURCE
+#ifdef __GLIBC__
     return strerror_r(errsv, buf, buflen);
 #elif defined(_WIN32)
     UNUSED errno_t res = strerror_s(buf, buflen, errsv);
diff --git a/src/rdb_protocol/geo/s2/util/math/exactfloat/exactfloat.cc b/src/rdb_protocol/geo/s2/util/math/exactfloat/exactfloat.cc
index 3b07392..aa1a1d3 100644
--- a/src/rdb_protocol/geo/s2/util/math/exactfloat/exactfloat.cc
+++ b/src/rdb_protocol/geo/s2/util/math/exactfloat/exactfloat.cc
@@ -110,9 +110,9 @@ static int BN_ext_count_low_zero_bits(const BIGNUM* bn) {
 ExactFloat::ExactFloat(double v) {
   BN_init(&bn_);
   sign_ = signbit(v) ? -1 : 1;
-  if (isnan(v)) {
+  if (std::isnan(v)) {
     set_nan();
-  } else if (isinf(v)) {
+  } else if (std::isinf(v)) {
     set_inf(sign_);
   } else {
     // The following code is much simpler than messing about with bit masks,
diff --git a/src/rdb_protocol/geo/s2/util/math/mathlimits.h b/src/rdb_protocol/geo/s2/util/math/mathlimits.h
index 5148422..86af72d 100644
--- a/src/rdb_protocol/geo/s2/util/math/mathlimits.h
+++ b/src/rdb_protocol/geo/s2/util/math/mathlimits.h
@@ -14,7 +14,7 @@
 #define UTIL_MATH_MATHLIMITS_H__
 
 #include <string.h>
-#include <math.h>
+#include <cmath>
 #include <cfloat>
 
 #include "rdb_protocol/geo/s2/base/basictypes.h"
@@ -195,11 +195,11 @@ DECL_UNSIGNED_INT_LIMITS(unsigned long long int)
   static bool IsNegInf(const Type x) { return _fpclass(x) == _FPCLASS_NINF; }
 #else
 #define DECL_FP_LIMIT_FUNCS \
-  static bool IsFinite(const Type x) { return !isinf(x)  &&  !isnan(x); } \
-  static bool IsNaN(const Type x) { return isnan(x); } \
-  static bool IsInf(const Type x) { return isinf(x); } \
-  static bool IsPosInf(const Type x) { return isinf(x)  &&  x > 0; } \
-  static bool IsNegInf(const Type x) { return isinf(x)  &&  x < 0; }
+  static bool IsFinite(const Type x) { return !std::isinf(x)  &&  !std::isnan(x); } \
+  static bool IsNaN(const Type x) { return std::isnan(x); } \
+  static bool IsInf(const Type x) { return std::isinf(x); } \
+  static bool IsPosInf(const Type x) { return std::isinf(x)  &&  x > 0; } \
+  static bool IsNegInf(const Type x) { return std::isinf(x)  &&  x < 0; }
 #endif
 
 // We can't put floating-point constant values in the header here because
diff --git a/src/threading.hpp b/src/threading.hpp
index 14fc6a8..9bf033f 100644
--- a/src/threading.hpp
+++ b/src/threading.hpp
@@ -1,6 +1,8 @@
 #ifndef THREADING_HPP_
 #define THREADING_HPP_
 
+#include <sys/types.h>
+#include <unistd.h>
 #include <functional>
 #include <vector>
 
