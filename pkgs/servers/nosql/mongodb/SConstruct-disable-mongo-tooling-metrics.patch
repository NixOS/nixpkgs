--- a/SConstruct	2024-06-19 03:26:19 UTC
+++ a/SConstruct
@@ -23,7 +23,6 @@ import SCons.Script

 import SCons
 import SCons.Script
-from mongo_tooling_metrics.lib.top_level_metrics import SConsToolingMetrics
 from site_scons.mongo import build_profiles

 # This must be first, even before EnsureSConsVersion, if
@@ -1653,16 +1652,6 @@ env.AddMethod(lambda env, name, **kwargs: add_option(n
 del envDict
 env.AddMethod(lambda env, name, **kwargs: add_option(name, **kwargs), 'AddOption')

-# The placement of this is intentional. Here we setup an atexit method to store tooling metrics.
-# We should only register this function after env, env_vars and the parser have been properly initialized.
-SConsToolingMetrics.register_metrics(
-    utc_starttime=datetime.utcnow(),
-    artifact_dir=env.Dir('$BUILD_DIR').get_abspath(),
-    env_vars=env_vars,
-    env=env,
-    parser=_parser,
-)
-
 if get_option('build-metrics'):
     env['BUILD_METRICS_ARTIFACTS_DIR'] = '$BUILD_ROOT/$VARIANT_DIR'
     env.Tool('build_metrics')
@@ -1799,9 +1788,9 @@ if has_option('variables-help'):
     print(env_vars.GenerateHelpText(env))
     Exit(0)

-unknown_vars = env_vars.UnknownVariables()
-if unknown_vars:
-    env.FatalError("Unknown variables specified: {0}", ", ".join(list(unknown_vars.keys())))
+#unknown_vars = env_vars.UnknownVariables()
+#if unknown_vars:
+#    env.FatalError("Unknown variables specified: {0}", ", ".join(list(unknown_vars.keys())))

 install_actions.setup(env, get_option('install-action'))
