{
  haskell,
  haskellPackages,
  pkgs,
  testers,
}:

let
  inherit (haskell.lib.compose) doCheck dontCheck setBuildTarget;

  # This can be regenerated by running `cabal2nix ./src` in the current directory.
  pkgDef =
    {
      mkDerivation,
      base,
      lib,
    }:
    mkDerivation {
      pname = "haskell-setBuildTarget";
      version = "0.1.0.0";
      src = ./src;
      isLibrary = true;
      isExecutable = true;
      libraryHaskellDepends = [ base ];
      executableHaskellDepends = [ base ];
      testHaskellDepends = [ base ];
      license = "unknown";
    };

  drv = haskellPackages.callPackage pkgDef { };

  test =
    target: excluded:
    let
      only = dontCheck (setBuildTarget target drv);
    in
    ''
      if [[ ! -f "${only}/bin/${target}" ]]; then
        echo "${target} was not built"
        exit 1
      fi

      if [[ -f "${only}/bin/${excluded}" ]]; then
        echo "${excluded} was built, when it should not have been"
        exit 1
      fi
    '';

in
{
  pass-setBuildTarget =
    pkgs.runCommand "test haskell.lib.compose.setBuildTarget"
      { meta = { inherit (drv.meta) platforms; }; }
      ''
        ${test "foo" "bar"}
        ${test "bar" "foo"}
        touch "$out"
      '';

  # Not building the test-suite (that is mentioned in the .cabal file) is a
  # failure when doCheck=true.
  fail-doCheck-setBuildTarget =
    pkgs.runCommand "fail-doCheck-setBuildTarget"
      { result = testers.testBuildFailure (doCheck (setBuildTarget "exe:foo" drv)); }
      ''
        echo Checking testBuildFailure.log:
        grep -F 'Test suite sometest: FAIL' $result/testBuildFailure.log
        grep -F '/build/src/dist/build/sometest/sometest: cannot execute: required file not found' $result/testBuildFailure.log
        touch "$out"
      '';
}
