<<<<<<< HEAD
{ lib, stdenv, glibcLocales, fetchurl, pcre2, libiconv, perl }:
=======
{ lib, stdenv, fetchurl, pcre, libiconv, perl, autoreconfHook }:
>>>>>>> 903308adb4b (Improved error handling, differentiate nix/non-nix networks)

# Note: this package is used for bootstrapping fetchurl, and thus
# cannot use fetchpatch! All mutable patches (generated by GitHub or
# cgit) that are needed here should be included directly in Nixpkgs as
# files.

<<<<<<< HEAD
let version = "3.11"; in
=======
let version = "3.7"; in
>>>>>>> 903308adb4b (Improved error handling, differentiate nix/non-nix networks)

stdenv.mkDerivation {
  pname = "gnugrep";
  inherit version;

  src = fetchurl {
    url = "mirror://gnu/grep/grep-${version}.tar.xz";
<<<<<<< HEAD
    hash = "sha256-HbKu3eidDepCsW2VKPiUyNFdrk4ZC1muzHj1qVEnbqs=";
  };

  # Some gnulib tests fail
  # - on Musl: https://github.com/NixOS/nixpkgs/pull/228714
  # - on x86_64-darwin: https://github.com/NixOS/nixpkgs/pull/228714#issuecomment-1576826330
  postPatch = if stdenv.hostPlatform.isMusl || (stdenv.hostPlatform.isDarwin && stdenv.hostPlatform.isx86_64) then ''
    sed -i 's:gnulib-tests::g' Makefile.in
  '' else null;

  nativeCheckInputs = [ perl glibcLocales ];
  outputs = [ "out" "info" ]; # the man pages are rather small

  buildInputs = [ pcre2 libiconv ];

  # cygwin: FAIL: multibyte-white-space
  # freebsd: FAIL mb-non-UTF8-performance
  # x86_64-darwin: fails 'stack-overflow' tests on Rosetta 2 emulator
  doCheck = !stdenv.isCygwin && !stdenv.isFreeBSD && !(stdenv.isDarwin && stdenv.hostPlatform.isx86_64);
=======
    sha256 = "0g42svbc1nq5bamxfj6x7320wli4dlj86padk0hwgbk04hqxl42w";
  };

  # https://git.savannah.gnu.org/cgit/gnulib.git/commit/?id=b50c6442e43d79471a31a2a202d3e50c0557446f
  patches = lib.optional stdenv.hostPlatform.isLoongArch64 ./sigsegv-loongarch.patch;

  # Perl is needed for testing
  nativeBuildInputs = [ perl ] ++ lib.optional stdenv.hostPlatform.isLoongArch64 autoreconfHook;
  outputs = [ "out" "info" ]; # the man pages are rather small

  buildInputs = [ pcre libiconv ];

  # cygwin: FAIL: multibyte-white-space
  # freebsd: FAIL mb-non-UTF8-performance
  # all platforms: timing sensitivity in long-pattern-perf
  #doCheck = !stdenv.isDarwin && !stdenv.isSunOS && !stdenv.isCygwin && !stdenv.isFreeBSD;
  doCheck = false;
>>>>>>> 903308adb4b (Improved error handling, differentiate nix/non-nix networks)

  # On macOS, force use of mkdir -p, since Grep's fallback
  # (./install-sh) is broken.
  preConfigure = ''
    export MKDIR_P="mkdir -p"
  '';

<<<<<<< HEAD
  enableParallelBuilding = true;

=======
>>>>>>> 903308adb4b (Improved error handling, differentiate nix/non-nix networks)
  # Fix reference to sh in bootstrap-tools, and invoke grep via
  # absolute path rather than looking at argv[0].
  postInstall =
    ''
      rm $out/bin/egrep $out/bin/fgrep
      echo "#! /bin/sh" > $out/bin/egrep
      echo "exec $out/bin/grep -E \"\$@\"" >> $out/bin/egrep
      echo "#! /bin/sh" > $out/bin/fgrep
      echo "exec $out/bin/grep -F \"\$@\"" >> $out/bin/fgrep
      chmod +x $out/bin/egrep $out/bin/fgrep
    '';

  meta = with lib; {
    homepage = "https://www.gnu.org/software/grep/";
    description = "GNU implementation of the Unix grep command";

    longDescription = ''
      The grep command searches one or more input files for lines
      containing a match to a specified pattern.  By default, grep
      prints the matching lines.
    '';

    license = licenses.gpl3Plus;

    maintainers = [
<<<<<<< HEAD
      maintainers.das_j
=======
      maintainers.eelco
>>>>>>> 903308adb4b (Improved error handling, differentiate nix/non-nix networks)
      maintainers.m00wl
    ];
    platforms = platforms.all;
    mainProgram = "grep";
  };

<<<<<<< HEAD
  passthru = {
    inherit pcre2;
  };
=======
  passthru = {inherit pcre;};
>>>>>>> 903308adb4b (Improved error handling, differentiate nix/non-nix networks)
}
