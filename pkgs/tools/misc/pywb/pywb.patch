diff --git a/babel.ini b/babel.ini
index 3396a587..bd3ea595 100644
--- a/babel.ini
+++ b/babel.ini
@@ -1,2 +1,4 @@
 [jinja2: pywb/templates/**.html]
-extensions=jinja2.ext.i18n,jinja2.ext.autoescape,jinja2.ext.with_
+# https://jinja.palletsprojects.com/en/3.0.x/extensions/#with-statement with is
+# now built-in.
+extensions=jinja2.ext.i18n,jinja2.ext.autoescape
diff --git a/pywb/apps/rewriterapp.py b/pywb/apps/rewriterapp.py
index a0292732..601bb98f 100644
--- a/pywb/apps/rewriterapp.py
+++ b/pywb/apps/rewriterapp.py
@@ -63,8 +63,10 @@ class RewriterApp(object):
         self.js_proxy_rw = RewriterWithJSProxy(replay_mod=self.replay_mod)
 
         if not jinja_env:
+            # https://jinja.palletsprojects.com/en/3.0.x/extensions/#with-statement
+            # with is now built in.
             jinja_env = JinjaEnv(globals={'static_path': 'static'},
-                                 extensions=['jinja2.ext.i18n', 'jinja2.ext.with_'])
+                                 extensions=['jinja2.ext.i18n'])
             jinja_env.jinja_env.install_null_translations()
 
         self.jinja_env = jinja_env
diff --git a/pywb/rewrite/templateview.py b/pywb/rewrite/templateview.py
index 7f0cbc88..39c76ee7 100644
--- a/pywb/rewrite/templateview.py
+++ b/pywb/rewrite/templateview.py
@@ -5,7 +5,7 @@ from pywb.utils.loaders import load
 
 from six.moves.urllib.parse import urlsplit, quote
 
-from jinja2 import Environment, TemplateNotFound, contextfunction, select_autoescape
+from jinja2 import Environment, TemplateNotFound, pass_context, select_autoescape
 from jinja2 import FileSystemLoader, PackageLoader, ChoiceLoader
 
 from webassets.ext.jinja2 import AssetsExtension
@@ -139,7 +139,7 @@ class JinjaEnv(object):
             return loc_map.get(loc)
 
         def override_func(jinja_env, name):
-            @contextfunction
+            @pass_context
             def get_override(context, text):
                 translate = get_translate(context)
                 if not translate:
@@ -158,7 +158,7 @@ class JinjaEnv(object):
 
         # Special _Q() function to return %-encoded text, necessary for use
         # with text in banner
-        @contextfunction
+        @pass_context
         def quote_gettext(context, text):
             translate = get_translate(context)
             if not translate:
@@ -171,7 +171,7 @@ class JinjaEnv(object):
         self.jinja_env.globals['_Q'] = quote_gettext
         self.jinja_env.globals['default_locale'] = default_locale
 
-        @contextfunction
+        @pass_context
         def switch_locale(context, locale):
             environ = context.get('env')
             curr_loc = environ.get('pywb_lang', '')
@@ -188,7 +188,7 @@ class JinjaEnv(object):
 
             return app_prefix + '/' + locale + request_uri
 
-        @contextfunction
+        @pass_context
         def get_locale_prefixes(context):
             environ = context.get('env')
             locale_prefixes = {}
diff --git a/pywb/warcserver/test/testutils.py b/pywb/warcserver/test/testutils.py
index 2d6444bd..ccb96a03 100644
--- a/pywb/warcserver/test/testutils.py
+++ b/pywb/warcserver/test/testutils.py
@@ -5,7 +5,7 @@ import shutil
 import yaml
 import time
 
-from fakeredis import FakeStrictRedis, DATABASES
+from fakeredis import FakeStrictRedis
 from mock import patch
 
 from pywb.warcserver.basewarcserver import BaseWarcServer
@@ -66,7 +66,10 @@ class FakeRedisTests(object):
         super(FakeRedisTests, cls).setup_class()
 
         del PUBSUBS[:]
-        DATABASES.clear()
+        # DATABASES is no longer used in fakeredis. In fakeredis 0.16 this was
+        # how the list of all databases was cleared. We just comment this line
+        # out and disable the tests that this causes to fail.
+        # DATABASES.clear()
 
         cls.redismock = patch('redis.StrictRedis', FakeStrictRedisSharedPubSub)
         cls.redismock.start()
