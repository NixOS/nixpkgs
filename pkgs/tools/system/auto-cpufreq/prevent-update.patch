diff --git a/auto_cpufreq/core.py b/auto_cpufreq/core.py
index 0ef4315..fe9dc25 100755
--- a/auto_cpufreq/core.py
+++ b/auto_cpufreq/core.py
@@ -19,7 +19,6 @@ from math import isclose
 from pathlib import Path
 from shutil import which
 from subprocess import getoutput, call, run, check_output, DEVNULL
-import requests
 import re
 
 # execution timestamp used in countdown func


diff --git a/auto_cpufreq/bin/auto_cpufreq.py b/auto_cpufreq/bin/auto_cpufreq.py
index db2b84d..0425338 100755
--- a/auto_cpufreq/bin/auto_cpufreq.py
+++ b/auto_cpufreq/bin/auto_cpufreq.py
@@ -225,47 +225,7 @@ def main(config, daemon, debug, update, install, remove, live, log, monitor, sta
                 remove_daemon()
                 remove_complete_msg()
         elif update:
-            root_check()
-            custom_dir = "/opt/auto-cpufreq/source"
-            for arg in sys.argv:
-                if arg.startswith("--update="):
-                    custom_dir = arg.split("=")[1]
-                    sys.argv.remove(arg)
-                    
-            if "--update" in sys.argv:
-                update = True
-                sys.argv.remove("--update")
-                if len(sys.argv) == 2:
-                    custom_dir = sys.argv[1] 
-                    
-            if os.getenv("PKG_MARKER") == "SNAP":
-                print("Detected auto-cpufreq was installed using snap")
-                # refresh snap directly using this command
-                # path wont work in this case
-
-                print("Please update using snap package manager, i.e: `sudo snap refresh auto-cpufreq`.")
-                #check for AUR 
-            elif subprocess.run(["bash", "-c", "command -v pacman >/dev/null 2>&1"]).returncode == 0 and subprocess.run(["bash", "-c", "pacman -Q auto-cpufreq >/dev/null 2>&1"]).returncode == 0:
-                print("Arch-based distribution with AUR support detected. Please refresh auto-cpufreq using your AUR helper.")
-            else:
-                is_new_update = check_for_update()
-                if not is_new_update:
-                    return
-                ans = input("Do you want to update auto-cpufreq to the latest release? [Y/n]: ").strip().lower()
-                if not os.path.exists(custom_dir):
-                    os.makedirs(custom_dir)
-                if os.path.exists(os.path.join(custom_dir, "auto-cpufreq")):
-                    shutil.rmtree(os.path.join(custom_dir, "auto-cpufreq"))
-                if ans in ['', 'y', 'yes']:
-                    remove_daemon()
-                    remove_complete_msg()
-                    new_update(custom_dir)
-                    print("enabling daemon")
-                    run(["auto-cpufreq", "--install"])
-                    print("auto-cpufreq is installed with the latest version")
-                    run(["auto-cpufreq", "--version"])
-                else:
-                    print("Aborted")
+             print("Update is disabled in the Nix package")
 
         elif completions:
             if completions == "bash":
diff --git a/auto_cpufreq/core.py b/auto_cpufreq/core.py
index e355ff3..a0e9c48 100755
--- a/auto_cpufreq/core.py
+++ b/auto_cpufreq/core.py
@@ -167,40 +167,8 @@ def app_version():
             pass
 
 def check_for_update():
-    # returns True if a new release is available from the GitHub repo
+    pass
 
-    # Specify the repository and package name
-    # IT IS IMPORTANT TO  THAT IF THE REPOSITORY STRUCTURE IS CHANGED, THE FOLLOWING FUNCTION NEEDS TO BE UPDATED ACCORDINGLY
-    # Fetch the latest release information from GitHub API
-    latest_release_url = f"https://api.github.com/repos/AdnanHodzic/auto-cpufreq/releases/latest"
-    try:
-        latest_release = requests.get(latest_release_url).json()
-    except (requests.exceptions.ConnectionError, requests.exceptions.Timeout,
-            requests.exceptions.RequestException, requests.exceptions.HTTPError) as err:
-        print ("Error Connecting to server!")
-        return False
-
-    latest_version =  latest_release["tag_name"]
-
-    # Get the current version of auto-cpufreq
-    # Extract version number from the output string
-    output = check_output(['auto-cpufreq', '--version']).decode('utf-8')
-    try:
-        version_line = next((re.search(r'\d+\.\d+\.\d+', line).group() for line in output.split('\n') if line.startswith('auto-cpufreq version')), None)
-    except AttributeError:
-        print("Error Retrieving Current Version!")
-        exit(1)
-    installed_version = "v" + version_line
-    #Check whether the same is installed or not
-    # Compare the latest version with the installed version and perform update if necessary
-    if latest_version == installed_version:
-        print("auto-cpufreq is up to date")
-        return False
-    else:
-        print(f"Updates are available,\nCurrent version: {installed_version}\nLatest version: {latest_version}")
-        print("Note that your previous custom settings might be erased with the following update")
-        return True
-    
 def new_update(custom_dir):
     os.chdir(custom_dir)
     print(f"Cloning the latest release to {custom_dir}")
