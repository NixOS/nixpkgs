diff --git a/auto_cpufreq/core.py b/auto_cpufreq/core.py
index 0ef4315..fe9dc25 100755
--- a/auto_cpufreq/core.py
+++ b/auto_cpufreq/core.py
@@ -19,7 +19,6 @@ from math import isclose
 from pathlib import Path
 from shutil import which
 from subprocess import getoutput, call, run, check_output, DEVNULL
-import requests
 import re
 
 # execution timestamp used in countdown func


diff --git a/auto_cpufreq/bin/auto_cpufreq.py b/auto_cpufreq/bin/auto_cpufreq.py
index db2b84d..0425338 100755
--- a/auto_cpufreq/bin/auto_cpufreq.py
+++ b/auto_cpufreq/bin/auto_cpufreq.py
@@ -225,47 +225,7 @@ def main(config, daemon, debug, update, install, remove, live, log, monitor, sta
                 remove_daemon()
                 remove_complete_msg()
         elif update:
-            root_check()
-            custom_dir = "/opt/auto-cpufreq/source"
-            for arg in sys.argv:
-                if arg.startswith("--update="):
-                    custom_dir = arg.split("=")[1]
-                    sys.argv.remove(arg)
-                    
-            if "--update" in sys.argv:
-                update = True
-                sys.argv.remove("--update")
-                if len(sys.argv) == 2:
-                    custom_dir = sys.argv[1] 
-                    
-            if os.getenv("PKG_MARKER") == "SNAP":
-                print("Detected auto-cpufreq was installed using snap")
-                # refresh snap directly using this command
-                # path wont work in this case
-
-                print("Please update using snap package manager, i.e: `sudo snap refresh auto-cpufreq`.")
-                #check for AUR 
-            elif subprocess.run(["bash", "-c", "command -v pacman >/dev/null 2>&1"]).returncode == 0 and subprocess.run(["bash", "-c", "pacman -Q auto-cpufreq >/dev/null 2>&1"]).returncode == 0:
-                print("Arch-based distribution with AUR support detected. Please refresh auto-cpufreq using your AUR helper.")
-            else:
-                is_new_update = check_for_update()
-                if not is_new_update:
-                    return
-                ans = input("Do you want to update auto-cpufreq to the latest release? [Y/n]: ").strip().lower()
-                if not os.path.exists(custom_dir):
-                    os.makedirs(custom_dir)
-                if os.path.exists(os.path.join(custom_dir, "auto-cpufreq")):
-                    shutil.rmtree(os.path.join(custom_dir, "auto-cpufreq"))
-                if ans in ['', 'y', 'yes']:
-                    remove_daemon()
-                    remove_complete_msg()
-                    new_update(custom_dir)
-                    print("enabling daemon")
-                    run(["auto-cpufreq", "--install"])
-                    print("auto-cpufreq is installed with the latest version")
-                    run(["auto-cpufreq", "--version"])
-                else:
-                    print("Aborted")
+             print("Update is disabled in the Nix package")
 
         elif completions:
             if completions == "bash":
