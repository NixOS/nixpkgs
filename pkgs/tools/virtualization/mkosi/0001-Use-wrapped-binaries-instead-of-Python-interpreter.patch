From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Moritz Sanft <58110325+msanft@users.noreply.github.com>
Date: Tue, 3 Sep 2024 08:57:26 +0200
Subject: [PATCH] Use wrapped binaries instead of Python interpreter

Rather than calling ukify and mkosi with sys.executable, which doesn't use the Python wrappers for PATH and PYTHONPATH, we call the wrapped binaries directly.

Signed-off-by: Moritz Sanft <58110325+msanft@users.noreply.github.com>
---
 mkosi/__init__.py   | 10 +++++-----
 mkosi/bootloader.py |  5 +----
 mkosi/run.py        |  8 ++++----
 3 files changed, 10 insertions(+), 13 deletions(-)

diff --git a/mkosi/__init__.py b/mkosi/__init__.py
index c5f785d4f18564378021352fde76be62078324ed..580a5c6464397be5a1977b794d7c044724d43490 100644
--- a/mkosi/__init__.py
+++ b/mkosi/__init__.py
@@ -658,7 +658,7 @@ def script_maybe_chroot_sandbox(
 
     helpers = {
         "mkosi-chroot": [
-            finalize_interpreter(bool(context.config.tools_tree)), "-SI", "/sandbox.py",
+            @MKOSI_SANDBOX@,
             "--bind", "/buildroot", "/",
             "--bind", "/var/tmp", "/var/tmp",
             *apivfs_options(root=Path("/")),
@@ -1534,7 +1534,7 @@ def run_ukify(
     options: Sequence[PathString] = (),
     sign: bool = True,
 ) -> None:
-    ukify = context.config.find_binary("ukify", "/usr/lib/systemd/ukify")
+    ukify = context.config.find_binary("ukify", "@UKIFY@")
     if not ukify:
         die("Could not find ukify")
 
@@ -1629,7 +1629,7 @@ def build_uki(
     profiles: Sequence[Path],
     output: Path,
 ) -> None:
-    if not (ukify := context.config.find_binary("ukify", "/usr/lib/systemd/ukify")):
+    if not (ukify := context.config.find_binary("ukify", "@UKIFY@")):
         die("Could not find ukify")
 
     arguments: list[PathString] = [
@@ -1764,7 +1764,7 @@ def want_uki(context: Context) -> bool:
         or (
             context.config.unified_kernel_images == ConfigFeature.auto
             and systemd_stub_binary(context).exists()
-            and context.config.find_binary("ukify", "/usr/lib/systemd/ukify") is not None
+            and context.config.find_binary("ukify", "@UKIFY@") is not None
         )
     )
 
@@ -2641,7 +2641,7 @@ def check_ukify(
     reason: str,
     hint: Optional[str] = None,
 ) -> None:
-    ukify = check_tool(config, "ukify", "/usr/lib/systemd/ukify", reason=reason, hint=hint)
+    ukify = check_tool(config, "ukify", "@UKIFY@", reason=reason, hint=hint)
 
     v = systemd_tool_version(python_binary(config), ukify, sandbox=config.sandbox)
     if v < version:
diff --git a/mkosi/bootloader.py b/mkosi/bootloader.py
index 87a56cc03cc42df41babfe15195e84ab956a3a21..060d3816a5cc287ea61df55fd0696e49b621908f 100644
--- a/mkosi/bootloader.py
+++ b/mkosi/bootloader.py
@@ -264,10 +264,7 @@ def find_signed_grub_image(context: Context) -> Optional[Path]:
 
 
 def python_binary(config: Config) -> PathString:
-    # If there's no tools tree, prefer the interpreter from MKOSI_INTERPRETER. If there is a tools
-    # tree, just use the default python3 interpreter.
-    exe = Path(sys.executable)
-    return "python3" if config.tools_tree or not exe.is_relative_to("/usr") else exe
+    return "@PYTHON_PEFILE@"
 
 
 def extract_pe_section(context: Context, binary: Path, section: str, output: Path) -> Path:
diff --git a/mkosi/run.py b/mkosi/run.py
index a0e2b9cf00b5e9e9d14b570b052f1b2807b46407..fe1a1cdee6f9a586a85a6894d7a97fa5688b29f7 100644
--- a/mkosi/run.py
+++ b/mkosi/run.py
@@ -378,7 +378,7 @@ def finalize_path(
         # Make sure that /usr/bin and /usr/sbin are always in $PATH.
         path += [s for s in ("/usr/bin", "/usr/sbin") if s not in path]
     else:
-        path += ["/usr/bin", "/usr/sbin"]
+        path += ["/usr/bin", "/usr/sbin", "@NIX_PATH@"]
 
     if prefix_usr:
         path = [os.fspath(root / s.lstrip("/")) if s in ("/usr/bin", "/usr/sbin") else s for s in path]
@@ -564,7 +564,7 @@ def sandbox_cmd(
         cmdline: list[PathString] = [
             *setup,
             *(["strace", "--detach-on=execve"] if ARG_DEBUG_SANDBOX.get() else []),
-            sys.executable, "-SI", module / "sandbox.py",
+            @MKOSI_SANDBOX@,
             "--proc", "/proc",
             # We mounted a subdirectory of TMPDIR to /var/tmp so we unset TMPDIR so that /tmp or /var/tmp are
             # used instead.
@@ -730,7 +730,7 @@ def chroot_options() -> list[PathString]:
         "--unshare-ipc",
         "--setenv", "container", "mkosi",
         "--setenv", "HOME", "/",
-        "--setenv", "PATH", "/usr/bin:/usr/sbin",
+        "--setenv", "PATH", "/usr/bin:/usr/sbin:@NIX_PATH@",
         "--setenv", "BUILDROOT", "/",
     ]  # fmt: skip
 
@@ -744,7 +744,7 @@ def chroot_cmd(
 ) -> Iterator[list[PathString]]:
     with vartmpdir() as dir, resource_path(sys.modules[__package__ or __name__]) as module:
         cmdline: list[PathString] = [
-            sys.executable, "-SI", module / "sandbox.py",
+            @MKOSI_SANDBOX@,
             "--bind", root, "/",
             # We mounted a subdirectory of TMPDIR to /var/tmp so we unset TMPDIR so that /tmp or /var/tmp are
             # used instead.
