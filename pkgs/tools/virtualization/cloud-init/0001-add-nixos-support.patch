From 269cc4c9558549f340ec186d9246654564b2f633 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?J=C3=B6rg=20Thalheim?= <joerg@thalheim.io>
Date: Tue, 18 Aug 2020 10:22:36 +0100
Subject: [PATCH] add nixos support
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: JÃ¶rg Thalheim <joerg@thalheim.io>
---
 cloudinit/distros/__init__.py |   1 +
 cloudinit/distros/nixos.py    | 103 ++++++++++++++++++++++++++++++++++
 2 files changed, 104 insertions(+)
 create mode 100644 cloudinit/distros/nixos.py

diff --git a/cloudinit/distros/__init__.py b/cloudinit/distros/__init__.py
index 2537608f..c533b585 100755
--- a/cloudinit/distros/__init__.py
+++ b/cloudinit/distros/__init__.py
@@ -47,6 +47,7 @@ OSFAMILIES = {
     'gentoo': ['gentoo'],
     'redhat': ['amazon', 'centos', 'fedora', 'rhel'],
     'suse': ['opensuse', 'sles'],
+    'nixos': ['nixos'],
 }
 
 LOG = logging.getLogger(__name__)
diff --git a/cloudinit/distros/nixos.py b/cloudinit/distros/nixos.py
new file mode 100644
index 00000000..d53d2a61
--- /dev/null
+++ b/cloudinit/distros/nixos.py
@@ -0,0 +1,103 @@
+# vi: ts=4 expandtab
+#
+#    Copyright (C) 2012 Canonical Ltd.
+#    Copyright (C) 2012 Hewlett-Packard Development Company, L.P.
+#    Copyright (C) 2012 Yahoo! Inc.
+#
+#    Author: Scott Moser <scott.moser@canonical.com>
+#    Author: Juerg Haefliger <juerg.haefliger@hp.com>
+#    Author: Joshua Harlow <harlowja@yahoo-inc.com>
+#
+#    This program is free software: you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License version 3, as
+#    published by the Free Software Foundation.
+#
+#    This program is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+import os
+
+from cloudinit import distros
+from cloudinit import helpers
+from cloudinit import log as logging
+from cloudinit import util
+from cloudinit import atomic_helper
+
+from cloudinit.distros.parsers.hostname import HostnameConf
+
+LOG = logging.getLogger(__name__)
+
+class Distro(distros.Distro):
+
+    def __init__(self, name, cfg, paths):
+        distros.Distro.__init__(self, name, cfg, paths)
+        # This will be used to restrict certain
+        # calls from repeatly happening (when they
+        # should only happen say once per instance...)
+        self._runner = helpers.Runners(paths)
+        self.usr_lib_exec = os.path.join(os.path.dirname(__file__),
+                                         "../../../../../libexec")
+        self.osfamily = 'nixos'
+
+    def _select_hostname(self, hostname, fqdn):
+        # Prefer the short hostname over the long
+        # fully qualified domain name
+        if not hostname:
+            return fqdn
+        return hostname
+
+    def _write_hostname(self, your_hostname, out_fn):
+        conf = None
+        try:
+            # Try to update the previous one
+            # so lets see if we can read it first.
+            conf = self._read_hostname_conf(out_fn)
+        except IOError:
+            pass
+        if not conf:
+            conf = HostnameConf('')
+        conf.set_hostname(your_hostname)
+        atomic_helper.write_file(out_fn, str(conf).encode("utf-8"))
+
+    def _read_system_hostname(self):
+        sys_hostname = self._read_hostname(self.hostname_conf_fn)
+        return (self.hostname_conf_fn, sys_hostname)
+
+    def _read_hostname_conf(self, filename):
+        conf = HostnameConf(util.load_file(filename))
+        conf.parse()
+        return conf
+
+    def _read_hostname(self, filename, default=None):
+        hostname = None
+        try:
+            conf = self._read_hostname_conf(filename)
+            hostname = conf.hostname
+        except IOError:
+            pass
+        if not hostname:
+            return default
+        return hostname
+
+    def _write_network(self, settings):
+        raise NotImplementedError()
+
+    def apply_locale(self, locale, out_fn=None):
+        raise NotImplementedError()
+
+    def install_packages(self, pkglist):
+        raise NotImplementedError()
+
+    def package_command(self, command, args=None, pkgs=None):
+        raise NotImplementedError()
+
+    def set_timezone(self, tz):
+        raise NotImplementedError()
+
+    def update_package_sources(self):
+        raise NotImplementedError()
-- 
2.28.0

