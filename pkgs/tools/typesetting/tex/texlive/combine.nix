params: with params;
# combine =
args@{ extraName ? "combined"
, extraVersion ? ""
, extraOutputsToInstall ? [ "man" ]
, pkgFilter ? null # legacy interface
, ...
}:

let
  withDocs = lib.elem "texdoc" extraOutputsToInstall;
  withInfo = lib.elem "info" extraOutputsToInstall;
  withManpages = lib.elem "man" extraOutputsToInstall;
  withSources = lib.elem "texsource" extraOutputsToInstall;

  pkgSet = removeAttrs args [ "extraName" "extraVersion" "extraOutputsToInstall" "pkgFilter" ];

  # emulate legacy pkgFilter
  legacyFilter = let legacyOutToTlType = { out = "bin"; tex = "run"; texdoc = "doc"; texsource = "source"; tlpkg = "tlpkg"; }; in
    if pkgFilter != null then
      p:
      let tlType = legacyOutToTlType.${p.tlOutputName or p.outputName} or ""; in
      pkgFilter (p
        // { inherit tlType; }
        // lib.optionalAttrs (tlType == "doc" && p ? man) { hasManpages = true; })
    else x: true;

  # given a list of packages, return a list including all of their (transitive) dependencies
  resolveDeps = pkgList:
    let
      pkgToSet = { pname ? "", version ? "", name ? "${pname}-${version}", outputName ? "", tlOutputName ? outputName, outPath ? "${name}-${tlOutputName}", ... }@pkg:
        pkg // { key = outPath; }; in
    with lib; genericClosure {
      # scheme-infraonly is the minimum requirement for a working environment (for e.g. kpsewhich)
      startSet = map pkgToSet pkgList ++ [ (pkgToSet texlivePackages.scheme-infraonly) ];
      operator = { tlDeps ? [ ], outputName ? "", tlOutputName ? outputName, ... }@drv: map pkgToSet (
        tlDeps
        # backward compatibility with deprecated way of exporting tex packages from other derivations
        #   mkDerivation (finalAttrs: { passthru.tlType = "run"; passthru.pkgs = [ finalAttrs.finalPackage.tex ]; ... })
        ++ optionals (drv ? tlType) drv.pkgs
      );
    };

  pkgList =
    let
      runtime = builtins.partition (p: p.meta.outputSpecified or false -> elem p.tlOutputName [ "out" "tex" "tlpkg" ]) (lib.attrValues pkgSet); in
    rec {
      # resolve dependencies only for the packages that do not affect the runtime
      all = resolveDeps runtime.right ++ runtime.wrong;

      specified = builtins.partition (p: p.meta.outputSpecified or false) all;
      groups = lib.groupBy (p: p.tlOutputName or p.outputName) specified.right;

      # always include all tex and tlpkg outputs
      # for predictability, we respect the user specified output and do not resolve intra-package dependencies
      # (e.g. one can specify the "out" output without including the corresponding "tex" output)
      tex = lib.filter legacyFilter (lib.catAttrs "tex" specified.wrong ++ groups.tex or [ ]);
      tlpkg = lib.filter legacyFilter (lib.catAttrs "tlpkg" specified.wrong ++ groups.tlpkg or [ ]);

      # binaries
      bin = lib.filter legacyFilter (lib.catAttrs "out" specified.wrong ++ groups.out or [ ]);

      # always include specified docs and sources, optionally include the others
      texdoc = lib.filter legacyFilter (lib.catAttrs "texdoc"
        (builtins.filter
          (p: (withManpages && p ? man) || (withInfo && p ? info) || withDocs)
          specified.wrong)
      ++ groups.texdoc or [ ]);
      texsource = lib.filter legacyFilter (lib.optionals withSources (lib.catAttrs "texsource" specified.wrong)
        ++ groups.texsource or [ ]);

      # non-specified outputs from outside TeX Live and other specified outputs (contains bin)
      others = if pkgFilter != null then bin else builtins.filter (p: ! p ? tlOutputName) specified.wrong
        ++ builtins.filter (p: ! lib.elem p.tlOutputName or p.outputName [ "tex" "texdoc" "texsource" "tlpkg" ]) specified.right;
    };

  # list generated by inspecting `grep -IR '\([^a-zA-Z]\|^\)gs\( \|$\|"\)' "$TEXMFDIST"/scripts`
  # and `grep -IR rungs "$TEXMFDIST"`
  # and ignoring luatex, perl, and shell scripts (those must be patched using postFixup)
  needsGhostscript = lib.any (p: lib.elem p.pname or null [ "context" "dvipdfmx" "latex-papersize" "lyluatex" ]) pkgList.bin;

  name = "texlive-${extraName}-${bin.texliveYear}${extraVersion}";

  # build various tex trees ($TEXMFDIST, $TEXDOCS, $TEXSOURCES, $TEXMFROOT, $TEXMFROOT/tlpkg)
  buildTexmf = outputName: varName:
  (buildEnv {
    name = "${name}-${varName}";
    nativeBuildInputs = [ texlivePackages.texlive-scripts ];
    extraOutputsToInstall = [ outputName ];
    # remove fake derivations (without 'outPath') to avoid undesired build dependencies
    paths = lib.catAttrs "outPath" pkgList.${outputName};
    postBuild = # generate ls-R database
      ''
        mktexlsr --sort "$out/${lib.removePrefix "tex" outputName}"
      '';
  }).overrideAttrs (_: { allowSubstitutes = true; });

  texmfdist = buildTexmf "tex" "texmfdist";
  texdocs = if pkgList.texdoc == [ ] then null else buildTexmf "texdoc" "texdocs";
  texsources = if pkgList.texsource == [ ] then null else buildTexmf "texsource" "texsources";

  tlpkg = (buildEnv {
    name = "${name}-tlpkg";
    extraOutputsToInstall = [ "tlpkg" ];
    paths = pkgList.tlpkg;
  }).overrideAttrs (_: { allowSubstitutes = true; });

  # the 'non-relocated' packages should live in $TEXMFROOT/texmf-dist
  # and sometimes look into $TEXMFROOT/tlpkg (notably tlmgr looks for texlive.tlpdb there)
  texmfroot = linkFarm "${name}-texmfroot" { texmf-dist = texmfdist; inherit tlpkg; };

in lib.warnIf (pkgFilter != null) "the pkgFilter argument of texlive.combine is deprecated and will be removed in future releases; use extraOutputsToInstall instead"
(buildEnv {

  inherit name;

  ignoreCollisions = false;

  # link all specified outputs not included in the texmf/tlpkg folders and all the non-specified outputs
  paths = pkgList.bin ++ pkgList.others;
  # ensure that bin is linked
  pathsToLink = [
    "/"
    "/share/texlive/texmf-var/scripts"
    "/share/texlive/texmf-var/tex/generic/config"
    "/share/texlive/texmf-var/web2c"
    "/share/texlive/texmf-config"
    "/bin" # ensure these are writeable directories
  ];

  # recall meta.outputsToInstall = [ ] for TeX Live packages, so we must specify "out" to get the binaries
  extraOutputsToInstall = [ "out" ] ++
    (if pkgFilter == null then lib.subtractLists [ "out" "tex" "texdoc" "texsource" "tlpkg" ] extraOutputsToInstall else [ "man" "info" ]);

  nativeBuildInputs = [
    makeWrapper
    libfaketime
    texlivePackages.kpathsea
    texlivePackages.texlive-scripts # fmtutil, mktexlsr, updmap
    texlivePackages.texlive-scripts-extra # texlinks
    perl
  ];

  passthru = {
    # This is set primarily to help find-tarballs.nix to do its job
    packages = pkgList.tex ++ pkgList.texdoc ++ pkgList.texsource ++ pkgList.tlpkg ++ pkgList.others;
    # useful for inclusion in the `fonts.packages` nixos option or for use in devshells
    fonts = "${texmfdist}/fonts";
  };

  postBuild =
    # environment variables (note: only export the ones that are used in the wrappers)
  ''
    TEXMFROOT="${texmfroot}"
    TEXMFDIST="${texmfdist}"
    export PATH="$out/bin:$PATH"
    TEXMFSYSCONFIG="$out/share/texlive/texmf-config"
    TEXMFSYSVAR="$out/share/texlive/texmf-var"
    export TEXMFCNF="$TEXMFSYSVAR/web2c"
    TEXDOCS="${toString texdocs}"
    TEXSOURCES="${toString texsources}"
  '' +
    # courtesy links for ease of debugging
  ''
    ln -s "$TEXMFROOT"/* "$out"/share/texlive/
    if [[ -n "$TEXDOCS" ]] ; then
      mkdir -p "$out"/share/doc
      ln -s "$TEXDOCS" "$out"/share/doc/texlive-doc
    fi
    if [[ -n "$TEXSOURCES" ]] ; then
      mkdir -p "$out"/share/doc
      ln -s "$TEXDOCS" "$out"/share/doc/texlive-source
    fi
  '' +
    # wrap executables with required env vars as early as possible
    # 1. we want texlive.combine to use the wrapped binaries, to catch bugs
    # 2. we do not want to wrap links generated by texlinks
  ''
    enable -f '${bash}/lib/bash/realpath' realpath
    declare -i wrapCount=0
    for link in "$out"/bin/*; do
      target="$(realpath "$link")"
      if [[ "''${target##*/}" != "''${link##*/}" ]] ; then
        # detected alias with different basename, use immediate target of $link to preserve $0
        # relevant for mktexfmt, repstopdf, ...
        target="$(readlink "$link")"
      fi

      rm "$link"
      makeWrapper "$target" "$link" \
        --inherit-argv0 \
        --prefix PATH : "${
          # very common dependencies that are not detected by tests.texlive.binaries
          lib.makeBinPath ([ coreutils gawk gnugrep gnused ] ++ lib.optional needsGhostscript ghostscript)}:$out/bin" \
        --set-default TEXMFCNF "$TEXMFCNF" \
        --set-default FONTCONFIG_FILE "${
          # necessary for XeTeX to find the fonts distributed with texlive
          makeFontsConf { fontDirectories = [ "${texmfdist}/fonts" ]; }
        }"
      wrapCount=$((wrapCount + 1))
    done
    echo "wrapped $wrapCount binaries and scripts"
  '' +
    # patch texmf-dist  -> $TEXMFDIST
    # patch texmf-local -> $out/share/texmf-local
    # patch texmf.cnf   -> $TEXMFSYSVAR/web2c/texmf.cnf
    # TODO: perhaps do lua actions?
    # tried inspiration from install-tl, sub do_texmf_cnf
  ''
    mkdir -p "$TEXMFCNF"
    if [ -e "$TEXMFDIST/web2c/texmfcnf.lua" ]; then
      sed \
        -e "s,\(TEXMFOS[ ]*=[ ]*\)[^\,]*,\1\"$TEXMFROOT\",g" \
        -e "s,\(TEXMFDIST[ ]*=[ ]*\)[^\,]*,\1\"$TEXMFDIST\",g" \
        -e "s,\(TEXMFSYSVAR[ ]*=[ ]*\)[^\,]*,\1\"$TEXMFSYSVAR\",g" \
        -e "s,\(TEXMFSYSCONFIG[ ]*=[ ]*\)[^\,]*,\1\"$TEXMFSYSCONFIG\",g" \
        -e "s,\(TEXMF[ ]*=[^}]*\)},\1\,!!$TEXDOCS\,!!$TEXSOURCES},g" \
        -e "s,\(TEXMFDBS[ ]*=[^}]*\)},\1\,!!$TEXDOCS\,!!$TEXSOURCES},g" \
        -e "s,\(TEXMFLOCAL[ ]*=[ ]*\)[^\,]*,\1\"$out/share/texmf-local\",g" \
        -e "s,\$SELFAUTOLOC,$out,g" \
        -e "s,selfautodir:/,$out/share/,g" \
        -e "s,selfautodir:,$out/share/,g" \
        -e "s,selfautoparent:/,$out/share/,g" \
        -e "s,selfautoparent:,$out/share/,g" \
        "$TEXMFDIST/web2c/texmfcnf.lua" > "$TEXMFCNF/texmfcnf.lua"
    fi

    sed \
      -e "s,\(TEXMFROOT[ ]*=[ ]*\)[^\,]*,\1$TEXMFROOT,g" \
      -e "s,\(TEXMFDIST[ ]*=[ ]*\)[^\,]*,\1$TEXMFDIST,g" \
      -e "s,\(TEXMFSYSVAR[ ]*=[ ]*\)[^\,]*,\1$TEXMFSYSVAR,g" \
      -e "s,\(TEXMFSYSCONFIG[ ]*=[ ]*\)[^\,]*,\1$TEXMFSYSCONFIG,g" \
      -e "s,\(TEXMF[ ]*=[^}]*\)},\1\,!!$TEXDOCS\,!!$TEXSOURCES},g" \
      -e "s,\(TEXMFDBS[ ]*=[^}]*\)},\1\,!!$TEXDOCS\,!!$TEXSOURCES},g" \
      -e "s,\$SELFAUTOLOC,$out,g" \
      -e "s,\$SELFAUTODIR,$out/share,g" \
      -e "s,\$SELFAUTOPARENT,$out/share,g" \
      -e "s,\$SELFAUTOGRANDPARENT,$out/share,g" \
      -e "/^mpost,/d" `# CVE-2016-10243` \
      "$TEXMFDIST/web2c/texmf.cnf" > "$TEXMFCNF/texmf.cnf"
  '' +
    # now filter hyphenation patterns and formats
  (let
    hyphens = lib.filter (p: p.hasHyphens or false) pkgList.tex;
    hyphenPNames = map (p: p.pname) hyphens;
    # formats can be attached to either the bin or the run container
    formats = lib.filter (p: p ? formats) pkgList.bin ++ lib.filter (p: p ? formats) pkgList.tex;
    formatPNames = map (p: p.pname) formats;
    # sed expression that prints the lines in /start/,/end/ except for /end/
    section = start: end: "/${start}/,/${end}/{ /${start}/p; /${end}/!p; };\n";
    script =
      writeText "hyphens.sed" (
        # document how the file was generated (for language.dat)
        "1{ s/^(% Generated by .*)$/\\1, modified by texlive.combine/; p; }\n"
        # pick up the header
        + "2,/^% from/{ /^% from/!p; };\n"
        # pick up all sections matching packages that we combine
        + lib.concatMapStrings (pname: section "^% from ${pname}:$" "^% from|^%%% No changes may be made beyond this point.$") hyphenPNames
        # pick up the footer (for language.def)
        + "/^%%% No changes may be made beyond this point.$/,$p;\n"
      );
    scriptLua =
      writeText "hyphens.lua.sed" (
        "1{ s/^(-- Generated by .*)$/\\1, modified by texlive.combine/; p; }\n"
        + "2,/^-- END of language.us.lua/p;\n"
        + lib.concatMapStrings (pname: section "^-- from ${pname}:$" "^}$|^-- from") hyphenPNames
        + "$p;\n"
      );
    # formats not being installed must be disabled by prepending #! (see man fmtutil)
    # sed expression that enables the formats in /start/,/end/
    enableFormats = pname: "/^# from ${pname}:$/,/^# from/{ s/^#! //; };\n";
    fmtutilSed =
      writeText "fmtutil.sed" (
        # document how file was generated
        "1{ s/^(# Generated by .*)$/\\1, modified by texlive.combine/; }\n"
        # disable all formats, even those already disabled
        + "s/^([^#]|#! )/#! \\1/;\n"
        # enable the formats from the packages being installed
        + lib.concatMapStrings enableFormats formatPNames
        # clean up formats that have been disabled twice
        + "s/^#! #! /#! /;\n"
      );
  in ''
    mkdir -p "$TEXMFSYSVAR/tex/generic/config"
    for fname in tex/generic/config/language.{dat,def}; do
      [[ -e "$TEXMFDIST/$fname" ]] && sed -E -n -f '${script}' "$TEXMFDIST/$fname" > "$TEXMFSYSVAR/$fname"
    done
    [[ -e "$TEXMFDIST"/tex/generic/config/language.dat.lua ]] && sed -E -n -f '${scriptLua}' \
      "$TEXMFDIST"/tex/generic/config/language.dat.lua > "$TEXMFSYSVAR"/tex/generic/config/language.dat.lua
    [[ -e "$TEXMFDIST"/web2c/fmtutil.cnf ]] && sed -E -f '${fmtutilSed}' "$TEXMFDIST"/web2c/fmtutil.cnf > "$TEXMFCNF"/fmtutil.cnf

    # make new files visible to kpathsea
    mktexlsr --sort "$TEXMFSYSVAR"
  '') +
    # generate format links (reads fmtutil.cnf to know which ones) *after* the wrappers have been generated
  ''
    texlinks --quiet "$out/bin"
  '' +
  # texlive postactions (see TeXLive::TLUtils::_do_postaction_script)
  (lib.concatMapStrings (pkg: ''
    postaction='${pkg.postactionScript}'
    case "$postaction" in
      *.pl) postInterp=perl ;;
      *.texlua) postInterp=texlua ;;
      *) postInterp= ;;
    esac
    echo "postaction install script for ${pkg.pname}: ''${postInterp:+$postInterp }$postaction install $TEXMFROOT"
    $postInterp "$TEXMFROOT/$postaction" install "$TEXMFROOT"
  '') (lib.filter (pkg: pkg ? postactionScript) pkgList.tlpkg)) +
    # generate formats
  ''
    # many formats still ignore SOURCE_DATE_EPOCH even when FORCE_SOURCE_DATE=1
    # libfaketime fixes non-determinism related to timestamps ignoring FORCE_SOURCE_DATE
    # we cannot fix further randomness caused by luatex; for further details, see
    # https://salsa.debian.org/live-team/live-build/-/blob/master/examples/hooks/reproducible/2006-reproducible-texlive-binaries-fmt-files.hook.chroot#L52
    # note that calling faketime and fmtutil is fragile (faketime uses LD_PRELOAD, fmtutil calls /bin/sh, causing potential glibc issues on non-NixOS)
    # so we patch fmtutil to use faketime, rather than calling faketime fmtutil
    substitute "$TEXMFDIST"/scripts/texlive/fmtutil.pl fmtutil \
      --replace 'my $cmdline = "$eng -ini ' 'my $cmdline = "faketime -f '"'"'\@1980-01-01 00:00:00 x0.001'"'"' $eng -ini '
    FORCE_SOURCE_DATE=1 TZ= perl fmtutil --sys --all | grep '^fmtutil' # too verbose

    # Disable unavailable map files
    echo y | updmap --sys --syncwithtrees --force 2>&1 | grep '^\(updmap\|  /\)'
    # Regenerate the map files (this is optional)
    updmap --sys --force 2>&1 | grep '^\(updmap\|  /\)'

    # sort entries to improve reproducibility
    [[ -f "$TEXMFSYSCONFIG"/web2c/updmap.cfg ]] && sort -o "$TEXMFSYSCONFIG"/web2c/updmap.cfg "$TEXMFSYSCONFIG"/web2c/updmap.cfg

    mktexlsr --sort "$TEXMFSYSCONFIG" "$TEXMFSYSVAR" # to make sure (of what?)
  '' +
    # remove *-sys scripts since /nix/store is readonly
  ''
    rm -f "$out"/bin/*-sys
  '' +
  # TODO: a context trigger https://www.preining.info/blog/2015/06/debian-tex-live-2015-the-new-layout/
    # http://wiki.contextgarden.net/ConTeXt_Standalone#Unix-like_platforms_.28Linux.2FMacOS_X.2FFreeBSD.2FSolaris.29

  # MkIV uses its own lookup mechanism and we need to initialize
  # caches for it.
  # We use faketime to fix the embedded timestamps and patch the uuids
  # with some random but constant values.
  ''
    if [[ -e "$out/bin/mtxrun" ]]; then
      substitute "$TEXMFDIST"/scripts/context/lua/mtxrun.lua mtxrun.lua \
        --replace 'cache_uuid=osuuid()' 'cache_uuid="e2402e51-133d-4c73-a278-006ea4ed734f"' \
        --replace 'uuid=osuuid(),' 'uuid="242be807-d17e-4792-8e39-aa93326fc871",'
      FORCE_SOURCE_DATE=1 TZ= faketime -f '@1980-01-01 00:00:00 x0.001' luatex --luaonly mtxrun.lua --generate
    fi
  '' +
  # Get rid of all log files. They are not needed, but take up space
  # and render the build unreproducible by their embedded timestamps
  # and other non-deterministic diagnostics.
  ''
    find "$TEXMFSYSVAR"/web2c -name '*.log' -delete
  ''
  ;
}).overrideAttrs (_: { allowSubstitutes = true; })
