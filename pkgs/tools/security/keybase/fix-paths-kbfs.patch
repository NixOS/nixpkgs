diff --git a/go/kbfs/libfuse/mounter.go b/go/kbfs/libfuse/mounter.go
index d791ffc2..b116ad5d 100644
--- a/go/kbfs/libfuse/mounter.go
+++ b/go/kbfs/libfuse/mounter.go
@@ -108,7 +108,7 @@ func (m *mounter) Unmount() (err error) {
 	case "darwin":
 		_, err = exec.Command("/sbin/umount", dir).Output()
 	case "linux":
-		fusermountOutput, fusermountErr := exec.Command("fusermount", "-u", dir).CombinedOutput()
+		fusermountOutput, fusermountErr := exec.Command("@fusermount@", "-u", dir).CombinedOutput()
 		// Only clean up mountdir on a clean unmount.
 		if fusermountErr == nil {
 			m.log.Info("Successfully unmounted")
@@ -135,7 +135,7 @@ func (m *mounter) Unmount() (err error) {
 				"/usr/sbin/diskutil", "unmountDisk", "force", dir).Output()
 		case "linux":
 			// Lazy unmount; will unmount when KBFS is no longer in use.
-			_, err = exec.Command("fusermount", "-u", "-z", dir).Output()
+			_, err = exec.Command("@fusermount@", "-u", "-z", dir).Output()
 		default:
 			err = errors.New("Forced unmount is not supported on this platform yet")
 		}
diff --git a/go/vendor/bazil.org/fuse/mount_linux.go b/go/vendor/bazil.org/fuse/mount_linux.go
index ec7fd89c..4d0a9e30 100644
--- a/go/vendor/bazil.org/fuse/mount_linux.go
+++ b/go/vendor/bazil.org/fuse/mount_linux.go
@@ -196,7 +196,7 @@ func mount(dir string, conf *mountConfig, ready chan<- struct{}, _ *error) (fuse
 	defer readFile.Close()
 
 	cmd := exec.Command(
-		"fusermount",
+		"@fusermount@",
 		"-o", conf.getOptions(),
 		"--",
 		dir,
diff --git a/go/vendor/bazil.org/fuse/unmount_linux.go b/go/vendor/bazil.org/fuse/unmount_linux.go
index f02448af..6e4c6c23 100644
--- a/go/vendor/bazil.org/fuse/unmount_linux.go
+++ b/go/vendor/bazil.org/fuse/unmount_linux.go
@@ -21,7 +21,7 @@ func unmount(dir string) error {
 		return sysunix.Unmount(dir, sysunix.MNT_DETACH)
 	}
 
-	cmd := exec.Command("fusermount", "-u", dir)
+	cmd := exec.Command("@fusermount@", "-u", dir)
 	output, err := cmd.CombinedOutput()
 	if err != nil {
 		if len(output) > 0 {
