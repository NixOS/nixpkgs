/*
    Test CUDA packages.

    This release file is currently not tested on hydra.nixos.org
    because it requires unfree software, but it is tested by
    https://hydra.nix-community.org/jobset/nixpkgs/cuda-nixos-unstable.

    Cf. https://github.com/nix-community/infra/pull/1335

    Test for example like this:

        $ hydra-eval-jobs pkgs/top-level/release-cuda.nix -I .
*/

let
  lib = import ../../lib;
  cudaLib = (import ../development/cuda-modules/_cuda).lib;
in

{
  # The platforms for which we build Nixpkgs.
  supportedSystems ? [
    "x86_64-linux"
    "aarch64-linux"
  ],
  variant ? "cuda",
  # Attributes passed to nixpkgs.
  nixpkgsArgs ? {
    config = {
      allowUnfreePredicate = cudaLib.allowUnfreeCudaPredicate;
      "${variant}Support" = true;
      inHydra = true;

      # Don't evaluate duplicate and/or deprecated attributes
      allowAliases = false;
    };

    __allowFileset = false;
  },
  ...
}@args:

assert builtins.elem variant [
  "cuda"
  "rocm"
  null
];

let
  mkReleaseLib = import ./release-lib.nix;
  release-lib = mkReleaseLib (
    { inherit supportedSystems nixpkgsArgs; } // lib.intersectAttrs (lib.functionArgs mkReleaseLib) args
  );

  inherit (release-lib)
    linux
    mapTestOn
    packagePlatforms
    pkgs
    ;

  # Package sets to evaluate whole
  # Derivations from these package sets are selected based on the value
  # of their meta.{hydraPlatforms,platforms,badPlatforms} attributes
  autoPackageSets = builtins.filter (lib.strings.hasPrefix "cudaPackages") (builtins.attrNames pkgs);
  autoPackagePlatforms = lib.genAttrs autoPackageSets (pset: packagePlatforms pkgs.${pset});

  entries =
    let
      # Generated by using https://github.com/connorbaker/nix-nixpkgs-review
      # nix build .#diffs.x86_64-linux.pkgs-post-pkgs-cuda-post
      diff = lib.importJSON ./release-cuda.json;
    in
    lib.updateManyAttrsByPath (map (attrPathStr: {
      path = lib.splitString "." attrPathStr;
      update = _: linux;
    }) (diff.added ++ diff.changed)) { };

  # Explicitly specified platforms take precedence over the platforms
  # automatically inferred in autoPackagePlatforms
  allPackagePlatforms = lib.recursiveUpdate autoPackagePlatforms entries;
  jobs = mapTestOn allPackagePlatforms;
in
jobs
