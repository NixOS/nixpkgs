From 0fada0c6fe84bed0b311c493aa3f91bf35428bc8 Mon Sep 17 00:00:00 2001
From: "Queen Vinyl Da.i'gyu-Kazotetsu" <vinyldarkscratch@gmail.com>
Date: Fri, 26 Apr 2024 09:56:49 -0700
Subject: [PATCH 1/4] Replace deprecated boost/filesystem/string_file.hpp
 header

---
 src/libslic3r/Format/bbs_3mf.cpp   | 48 ++++++++++++++++++-------
 src/libslic3r/Model.cpp            |  6 ++--
 src/slic3r/GUI/MediaPlayCtrl.cpp   |  9 +++--
 src/slic3r/Utils/PresetUpdater.cpp | 56 +++++++++++++++++++++++++-----
 4 files changed, 91 insertions(+), 28 deletions(-)

diff --git a/src/libslic3r/Format/bbs_3mf.cpp b/src/libslic3r/Format/bbs_3mf.cpp
index f13c62148..0e3b4e433 100644
--- a/src/libslic3r/Format/bbs_3mf.cpp
+++ b/src/libslic3r/Format/bbs_3mf.cpp
@@ -25,7 +25,6 @@
 #include <boost/algorithm/string/predicate.hpp>
 #include <boost/algorithm/string/replace.hpp>
 #include <boost/filesystem/operations.hpp>
-#include <boost/filesystem/string_file.hpp>
 #include <boost/lexical_cast.hpp>
 #include <boost/nowide/fstream.hpp>
 #include <boost/nowide/cstdio.hpp>
@@ -1296,12 +1295,19 @@ void PlateData::parse_filament_info(GCodeProcessorResult *result)
             m_backup_path = filename.substr(0, filename.size() - 5);
             model.set_backup_path(m_backup_path);
             try {
-                if (boost::filesystem::exists(model.get_backup_path() + "/origin.txt"))
-                    boost::filesystem::load_string_file(model.get_backup_path() + "/origin.txt", m_origin_file);
+                std::string filepath = model.get_backup_path() + "/origin.txt";
+                if (boost::filesystem::exists(filepath)) {
+                    boost::filesystem::ifstream originfile(filepath);
+                    m_origin_file.assign(
+                        (std::istreambuf_iterator<char>(originfile)),
+                        (std::istreambuf_iterator<char>())
+                    );
+                    originfile.close();
+                }
             } catch (...) {}
-            boost::filesystem::save_string_file(
-                model.get_backup_path() + "/lock.txt",
-                boost::lexical_cast<std::string>(get_current_pid()));
+            boost::filesystem::ofstream lockfile(model.get_backup_path() + "/lock.txt");
+            lockfile << boost::lexical_cast<std::string>(get_current_pid());
+            lockfile.close();
         }
         else {
             m_backup_path = model.get_backup_path();
@@ -1312,7 +1318,9 @@ void PlateData::parse_filament_info(GCodeProcessorResult *result)
             file_version = *m_bambuslicer_generator_version;
         // save for restore
         if (result && m_load_aux && !m_load_restore) {
-            boost::filesystem::save_string_file(model.get_backup_path() + "/origin.txt", filename);
+            boost::filesystem::ofstream originfile(model.get_backup_path() + "/origin.txt");
+            originfile << filename;
+            originfile.close();
         }
         if (m_load_restore && !result) // not clear failed backup data for later analyze
             model.set_backup_path("detach");
@@ -5571,6 +5579,7 @@ void PlateData::parse_filament_info(GCodeProcessorResult *result)
         boost::system::error_code ec;
         std::string filename = std::string(store_params.path);
         boost::filesystem::remove(filename + ".tmp", ec);
+        boost::filesystem::ofstream outputfile;
 
         bool result = _save_model_to_file(filename + ".tmp", *store_params.model, store_params.plate_data_list, store_params.project_presets, store_params.config,
                                           store_params.thumbnail_data, store_params.no_light_thumbnail_data, store_params.top_thumbnail_data, store_params.pick_thumbnail_data,
@@ -5584,7 +5593,9 @@ void PlateData::parse_filament_info(GCodeProcessorResult *result)
                 return false;
             }
             if (!(store_params.strategy & SaveStrategy::Silence))
-                boost::filesystem::save_string_file(store_params.model->get_backup_path() + "/origin.txt", filename);
+                outputfile.open(store_params.model->get_backup_path() + "/origin.txt");
+                outputfile << filename;
+                outputfile.close();
         }
         return result;
     }
@@ -8488,9 +8499,14 @@ bool has_restore_data(std::string & path, std::string& origin)
         origin = "<lock>";
         return false;
     }
-    if (boost::filesystem::exists(path + "/lock.txt")) {
-        std::string pid;
-        boost::filesystem::load_string_file(path + "/lock.txt", pid);
+    const std::string lockfile_path = path + "/lock.txt";
+    if (boost::filesystem::exists(lockfile_path)) {
+        boost::filesystem::ifstream lockfile(lockfile_path);
+        std::string pid(
+            (std::istreambuf_iterator<char>(lockfile)),
+            (std::istreambuf_iterator<char>())
+        );
+        lockfile.close();
         try {
             if (get_process_name(boost::lexical_cast<int>(pid)) ==
                 get_process_name(0)) {
@@ -8506,8 +8522,14 @@ bool has_restore_data(std::string & path, std::string& origin)
     if (!boost::filesystem::exists(file3mf))
         return false;
     try {
-        if (boost::filesystem::exists(path + "/origin.txt"))
-            boost::filesystem::load_string_file(path + "/origin.txt", origin);
+        if (boost::filesystem::exists(path + "/origin.txt")) {
+            boost::filesystem::ifstream originfile(path + "/origin.txt");
+            origin.assign(
+                (std::istreambuf_iterator<char>(originfile)),
+                (std::istreambuf_iterator<char>())
+            );
+            originfile.close();
+        }
     }
     catch (...) {
     }
diff --git a/src/libslic3r/Model.cpp b/src/libslic3r/Model.cpp
index 82328083c..51da0fb8b 100644
--- a/src/libslic3r/Model.cpp
+++ b/src/libslic3r/Model.cpp
@@ -23,7 +23,6 @@
 #include <boost/algorithm/string/predicate.hpp>
 #include <boost/algorithm/string/replace.hpp>
 #include <boost/filesystem.hpp>
-#include <boost/filesystem/string_file.hpp>
 #include <boost/lexical_cast.hpp>
 #include <boost/log/trivial.hpp>
 #include <boost/nowide/iostream.hpp>
@@ -980,8 +979,9 @@ std::string Model::get_backup_path()
             BOOST_LOG_TRIVIAL(info) << "create /Metadata in " << temp_path;
             boost::filesystem::create_directories(backup_path + "/Metadata");
             BOOST_LOG_TRIVIAL(info) << "create /lock.txt in " << temp_path;
-            boost::filesystem::save_string_file(backup_path + "/lock.txt",
-                boost::lexical_cast<std::string>(get_current_pid()));
+            boost::filesystem::ofstream lockfile(backup_path + "/lock.txt");
+            lockfile << boost::lexical_cast<std::string>(get_current_pid());
+            lockfile.close();
         }
     } catch (std::exception &ex) {
         BOOST_LOG_TRIVIAL(error) << "Failed to create backup path" << temp_path << ": " << ex.what();
diff --git a/src/slic3r/GUI/MediaPlayCtrl.cpp b/src/slic3r/GUI/MediaPlayCtrl.cpp
index 9af0cc116..45de6fe1a 100644
--- a/src/slic3r/GUI/MediaPlayCtrl.cpp
+++ b/src/slic3r/GUI/MediaPlayCtrl.cpp
@@ -8,7 +8,6 @@
 #include "MsgDialog.hpp"
 #include "DownloadProgressDialog.hpp"
 
-#include <boost/filesystem/string_file.hpp>
 #include <boost/lexical_cast.hpp>
 #include <boost/log/trivial.hpp>
 #include <boost/nowide/cstdio.hpp>
@@ -824,8 +823,12 @@ bool MediaPlayCtrl::start_stream_service(bool *need_install)
     file_url2.Replace("\\", "/");
     file_url2 = wxURI(file_url2).BuildURI();
     try {
-        std::string configs;
-        boost::filesystem::load_string_file(file_ff_cfg, configs);
+        boost::filesystem::ifstream configfile(file_ff_cfg);
+        std::string configs(
+            (std::istreambuf_iterator<char>(configfile)),
+            (std::istreambuf_iterator<char>())
+        );
+        configfile.close();
         std::vector<std::string> configss;
         boost::algorithm::split(configss, configs, boost::algorithm::is_any_of("\r\n"));
         configss.erase(std::remove(configss.begin(), configss.end(), std::string()), configss.end());
diff --git a/src/slic3r/Utils/PresetUpdater.cpp b/src/slic3r/Utils/PresetUpdater.cpp
index 268c2685a..eb92e052b 100644
--- a/src/slic3r/Utils/PresetUpdater.cpp
+++ b/src/slic3r/Utils/PresetUpdater.cpp
@@ -9,7 +9,6 @@
 #include <boost/format.hpp>
 #include <boost/algorithm/string.hpp>
 #include <boost/filesystem.hpp>
-#include <boost/filesystem/string_file.hpp>
 #include <boost/filesystem/fstream.hpp>
 #include <boost/lexical_cast.hpp>
 #include <boost/log/trivial.hpp>
@@ -1042,10 +1041,24 @@ void PresetUpdater::priv::sync_tooltip(std::string http_url, std::string languag
         std::string language_version = "00.00.00.00";
         fs::path cache_root = fs::path(data_dir()) / "resources/tooltip";
         try {
-            auto vf = cache_root / "common" / "version";
-            if (fs::exists(vf)) fs::load_string_file(vf, common_version);
+            fs::path vf = cache_root / "common" / "version";
+            if (fs::exists(vf)) {
+            	boost::filesystem::ifstream versionfile(vf);
+		        common_version.assign(
+		            (std::istreambuf_iterator<char>(versionfile)),
+		            (std::istreambuf_iterator<char>())
+		        );
+		        versionfile.close();
+	        }
             vf = cache_root / language / "version";
-            if (fs::exists(vf)) fs::load_string_file(vf, language_version);
+            if (fs::exists(vf)) {
+            	boost::filesystem::ifstream versionfile(vf);
+		        language_version.assign(
+		            (std::istreambuf_iterator<char>(versionfile)),
+		            (std::istreambuf_iterator<char>())
+		        );
+		        versionfile.close();
+            }
         } catch (...) {}
         std::map<std::string, Resource> resources
         {
@@ -1183,13 +1196,23 @@ void PresetUpdater::priv::sync_printer_config(std::string http_url)
 
     try {
         if (fs::exists(config_folder / "version.txt")) {
-            fs::load_string_file(config_folder / "version.txt", curr_version);
+        	boost::filesystem::ifstream filedata(config_folder / "version.txt");
+	        curr_version.assign(
+	            (std::istreambuf_iterator<char>(filedata)),
+	            (std::istreambuf_iterator<char>())
+	        );
+	        filedata.close();
             boost::algorithm::trim(curr_version);
         }
     } catch (...) {}
     try {
         if (fs::exists(cache_folder / "version.txt")) {
-            fs::load_string_file(cache_folder / "version.txt", cached_version);
+            boost::filesystem::ifstream filedata(cache_folder / "version.txt");
+	        cached_version.assign(
+	            (std::istreambuf_iterator<char>(filedata)),
+	            (std::istreambuf_iterator<char>())
+	        );
+	        filedata.close();
             boost::algorithm::trim(cached_version);
         }
     } catch (...) {}
@@ -1229,7 +1252,12 @@ void PresetUpdater::priv::sync_printer_config(std::string http_url)
     bool result = false;
     try {
         if (fs::exists(cache_folder / "version.txt")) {
-            fs::load_string_file(cache_folder / "version.txt", cached_version);
+        	boost::filesystem::ifstream filedata(cache_folder / "version.txt");
+	        cached_version.assign(
+	            (std::istreambuf_iterator<char>(filedata)),
+	            (std::istreambuf_iterator<char>())
+	        );
+	        filedata.close();
             boost::algorithm::trim(cached_version);
             result = true;
         }
@@ -1334,13 +1362,23 @@ Updates PresetUpdater::priv::get_printer_config_updates(bool update) const
     std::string             resc_version;
     try {
         if (fs::exists(resc_folder / "version.txt")) {
-            fs::load_string_file(resc_folder / "version.txt", resc_version);
+        	boost::filesystem::ifstream filedata(resc_folder / "version.txt");
+	        resc_version.assign(
+	            (std::istreambuf_iterator<char>(filedata)),
+	            (std::istreambuf_iterator<char>())
+	        );
+	        filedata.close();
             boost::algorithm::trim(resc_version);
         }
     } catch (...) {}
     try {
         if (fs::exists(config_folder / "version.txt")) {
-            fs::load_string_file(config_folder / "version.txt", curr_version);
+        	boost::filesystem::ifstream filedata(config_folder / "version.txt");
+	        curr_version.assign(
+	            (std::istreambuf_iterator<char>(filedata)),
+	            (std::istreambuf_iterator<char>())
+	        );
+	        filedata.close();
             boost::algorithm::trim(curr_version);
         }
     } catch (...) {}
-- 
2.47.0

