diff --git i/src/CMakeLists.txt w/src/CMakeLists.txt
index de474c4d..36b6cf2c 100644
--- i/src/CMakeLists.txt
+++ w/src/CMakeLists.txt
@@ -129,26 +129,37 @@ set(BUILD_SHARED_LIBS OFF)
 include(FetchContent)
 
 # Bundled liblzma
+find_package(LibLZMA)
+if(NOT LIBLZMA_FOUND)
 include(dependencies/xz.cmake)
+endif()
 
 # Bundled zstd
+find_package(zstd ${ZSTD_VERSION})
+if(NOT zstd_FOUND)
 include(dependencies/zstd.cmake)
+endif()
 
 # Remote nghttp2
-include(dependencies/nghttp2.cmake)
 
 # Bundled yescrypt
 include(dependencies/yescrypt.cmake)
 
 
 # Bundled zlib
+find_package(ZLIB)
+if(NOT ZLIB_FOUND)
 include(dependencies/zlib.cmake)
+endif()
 
 # Bundled libarchive
+find_package(LibArchive)
+if(NOT LibArchive_FOUND)
 include(dependencies/libarchive.cmake)
+endif()
 
 # libcurl
-if(APPLE)
+if(APPLE OR TRUE)
     # In version 8.15.0, libcurl dropped support for Secure Transport, because it
     # does not implement TLS 1.3. Unfortunately, there was no replacement Network.framework implementation,
     # so on macOS we're forced to use the macOS SDK version of libcurl, including libcurl's own OpenSSL-analogue.
@@ -506,7 +517,6 @@ else()
     include(linux/PlatformPackaging.cmake)
 endif()
 
-add_dependencies(${PROJECT_NAME} zlibstatic yescrypt)
 include_directories(${CURL_INCLUDE_DIR} ${LibArchive_INCLUDE_DIR} ${LIBLZMA_INCLUDE_DIRS} ${LIBDRM_INCLUDE_DIRS} ${ZLIB_INCLUDE_DIRS} ${ZSTD_INCLUDE_DIR} ${YESCRYPT_INCLUDE_DIR})
 
 # Link different Qt components based on build type
diff --git i/src/downloadextractthread.cpp w/src/downloadextractthread.cpp
index 580c8098..e970c9d9 100644
--- i/src/downloadextractthread.cpp
+++ w/src/downloadextractthread.cpp
@@ -638,7 +638,7 @@ bool DownloadExtractThread::_verify()
 
 #ifdef Q_OS_LINUX
     /* Make sure we are reading from the drive and not from cache */
-    posix_fadvise(_file.handle(), 0, 0, POSIX_FADV_DONTNEED);
+    posix_fadvise(_file->GetHandle(), 0, 0, POSIX_FADV_DONTNEED);
 #endif
 
     if (!_firstBlock)
diff --git i/src/linux/PlatformPackaging.cmake w/src/linux/PlatformPackaging.cmake
index e91cd247..d5a3c8ba 100644
--- i/src/linux/PlatformPackaging.cmake
+++ w/src/linux/PlatformPackaging.cmake
@@ -16,13 +16,13 @@ install(TARGETS ${PROJECT_NAME} DESTINATION bin)
 
 if(BUILD_CLI_ONLY)
     # CLI-only build: install CLI-specific desktop file (marked as NoDisplay)
-    install(FILES "${CMAKE_CURRENT_LIST_DIR}/../debian/com.raspberrypi.rpi-imager-cli.desktop" DESTINATION share/applications)
+    install(FILES "${CMAKE_CURRENT_LIST_DIR}/../../debian/com.raspberrypi.rpi-imager-cli.desktop" DESTINATION share/applications)
     # Note: No icon or metainfo needed for CLI-only builds
 else()
     # GUI build: install full desktop integration
-    install(FILES "${CMAKE_CURRENT_LIST_DIR}/../debian/rpi-imager.png" DESTINATION share/icons/hicolor/128x128/apps)
-    install(FILES "${CMAKE_CURRENT_LIST_DIR}/../debian/com.raspberrypi.rpi-imager.desktop" DESTINATION share/applications)
-    install(FILES "${CMAKE_CURRENT_LIST_DIR}/../debian/com.raspberrypi.rpi-imager.metainfo.xml" DESTINATION share/metainfo)
+    install(FILES "${CMAKE_CURRENT_LIST_DIR}/../../debian/rpi-imager.png" DESTINATION share/icons/hicolor/128x128/apps)
+    install(FILES "${CMAKE_CURRENT_LIST_DIR}/../../debian/com.raspberrypi.rpi-imager.desktop" DESTINATION share/applications)
+    install(FILES "${CMAKE_CURRENT_LIST_DIR}/../../debian/com.raspberrypi.rpi-imager.metainfo.xml" DESTINATION share/metainfo)
 endif()
 
 
