
diff --git a/cli/tools/upgrade.rs b/cli/tools/upgrade.rs
index 3f4bcc8c7..74d5805a3 100644
--- a/cli/tools/upgrade.rs
+++ b/cli/tools/upgrade.rs
@@ -310,10 +310,7 @@ async fn print_release_notes(
 }
 
 pub fn upgrade_check_enabled() -> bool {
-  matches!(
-    env::var("DENO_NO_UPDATE_CHECK"),
-    Err(env::VarError::NotPresent)
-  )
+  false
 }
 
 pub fn check_for_upgrades(
diff --git a/cli/args/flags.rs b/cli/args/flags.rs
index e1bc861e4..612599c4c 100644
--- a/cli/args/flags.rs
+++ b/cli/args/flags.rs
@@ -1283,7 +1283,6 @@ static ENV_VARIABLES_HELP: &str = cstr!(
                          database.
   <g>DENO_EMIT_CACHE_MODE</>   Control if the transpiled sources should be cached.
   <g>DENO_NO_PACKAGE_JSON</>   Disables auto-resolution of package.json
-  <g>DENO_NO_UPDATE_CHECK</>   Set to disable checking if a newer Deno version is available
   <g>DENO_SERVE_ADDRESS</>     Override address for Deno.serve
                          Example: "tcp:0.0.0.0:8080", "unix:/tmp/deno.sock", or "vsock:1234:5678"
   <g>DENO_AUTO_SERVE</>        If the entrypoint contains export default { fetch }, `deno run`
diff --git a/tests/integration/upgrade_tests.rs b/tests/integration/upgrade_tests.rs
index b342c17f7..1f54292f0 100644
--- a/tests/integration/upgrade_tests.rs
+++ b/tests/integration/upgrade_tests.rs
@@ -43,6 +43,7 @@ fn upgrade_invalid_lockfile() {
   );
 }
 
+#[ignore]
 #[flaky_test::flaky_test]
 fn upgrade_prompt() {
   let context = upgrade_context();
