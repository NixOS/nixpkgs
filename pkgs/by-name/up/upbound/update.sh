#!/usr/bin/env nix-shell
#!nix-shell -i bash -p curl

#set -euo pipefail

SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" && pwd)

# value can be main | stable
# Ensure at least one argument is passed
if [[ $# -lt 1 ]]; then
  echo "Error: No argument provided. Please specify 'main' or 'stable'."
  exit 1
fi

# Check if the first argument is 'main' or 'stable'
if [[ "$1" == "main" || "$1" == "stable" ]]; then
  echo "Valid input: $1"
else
  echo "Error: Invalid input. Please specify 'main' or 'stable'."
  exit 1
fi
channel=$1

baseUrl="https://cli.upbound.io/${channel}"
currentVersion=$(curl ${baseUrl}/current/version)

version="${currentVersion:1}"

declare -A archMapping
archMapping["aarch64-darwin"]="darwin_arm64"
archMapping["x86_64-darwin"]="darwin_amd64"
archMapping["aarch64-linux"]="linux_arm64"
archMapping["x86_64-linux"]="linux_amd64"

archMapBlock=
for key in "${!archMapping[@]}"; do
    line=$(printf "$key = \"${archMapping[$key]}\"; ")
    archMapBlock="$archMapBlock$line"
done

platformListBlock=
for key in "${!archMapping[@]}"; do
    platformListBlock="$platformListBlock\"$key\" "
done

cmds=("docker-credential-up" "up")
fetchurlAttrSetBlock=
for cmd in "${cmds[@]}"; do
    for key in "${!archMapping[@]}"; do
        arch=${archMapping[$key]}
        url="${baseUrl}/v${version}/bundle/$cmd/${arch}.tar.gz";
        hash=$(nix-prefetch-url $url)
        hash=$(nix hash convert "${hash}" --hash-algo sha256)
        fetchurlAttrSetBlock="
        ${fetchurlAttrSetBlock}
        $key.$cmd = {
          hash = \"${hash}\";
          url = ${url};
        };"
    done
done

OUT_FILE="$SCRIPT_DIR/sources-${channel}.nix"
cat >$OUT_FILE <<EOF
# Generated by "update.sh ${channel}" - do not update manually!
{
  version = "${version}";

  platformList = [
    ${platformListBlock}
    ];

  archMap = {
    ${archMapBlock}
    };

  fetchurlAttrSet = {
    ${fetchurlAttrSetBlock}
    };
}
EOF

nixfmt $OUT_FILE
