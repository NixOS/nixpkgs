From 3b1bcc92389e8468cd3790dfd223cb653b5f753f Mon Sep 17 00:00:00 2001
From: OPNA2608 <opna2608@protonmail.com>
Date: Sun, 16 Mar 2025 19:56:39 +0100
Subject: [PATCH] Make findPath & its calls behave well with store

- images is a cache of downloaded card images.
  put that into ~/.cache/ddm/images and allow it to be created.
- campaigns, cubes & constructed are user-downloaded files that set up possible game styles.
  create & populate them for the game, and tell it to not try to create them on its own.
---
 index.js | 10 +++++-----
 1 file changed, 5 insertions(+), 5 deletions(-)

diff --git a/index.js b/index.js
index 738bfca..3ac32e8 100755
--- a/index.js
+++ b/index.js
@@ -75,16 +75,16 @@ app.on('ready', () => {
         const isDir = fs.statSync(fullPath).isDirectory();
         if (containsDanger(fullPath)) throw new Error ("Dangerous files detected");
         if (isDir) return fullPath;
-    } catch (err) { throw new Error("Bad path Error 1", err); }
+    } catch (err) { throw new Error(`Bad path Error 1: ${err.message}`, err); }
     
     else try { //dev
-      const fullPath = path.join(__dirname, folderName);
+      const fullPath = path.join(allowFolderCreation ? (process.env.HOME + "/.cache/ddm") : __dirname, folderName);
       if (!fs.existsSync(fullPath) && allowFolderCreation) fs.mkdirSync(fullPath, {recursive: true});
       const isDir = fs.statSync(fullPath).isDirectory();
       console.log(fullPath)
       if (containsDanger(fullPath)) throw new Error (`DDM refused entry to path: ${fullPath}`);
       if (isDir) return fullPath;
-    } catch (err) { throw new Error("Bad path Error 2", err); }
+    } catch (err) { throw new Error(`Bad path Error 2: ${err.message}`, err); }
 
   }
 
@@ -108,7 +108,7 @@ app.on('ready', () => {
 
     try {
       if (!["campaigns", "cubes", "constructed"].includes(folderName)) throw new Error(`bad folder name ${folderName}`);
-      const folderPath = findPath(folderName, true);
+      const folderPath = findPath(folderName, false);
       if (!fs.existsSync(folderPath)) fs.mkdirSync(folderPath);
       const files = fs.readdirSync(folderPath);
       if (folderName === "campaigns"   ) return files.filter(file => fs.statSync (path.join(folderPath, file)).isDirectory());
@@ -127,7 +127,7 @@ app.on('ready', () => {
 
   ipcMain.handle('open-local-folder', async (event, folderName) => {
     if (!["campaigns", "cubes", "constructed"].includes(folderName)) throw new Error(`bad folder name ${constructed}`);
-    const folderPath = findPath(folderName, true);
+    const folderPath = findPath(folderName, false);
     try           { shell.openPath(folderPath); } 
     catch (error) { console.error(error); }
   });
-- 
2.48.1

