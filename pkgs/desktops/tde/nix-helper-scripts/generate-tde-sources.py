#! /usr/bin/env nix-shell
#! nix-shell -i python -p python3 python3.pkgs.requests python3.pkgs.beautifulsoup4
#! nix-shell -I nixpkgs=https://github.com/NixOS/nixpkgs/archive/refs/tags/23.11.tar.gz

import base64
import re
import requests
import bs4

def mirror_link(
        link
        , mirror = 'https://mirror.ppa.trinitydesktop.org/trinity/releases/'
        , release = '14.1.1' # Always update this argument
):
    return mirror + 'R' + release + '/' + link

def retrieve_data (link):
    extract_from_link_regex = re.compile(r'main/(?P<group>.*)/(?P<pname>[^/]*)-trinity-(?P<version>.*)\.tar\.xz$')

    return re.search(extract_from_link_regex, link)

def retrieve_sha512 (link):
    capture_sha512_regex = re.compile(r'^(?P<sha512>[\S]*) *.*$')

    req = requests.get(mirror_link(link + '.sha512sum'))
    assert req.status_code == 200

    return re.search(capture_sha512_regex, req.text)['sha512']

def generate_attrset (link):
    link_data = retrieve_data(link)
    sha512 = retrieve_sha512(link)
    sri = (base64.b64encode(bytes.fromhex(sha512))).decode('utf-8')

    return f'''
  {link_data['pname']} = {{
    pname = "{link_data['pname']}";
    version = "{link_data['version']}";
    group = "{link_data['group']}";
    hash = "sha512-{sri}";
  }};'''

## Retrieve tarball download page
tarballs_page = requests.get(mirror_link ('downloads.html'))
assert tarballs_page.status_code == 200

## Filter the links matching the format described below
capture_tarball_links_regex = re.compile(r'^main/.*\.tar\.xz$')
page_parsed = bs4.BeautifulSoup(tarballs_page.text, 'html.parser')
links = page_parsed.find_all('a', {'href': capture_tarball_links_regex})

print("### Generated by generate-tde-sources.py; do not edit! ###")
print('{', end='')
for link in links:
    print(generate_attrset(link['href']))
print('}',end='\n')
