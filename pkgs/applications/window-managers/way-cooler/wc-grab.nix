# Generated by carnix 0.5.0: carnix -o wc-grab.nix Cargo.lock
{ lib, buildPlatform, buildRustCrate, fetchgit }:
let kernel = buildPlatform.parsed.kernel.name;
    abi = buildPlatform.parsed.abi.name;
    hasFeature = feature:
      lib.lists.any
        (originName: feature.${originName})
        (builtins.attrNames feature);

    hasDefault = feature:
      let defaultFeatures = builtins.attrNames (feature."default" or {}); in
      (defaultFeatures == [])
      || (lib.lists.any (originName: feature."default".${originName}) defaultFeatures);

    mkFeatures = feat: lib.lists.foldl (features: featureName:
      if featureName != "" && hasFeature feat.${featureName} then
        [ featureName ] ++ features
      else
        features
    ) (if hasDefault feat then [ "default" ] else []) (builtins.attrNames feat);
    adler32_1_0_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "adler32";
      version = "1.0.0";
      authors = [ "Remi Rampin <remirampin@gmail.com>" ];
      sha256 = "0pj35a7m4apn5xjg9n63gsdj6w8iw76zg4p9znrij43xnfqp084w";
      inherit dependencies buildDependencies features;
    };
    ansi_term_0_9_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "ansi_term";
      version = "0.9.0";
      authors = [ "ogham@bsago.me" "Ryan Scheel (Havvy) <ryan.havvy@gmail.com>" ];
      sha256 = "1vcd8m2hglrdi4zmqnkkz5zy3c73ifgii245k7vj6qr5dzpn9hij";
      inherit dependencies buildDependencies features;
    };
    atty_0_2_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "atty";
      version = "0.2.2";
      authors = [ "softprops <d.tangren@gmail.com>" ];
      sha256 = "05c6jvrxljp4s1aycgq2z3y56f7f5yvc56v25cqlmpc1qx65z7ba";
      inherit dependencies buildDependencies features;
    };
    bitflags_0_7_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "bitflags";
      version = "0.7.0";
      authors = [ "The Rust Project Developers" ];
      sha256 = "1hr72xg5slm0z4pxs2hiy4wcyx3jva70h58b7mid8l0a4c8f7gn5";
      inherit dependencies buildDependencies features;
    };
    bitflags_0_8_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "bitflags";
      version = "0.8.0";
      authors = [ "The Rust Project Developers" ];
      sha256 = "1h489m0wzhng5gvvc40jgdbaf0ac3rgkka31vwinhsjmfvrqcc4v";
      inherit dependencies buildDependencies features;
    };
    byteorder_1_0_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "byteorder";
      version = "1.0.0";
      authors = [ "Andrew Gallant <jamslam@gmail.com>" ];
      sha256 = "14pdnds4517vcpablc51vv76hvc3glnpkpbb7qdil591q7lyb0m1";
      inherit dependencies buildDependencies features;
    };
    clap_2_22_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "clap";
      version = "2.22.0";
      authors = [ "Kevin K. <kbknapp@gmail.com>" ];
      sha256 = "0gdgyfh3ydpd2px4xh0i5qd6bhi2c5f43bqv9z4kla9vkmmfiavd";
      inherit dependencies buildDependencies features;
    };
    color_quant_1_0_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "color_quant";
      version = "1.0.0";
      authors = [ "nwin <nwin@users.noreply.github.com>" ];
      sha256 = "0jwr40lr115zm2bydk1wja12gcxrmgsx0n1z1pipq00sab71maaj";
      inherit dependencies buildDependencies features;
    };
    dbus_0_5_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "dbus";
      version = "0.5.2";
      authors = [ "David Henningsson <diwic@ubuntu.com>" ];
      sha256 = "1ga3p2myqxbz34n2bbw4gk1ipf76mjr8r2rvrvnalwggymzfkhj7";
      build = "build.rs";
      inherit dependencies buildDependencies features;
    };
    deflate_0_7_5_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "deflate";
      version = "0.7.5";
      authors = [ "oyvindln <oyvindln@users.noreply.github.com>" ];
      sha256 = "18bcmdkyshnzpkxx22b29gn55g6bk5ysy98ghjpjhxy3hky96rvy";
      inherit dependencies buildDependencies features;
    };
    deque_0_3_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "deque";
      version = "0.3.1";
      authors = [ "Alex Crichton <alex@alexcrichton.com>" "Samuel Fredrickson <kinghajj@gmail.com>" "Linus FÃ¤rnstrand <faern@faern.net>" "Amanieu d'Antras <amanieu@gmail.com>" ];
      sha256 = "04x8i5aagxmslk350i8qszyw7kmvrqc3d99g4qi1xnfmr61y7m68";
      inherit dependencies buildDependencies features;
    };
    enum_primitive_0_1_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "enum_primitive";
      version = "0.1.1";
      authors = [ "Anders Kaseorg <andersk@mit.edu>" ];
      sha256 = "1a225rlsz7sz3nn14dar71kp2f9v08s3rwl6j55xp51mv01f695y";
      inherit dependencies buildDependencies features;
    };
    error_chain_0_7_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "error-chain";
      version = "0.7.2";
      authors = [ "Brian Anderson <banderson@mozilla.com>" "Paul Colomiets <paul@colomiets.name>" "Colin Kiegel <kiegel@gmx.de>" "Yamakaky <yamakaky@yamaworld.fr>" ];
      sha256 = "0b1r4ggdgy1djfvz2s4l5kirmfsmxd286y6wx0p9ahv2phb7inyi";
      inherit dependencies buildDependencies features;
    };
    gif_0_9_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "gif";
      version = "0.9.1";
      authors = [ "nwin <nwin@users.noreply.github.com>" ];
      sha256 = "16s7b0rqc6gg1fcbppakm3jy2q462w3qvykcmcmifmg7q7lwsg6r";
      inherit dependencies buildDependencies features;
    };
    glob_0_2_11_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "glob";
      version = "0.2.11";
      authors = [ "The Rust Project Developers" ];
      sha256 = "104389jjxs8r2f5cc9p0axhjmndgln60ih5x4f00ccgg9d3zarlf";
      inherit dependencies buildDependencies features;
    };
    image_0_12_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "image";
      version = "0.12.3";
      authors = [ "ccgn" "bvssvni <bvssvni@gmail.com>" "nwin" "TyOverby <ty@pre-alpha.com>" ];
      sha256 = "12xdzi29vr19gz3h93c1ihyvyv9xar9sp0inrjwwvlbjvn8nn0p9";
      libPath = "./src/lib.rs";
      inherit dependencies buildDependencies features;
    };
    inflate_0_1_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "inflate";
      version = "0.1.1";
      authors = [ "nwin <nwin@users.noreply.github.com>" ];
      sha256 = "112kh9hjcjjxdybl032mdhpwnr3qxw8j0ch6hwanwpcf3gz42g1h";
      inherit dependencies buildDependencies features;
    };
    jpeg_decoder_0_1_11_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "jpeg-decoder";
      version = "0.1.11";
      authors = [ "Ulf Nilsson <kaksmet@gmail.com>" ];
      sha256 = "1xm39c1cff5gkczs164371hk2gpkjpkbw63k4f8mjnpwwpn9xk4n";
      inherit dependencies buildDependencies features;
    };
    kernel32_sys_0_2_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "kernel32-sys";
      version = "0.2.2";
      authors = [ "Peter Atashian <retep998@gmail.com>" ];
      sha256 = "1lrw1hbinyvr6cp28g60z97w32w8vsk6pahk64pmrv2fmby8srfj";
      libName = "kernel32";
      build = "build.rs";
      inherit dependencies buildDependencies features;
    };
    libc_0_2_21_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "libc";
      version = "0.2.21";
      authors = [ "The Rust Project Developers" ];
      sha256 = "0glj3lxwc8358cfw9pb5dd4zr9iynzj6w2ly59nshrggsw021j75";
      inherit dependencies buildDependencies features;
    };
    lzw_0_10_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "lzw";
      version = "0.10.0";
      authors = [ "nwin <nwin@users.noreply.github.com>" ];
      sha256 = "1cfsy2w26kbz9bjaqp9dh1wyyh47rpmhwvj4jpc1rmffbf438fvb";
      inherit dependencies buildDependencies features;
    };
    metadeps_1_1_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "metadeps";
      version = "1.1.1";
      authors = [ "Josh Triplett <josh@joshtriplett.org>" ];
      sha256 = "1px8v94jn4ps63gqmvgsfcqxrwjhpa9z4xr0y1lh95wn2063fsar";
      inherit dependencies buildDependencies features;
    };
    num_integer_0_1_33_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "num-integer";
      version = "0.1.33";
      authors = [ "The Rust Project Developers" ];
      sha256 = "1rhy9lf4lhl7r8278n73mi9y55v9a71639as3v92bj2gk1x4k729";
      inherit dependencies buildDependencies features;
    };
    num_iter_0_1_33_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "num-iter";
      version = "0.1.33";
      authors = [ "The Rust Project Developers" ];
      sha256 = "1xjzf2p2vaqwknkr4s8ka5hn6cpr5rsshnydbpkn2pvapfzdrqd3";
      inherit dependencies buildDependencies features;
    };
    num_rational_0_1_36_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "num-rational";
      version = "0.1.36";
      authors = [ "The Rust Project Developers" ];
      sha256 = "0jibhs8xiap2wlv1xjwdvhyj4yrxwfisqbnfm53vjm5ldlijp87p";
      inherit dependencies buildDependencies features;
    };
    num_traits_0_1_37_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "num-traits";
      version = "0.1.37";
      authors = [ "The Rust Project Developers" ];
      sha256 = "0rwzfmdjq6iz6plva2gi7agvy1w9sjs7aqjh0p115w57xiix2224";
      inherit dependencies buildDependencies features;
    };
    num_cpus_1_3_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "num_cpus";
      version = "1.3.0";
      authors = [ "Sean McArthur <sean.monstar@gmail.com>" ];
      sha256 = "0i0zm6qh932k9b67qf7f1vsczkdim5kg9qv73m7y5hhw1i781rrb";
      inherit dependencies buildDependencies features;
    };
    pkg_config_0_3_9_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "pkg-config";
      version = "0.3.9";
      authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
      sha256 = "06k8fxgrsrxj8mjpjcq1n7mn2p1shpxif4zg9y5h09c7vy20s146";
      inherit dependencies buildDependencies features;
    };
    png_0_6_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "png";
      version = "0.6.2";
      authors = [ "nwin <nwin@users.noreply.github.com>" ];
      sha256 = "03i78w5jbvk9y6babfrh7h0akvg81pcyyhniilv24z5v0vh5jvjs";
      inherit dependencies buildDependencies features;
    };
    rand_0_3_15_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "rand";
      version = "0.3.15";
      authors = [ "The Rust Project Developers" ];
      sha256 = "1fs30rc1xic40s1n7l3y7pxzfifpy03mgrvhy5ggp5p7zjfv3rr8";
      inherit dependencies buildDependencies features;
    };
    rayon_0_6_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "rayon";
      version = "0.6.0";
      authors = [ "Niko Matsakis <niko@alum.mit.edu>" ];
      sha256 = "0y2693bari5j4h46mjzkyc9lkfbnq2d1p0ldyn6sb02jn63lpw97";
      inherit dependencies buildDependencies features;
    };
    scoped_threadpool_0_1_7_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "scoped_threadpool";
      version = "0.1.7";
      authors = [ "Marvin LÃ¶bel <loebel.marvin@gmail.com>" ];
      sha256 = "0dg58f18i6v071640062n0vymr4h42cnj0xy8a7b80sc0mddykyk";
      inherit dependencies buildDependencies features;
    };
    strsim_0_6_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "strsim";
      version = "0.6.0";
      authors = [ "Danny Guo <dannyguo91@gmail.com>" ];
      sha256 = "1lz85l6y68hr62lv4baww29yy7g8pg20dlr0lbaswxmmcb0wl7gd";
      inherit dependencies buildDependencies features;
    };
    term_size_0_2_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "term_size";
      version = "0.2.3";
      authors = [ "Kevin K. <kbknapp@gmail.com>" "Benjamin Sago <ogham@bsago.me>" ];
      sha256 = "16b7gq2dmz7mws4vgai7whxy4xkg4yvlhm7spz0q6jyipqfq87ci";
      inherit dependencies buildDependencies features;
    };
    toml_0_2_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "toml";
      version = "0.2.1";
      authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
      sha256 = "0p4rkaqhmk4fp6iqpxfgp3p98hxhbs2wmla3fq531n875h922yqs";
      inherit dependencies buildDependencies features;
    };
    unicode_segmentation_1_1_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "unicode-segmentation";
      version = "1.1.0";
      authors = [ "kwantam <kwantam@gmail.com>" ];
      sha256 = "10hk7wy0217jwdbp27p36skwkig5lbhk482yfzij9m87h247rry0";
      inherit dependencies buildDependencies features;
    };
    unicode_width_0_1_4_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "unicode-width";
      version = "0.1.4";
      authors = [ "kwantam <kwantam@gmail.com>" ];
      sha256 = "1rp7a04icn9y5c0lm74nrd4py0rdl0af8bhdwq7g478n1xifpifl";
      inherit dependencies buildDependencies features;
    };
    vec_map_0_7_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "vec_map";
      version = "0.7.0";
      authors = [ "Alex Crichton <alex@alexcrichton.com>" "Jorge Aparicio <japaricious@gmail.com>" "Alexis Beingessner <a.beingessner@gmail.com>" "Brian Anderson <>" "tbu- <>" "Manish Goregaokar <>" "Aaron Turon <aturon@mozilla.com>" "Adolfo OchagavÃ­a <>" "Niko Matsakis <>" "Steven Fackler <>" "Chase Southwood <csouth3@illinois.edu>" "Eduard Burtescu <>" "Florian Wilkens <>" "FÃ©lix Raimundo <>" "Tibor Benke <>" "Markus Siemens <markus@m-siemens.de>" "Josh Branchaud <jbranchaud@gmail.com>" "Huon Wilson <dbau.pp@gmail.com>" "Corey Farwell <coref@rwell.org>" "Aaron Liblong <>" "Nick Cameron <nrc@ncameron.org>" "Patrick Walton <pcwalton@mimiga.net>" "Felix S Klock II <>" "Andrew Paseltiner <apaseltiner@gmail.com>" "Sean McArthur <sean.monstar@gmail.com>" "Vadim Petrochenkov <>" ];
      sha256 = "0jawvi83b1nm101nam0w71kdyh7cy3fr0l9qj1hfcjvzvihfk2l1";
      inherit dependencies buildDependencies features;
    };
    wc_grab_0_2_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "wc-grab";
      version = "0.2.0";
      authors = [ "Timidger <APragmaticPlace@gmail.com>" ];
      src = ./.;
      inherit dependencies buildDependencies features;
    };
    winapi_0_2_8_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "winapi";
      version = "0.2.8";
      authors = [ "Peter Atashian <retep998@gmail.com>" ];
      sha256 = "0a45b58ywf12vb7gvj6h3j264nydynmzyqz8d8rqxsj6icqv82as";
      inherit dependencies buildDependencies features;
    };
    winapi_build_0_1_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
      crateName = "winapi-build";
      version = "0.1.1";
      authors = [ "Peter Atashian <retep998@gmail.com>" ];
      sha256 = "1lxlpi87rkhxcwp2ykf1ldw3p108hwm24nywf3jfrvmff4rjhqga";
      libName = "build";
      inherit dependencies buildDependencies features;
    };

in
rec {
  adler32_1_0_0 = adler32_1_0_0_ rec {};
  ansi_term_0_9_0 = ansi_term_0_9_0_ rec {};
  atty_0_2_2 = atty_0_2_2_ rec {
    dependencies = (if !(kernel == "windows") then [ libc_0_2_21 ] else [])
      ++ (if kernel == "windows" then [ kernel32_sys_0_2_2 winapi_0_2_8 ] else []);
  };
  libc_0_2_21_features."default".from_atty_0_2_2__default = true;
  kernel32_sys_0_2_2_features."default".from_atty_0_2_2__default = true;
  winapi_0_2_8_features."default".from_atty_0_2_2__default = true;
  bitflags_0_7_0 = bitflags_0_7_0_ rec {};
  bitflags_0_8_0 = bitflags_0_8_0_ rec {
    features = mkFeatures bitflags_0_8_0_features;
  };
  bitflags_0_8_0_features."i128".self_unstable = hasFeature (bitflags_0_8_0_features."unstable" or {});
  byteorder_1_0_0 = byteorder_1_0_0_ rec {
    features = mkFeatures byteorder_1_0_0_features;
  };
  byteorder_1_0_0_features."std".self_default = hasDefault byteorder_1_0_0_features;
  clap_2_22_0 = clap_2_22_0_ rec {
    dependencies = [ ansi_term_0_9_0 atty_0_2_2 bitflags_0_8_0 strsim_0_6_0 term_size_0_2_3 unicode_segmentation_1_1_0 unicode_width_0_1_4 vec_map_0_7_0 ]
      ++ (if lib.lists.any (x: x == "ansi_term") features then [ansi_term_0_9_0] else [])      ++ (if lib.lists.any (x: x == "atty") features then [atty_0_2_2] else [])      ++ (if lib.lists.any (x: x == "strsim") features then [strsim_0_6_0] else [])      ++ (if lib.lists.any (x: x == "term_size") features then [term_size_0_2_3] else []);
    features = mkFeatures clap_2_22_0_features;
  };
  clap_2_22_0_features."".self = true;
  clap_2_22_0_features."ansi_term".self_color = hasFeature (clap_2_22_0_features."color" or {});
  clap_2_22_0_features."atty".self_color = hasFeature (clap_2_22_0_features."color" or {});
  clap_2_22_0_features."suggestions".self_default = hasDefault clap_2_22_0_features;
  clap_2_22_0_features."color".self_default = hasDefault clap_2_22_0_features;
  clap_2_22_0_features."wrap_help".self_default = hasDefault clap_2_22_0_features;
  clap_2_22_0_features."clippy".self_lints = hasFeature (clap_2_22_0_features."lints" or {});
  clap_2_22_0_features."strsim".self_suggestions = hasFeature (clap_2_22_0_features."suggestions" or {});
  clap_2_22_0_features."term_size".self_wrap_help = hasFeature (clap_2_22_0_features."wrap_help" or {});
  clap_2_22_0_features."yaml-rust".self_yaml = hasFeature (clap_2_22_0_features."yaml" or {});
  ansi_term_0_9_0_features."default".from_clap_2_22_0__default = true;
  atty_0_2_2_features."default".from_clap_2_22_0__default = true;
  bitflags_0_8_0_features."default".from_clap_2_22_0__default = true;
  clippy_0_0_0_features."default".from_clap_2_22_0__default = true;
  strsim_0_6_0_features."default".from_clap_2_22_0__default = true;
  term_size_0_2_3_features."default".from_clap_2_22_0__default = true;
  unicode_segmentation_1_1_0_features."default".from_clap_2_22_0__default = true;
  unicode_width_0_1_4_features."default".from_clap_2_22_0__default = true;
  vec_map_0_7_0_features."default".from_clap_2_22_0__default = true;
  yaml_rust_0_0_0_features."default".from_clap_2_22_0__default = true;
  color_quant_1_0_0 = color_quant_1_0_0_ rec {};
  dbus_0_5_2 = dbus_0_5_2_ rec {
    dependencies = [ libc_0_2_21 ];
    buildDependencies = [ metadeps_1_1_1 ];
    features = mkFeatures dbus_0_5_2_features;
  };
  dbus_0_5_2_features."".self = true;
  libc_0_2_21_features."default".from_dbus_0_5_2__default = true;
  deflate_0_7_5 = deflate_0_7_5_ rec {
    dependencies = [ adler32_1_0_0 byteorder_1_0_0 ];
  };
  adler32_1_0_0_features."default".from_deflate_0_7_5__default = true;
  byteorder_1_0_0_features."default".from_deflate_0_7_5__default = true;
  deque_0_3_1 = deque_0_3_1_ rec {
    dependencies = [ rand_0_3_15 ];
  };
  rand_0_3_15_features."default".from_deque_0_3_1__default = true;
  enum_primitive_0_1_1 = enum_primitive_0_1_1_ rec {
    dependencies = [ num_traits_0_1_37 ];
  };
  num_traits_0_1_37_features."default".from_enum_primitive_0_1_1__default = false;
  error_chain_0_7_2 = error_chain_0_7_2_ rec {
    dependencies = [];
    features = mkFeatures error_chain_0_7_2_features;
  };
  error_chain_0_7_2_features."backtrace".self_default = hasDefault error_chain_0_7_2_features;
  error_chain_0_7_2_features."example_generated".self_default = hasDefault error_chain_0_7_2_features;
  backtrace_0_0_0_features."default".from_error_chain_0_7_2__default = true;
  gif_0_9_1 = gif_0_9_1_ rec {
    dependencies = [ color_quant_1_0_0 lzw_0_10_0 ];
    features = mkFeatures gif_0_9_1_features;
  };
  gif_0_9_1_features."libc".self_c_api = hasFeature (gif_0_9_1_features."c_api" or {});
  gif_0_9_1_features."raii_no_panic".self_default = hasDefault gif_0_9_1_features;
  color_quant_1_0_0_features."default".from_gif_0_9_1__default = true;
  libc_0_0_0_features."default".from_gif_0_9_1__default = true;
  lzw_0_10_0_features."default".from_gif_0_9_1__default = true;
  glob_0_2_11 = glob_0_2_11_ rec {};
  image_0_12_3 = image_0_12_3_ rec {
    dependencies = [ byteorder_1_0_0 enum_primitive_0_1_1 gif_0_9_1 glob_0_2_11 jpeg_decoder_0_1_11 num_iter_0_1_33 num_rational_0_1_36 num_traits_0_1_37 png_0_6_2 scoped_threadpool_0_1_7 ]
      ++ (if lib.lists.any (x: x == "gif") features then [gif_0_9_1] else [])      ++ (if lib.lists.any (x: x == "jpeg-decoder") features then [jpeg_decoder_0_1_11] else [])      ++ (if lib.lists.any (x: x == "png") features then [png_0_6_2] else [])      ++ (if lib.lists.any (x: x == "scoped_threadpool") features then [scoped_threadpool_0_1_7] else []);
    features = mkFeatures image_0_12_3_features;
  };
  image_0_12_3_features."".self = true;
  image_0_12_3_features."gif_codec".self_default = hasDefault image_0_12_3_features;
  image_0_12_3_features."jpeg".self_default = hasDefault image_0_12_3_features;
  image_0_12_3_features."ico".self_default = hasDefault image_0_12_3_features;
  image_0_12_3_features."png_codec".self_default = hasDefault image_0_12_3_features;
  image_0_12_3_features."ppm".self_default = hasDefault image_0_12_3_features;
  image_0_12_3_features."tga".self_default = hasDefault image_0_12_3_features;
  image_0_12_3_features."tiff".self_default = hasDefault image_0_12_3_features;
  image_0_12_3_features."webp".self_default = hasDefault image_0_12_3_features;
  image_0_12_3_features."bmp".self_default = hasDefault image_0_12_3_features;
  image_0_12_3_features."hdr".self_default = hasDefault image_0_12_3_features;
  image_0_12_3_features."gif".self_gif_codec = hasFeature (image_0_12_3_features."gif_codec" or {});
  image_0_12_3_features."scoped_threadpool".self_hdr = hasFeature (image_0_12_3_features."hdr" or {});
  image_0_12_3_features."bmp".self_ico = hasFeature (image_0_12_3_features."ico" or {});
  image_0_12_3_features."png_codec".self_ico = hasFeature (image_0_12_3_features."ico" or {});
  image_0_12_3_features."jpeg-decoder".self_jpeg = hasFeature (image_0_12_3_features."jpeg" or {});
  image_0_12_3_features."png".self_png_codec = hasFeature (image_0_12_3_features."png_codec" or {});
  byteorder_1_0_0_features."default".from_image_0_12_3__default = true;
  enum_primitive_0_1_1_features."default".from_image_0_12_3__default = true;
  gif_0_9_1_features."default".from_image_0_12_3__default = true;
  glob_0_2_11_features."default".from_image_0_12_3__default = true;
  jpeg_decoder_0_1_11_features."default".from_image_0_12_3__default = true;
  num_iter_0_1_33_features."default".from_image_0_12_3__default = true;
  num_rational_0_1_36_features."default".from_image_0_12_3__default = false;
  num_traits_0_1_37_features."default".from_image_0_12_3__default = true;
  png_0_6_2_features."default".from_image_0_12_3__default = true;
  scoped_threadpool_0_1_7_features."default".from_image_0_12_3__default = true;
  inflate_0_1_1 = inflate_0_1_1_ rec {
    features = mkFeatures inflate_0_1_1_features;
  };
  inflate_0_1_1_features."".self = true;
  jpeg_decoder_0_1_11 = jpeg_decoder_0_1_11_ rec {
    dependencies = [ byteorder_1_0_0 rayon_0_6_0 ]
      ++ (if lib.lists.any (x: x == "rayon") features then [rayon_0_6_0] else []);
    features = mkFeatures jpeg_decoder_0_1_11_features;
  };
  jpeg_decoder_0_1_11_features."".self = true;
  jpeg_decoder_0_1_11_features."rayon".self_default = hasDefault jpeg_decoder_0_1_11_features;
  byteorder_1_0_0_features."default".from_jpeg_decoder_0_1_11__default = true;
  rayon_0_6_0_features."default".from_jpeg_decoder_0_1_11__default = true;
  kernel32_sys_0_2_2 = kernel32_sys_0_2_2_ rec {
    dependencies = [ winapi_0_2_8 ];
    buildDependencies = [ winapi_build_0_1_1 ];
  };
  winapi_0_2_8_features."default".from_kernel32_sys_0_2_2__default = true;
  libc_0_2_21 = libc_0_2_21_ rec {
    features = mkFeatures libc_0_2_21_features;
  };
  libc_0_2_21_features."use_std".self_default = hasDefault libc_0_2_21_features;
  lzw_0_10_0 = lzw_0_10_0_ rec {
    features = mkFeatures lzw_0_10_0_features;
  };
  lzw_0_10_0_features."raii_no_panic".self_default = hasDefault lzw_0_10_0_features;
  metadeps_1_1_1 = metadeps_1_1_1_ rec {
    dependencies = [ error_chain_0_7_2 pkg_config_0_3_9 toml_0_2_1 ];
  };
  error_chain_0_7_2_features."default".from_metadeps_1_1_1__default = false;
  pkg_config_0_3_9_features."default".from_metadeps_1_1_1__default = true;
  toml_0_2_1_features."default".from_metadeps_1_1_1__default = false;
  num_integer_0_1_33 = num_integer_0_1_33_ rec {
    dependencies = [ num_traits_0_1_37 ];
  };
  num_traits_0_1_37_features."default".from_num_integer_0_1_33__default = true;
  num_iter_0_1_33 = num_iter_0_1_33_ rec {
    dependencies = [ num_integer_0_1_33 num_traits_0_1_37 ];
  };
  num_integer_0_1_33_features."default".from_num_iter_0_1_33__default = true;
  num_traits_0_1_37_features."default".from_num_iter_0_1_33__default = true;
  num_rational_0_1_36 = num_rational_0_1_36_ rec {
    dependencies = [ num_integer_0_1_33 num_traits_0_1_37 ];
    features = mkFeatures num_rational_0_1_36_features;
  };
  num_rational_0_1_36_features."num-bigint".self_bigint = hasFeature (num_rational_0_1_36_features."bigint" or {});
  num_rational_0_1_36_features."bigint".self_default = hasDefault num_rational_0_1_36_features;
  num_rational_0_1_36_features."rustc-serialize".self_default = hasDefault num_rational_0_1_36_features;
  num_bigint_0_0_0_features."default".from_num_rational_0_1_36__default = true;
  num_integer_0_1_33_features."default".from_num_rational_0_1_36__default = true;
  num_traits_0_1_37_features."default".from_num_rational_0_1_36__default = true;
  rustc_serialize_0_0_0_features."default".from_num_rational_0_1_36__default = true;
  serde_0_0_0_features."default".from_num_rational_0_1_36__default = true;
  num_traits_0_1_37 = num_traits_0_1_37_ rec {};
  num_cpus_1_3_0 = num_cpus_1_3_0_ rec {
    dependencies = [ libc_0_2_21 ];
  };
  libc_0_2_21_features."default".from_num_cpus_1_3_0__default = true;
  pkg_config_0_3_9 = pkg_config_0_3_9_ rec {};
  png_0_6_2 = png_0_6_2_ rec {
    dependencies = [ bitflags_0_7_0 deflate_0_7_5 inflate_0_1_1 num_iter_0_1_33 ]
      ++ (if lib.lists.any (x: x == "deflate") features then [deflate_0_7_5] else []);
    features = mkFeatures png_0_6_2_features;
  };
  png_0_6_2_features."".self = true;
  png_0_6_2_features."png-encoding".self_default = hasDefault png_0_6_2_features;
  png_0_6_2_features."deflate".self_png-encoding = hasFeature (png_0_6_2_features."png-encoding" or {});
  bitflags_0_7_0_features."default".from_png_0_6_2__default = true;
  deflate_0_7_5_features."default".from_png_0_6_2__default = true;
  inflate_0_1_1_features."default".from_png_0_6_2__default = true;
  num_iter_0_1_33_features."default".from_png_0_6_2__default = true;
  rand_0_3_15 = rand_0_3_15_ rec {
    dependencies = [ libc_0_2_21 ];
  };
  libc_0_2_21_features."default".from_rand_0_3_15__default = true;
  rayon_0_6_0 = rayon_0_6_0_ rec {
    dependencies = [ deque_0_3_1 libc_0_2_21 num_cpus_1_3_0 rand_0_3_15 ];
    features = mkFeatures rayon_0_6_0_features;
  };
  rayon_0_6_0_features."".self = true;
  deque_0_3_1_features."default".from_rayon_0_6_0__default = true;
  libc_0_2_21_features."default".from_rayon_0_6_0__default = true;
  num_cpus_1_3_0_features."default".from_rayon_0_6_0__default = true;
  rand_0_3_15_features."default".from_rayon_0_6_0__default = true;
  scoped_threadpool_0_1_7 = scoped_threadpool_0_1_7_ rec {
    features = mkFeatures scoped_threadpool_0_1_7_features;
  };
  scoped_threadpool_0_1_7_features."".self = true;
  strsim_0_6_0 = strsim_0_6_0_ rec {};
  term_size_0_2_3 = term_size_0_2_3_ rec {
    dependencies = []
      ++ (if !(kernel == "windows") then [ libc_0_2_21 ] else [])
      ++ (if kernel == "windows" then [ kernel32_sys_0_2_2 winapi_0_2_8 ] else []);
    features = mkFeatures term_size_0_2_3_features;
  };
  term_size_0_2_3_features."clippy".self_lints = hasFeature (term_size_0_2_3_features."lints" or {});
  term_size_0_2_3_features."nightly".self_lints = hasFeature (term_size_0_2_3_features."lints" or {});
  term_size_0_2_3_features."lints".self_travis = hasFeature (term_size_0_2_3_features."travis" or {});
  term_size_0_2_3_features."nightly".self_travis = hasFeature (term_size_0_2_3_features."travis" or {});
  clippy_0_0_0_features."default".from_term_size_0_2_3__default = true;
  libc_0_2_21_features."default".from_term_size_0_2_3__default = true;
  kernel32_sys_0_2_2_features."default".from_term_size_0_2_3__default = true;
  winapi_0_2_8_features."default".from_term_size_0_2_3__default = true;
  toml_0_2_1 = toml_0_2_1_ rec {
    dependencies = [];
  };
  toml_0_2_1_features."rustc-serialize".self_default = hasDefault toml_0_2_1_features;
  rustc_serialize_0_0_0_features."default".from_toml_0_2_1__default = true;
  serde_0_0_0_features."default".from_toml_0_2_1__default = true;
  unicode_segmentation_1_1_0 = unicode_segmentation_1_1_0_ rec {
    features = mkFeatures unicode_segmentation_1_1_0_features;
  };
  unicode_segmentation_1_1_0_features."".self = true;
  unicode_width_0_1_4 = unicode_width_0_1_4_ rec {
    features = mkFeatures unicode_width_0_1_4_features;
  };
  unicode_width_0_1_4_features."".self = true;
  vec_map_0_7_0 = vec_map_0_7_0_ rec {
    dependencies = [];
    features = mkFeatures vec_map_0_7_0_features;
  };
  vec_map_0_7_0_features."serde".self_eders = hasFeature (vec_map_0_7_0_features."eders" or {});
  vec_map_0_7_0_features."serde_derive".self_eders = hasFeature (vec_map_0_7_0_features."eders" or {});
  serde_0_0_0_features."default".from_vec_map_0_7_0__default = true;
  serde_derive_0_0_0_features."default".from_vec_map_0_7_0__default = true;
  wc_grab_0_2_0 = wc_grab_0_2_0_ rec {
    dependencies = [ clap_2_22_0 dbus_0_5_2 image_0_12_3 ];
  };
  clap_2_22_0_features."default".from_wc_grab_0_2_0__default = true;
  dbus_0_5_2_features."default".from_wc_grab_0_2_0__default = true;
  image_0_12_3_features."default".from_wc_grab_0_2_0__default = true;
  winapi_0_2_8 = winapi_0_2_8_ rec {};
  winapi_build_0_1_1 = winapi_build_0_1_1_ rec {};
}
