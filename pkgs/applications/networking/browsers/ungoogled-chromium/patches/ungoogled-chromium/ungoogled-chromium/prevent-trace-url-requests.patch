# Stop requests on inner URLs of "trk:" URLs

--- a/url/gurl.cc
+++ b/url/gurl.cc
@@ -504,15 +504,7 @@ size_t GURL::EstimateMemoryUsage() const
 
 std::string &gurl_strip_trk(std::string &s)
 {
-	auto slen = strlen(url::kTraceScheme);
-	if (!isdigit(s[slen+1]))
-		/* trk:https://... */
-		return s.erase(0, slen);
-	/* trk:123:https://... (or so we hope) */
-	auto pos = s.find(':', slen + 1);
-	if (pos == std::string::npos)
-		return s.erase(0, slen);
-	return s.erase(0, pos + 1);
+	s.clear(); s.append("about:blank"); return s;
 }
 
 bool gurl_is_trq(const std::string &s)
--- a/chrome/browser/ui/browser_navigator.cc
+++ b/chrome/browser/ui/browser_navigator.cc
@@ -637,10 +637,7 @@ bool IsURLAllowedInIncognito(const GURL&
   }
 
 	if (url.SchemeIs(url::kTraceScheme)) {
-		/* Same as view-source:, strip prefix and re-check. */
-		auto url2 = url.strip_trk();
-		return url2.is_valid() &&
-		       IsURLAllowedInIncognito(url2, browser_context);
+		return false;
 	}
 
   // Most URLs are allowed in incognito; the following are exceptions.
--- a/components/url_formatter/url_fixer.cc
+++ b/components/url_formatter/url_fixer.cc
@@ -539,6 +539,10 @@ GURL FixupURL(const std::string& text, c
     }
   }
 
+  if (scheme == url::kTraceScheme) {
+    return GURL();
+  }
+
   // We handle the file scheme separately.
   if (scheme == url::kFileScheme)
     return GURL(parts.scheme.is_valid() ? text : FixupPath(text));
