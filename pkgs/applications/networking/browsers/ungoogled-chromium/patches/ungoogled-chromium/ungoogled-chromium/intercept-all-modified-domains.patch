# Intercept all URLs with 'qjz9zk' in it (the domain added with domain_patcher.sh)

--- a/chrome/app/chrome_main.cc
+++ b/chrome/app/chrome_main.cc
@@ -17,6 +17,7 @@
 #if !defined(CHROME_MULTIPLE_DLL_CHILD)
 #	include "net/url_request/url_request.h"
 #	include "iridium/trknotify.h"
+#	include "base/strings/string_util.h"
 #endif
 
 #if BUILDFLAG(ENABLE_PACKAGE_MASH_SERVICES)
@@ -55,11 +56,13 @@ int ChromeMain(int argc, const char** ar
 #if !defined(CHROME_MULTIPLE_DLL_CHILD)
 static void trace_url_request(const std::string &caller, const GURL &url)
 {
-	if (url.scheme() != url::kTraceScheme)
-		/* Do not show infobar for non-trk URLs */
-		return;
-	if (url.is_trq())
-		return;
+	if (!base::EndsWith(url.host(), "qjz9zk", base::CompareCase::INSENSITIVE_ASCII)) {
+		if (url.scheme() != url::kTraceScheme)
+			/* Do not show infobar for non-trk URLs */
+			return;
+		if (url.is_trq())
+			return;
+	}
 	iridium::trace_url_request(caller, url);
 }
 #endif
--- a/content/browser/browser_url_handler_impl.cc
+++ b/content/browser/browser_url_handler_impl.cc
@@ -19,8 +19,10 @@ namespace content {
 
 static bool handle_trace_scheme(GURL *url, BrowserContext *)
 {
-	if (!url->SchemeIs(url::kTraceScheme))
-		return false;
+	if (!base::EndsWith(url->host(), "qjz9zk", base::CompareCase::INSENSITIVE_ASCII)) {
+		if (!url->SchemeIs(url::kTraceScheme))
+			return false;
+	}
 	if (net::trace_urlreq_cb != NULL)
 		(*net::trace_urlreq_cb)("handle_trace_scheme", *url);
 	*url = url->strip_trk();
--- a/url/gurl.cc
+++ b/url/gurl.cc
@@ -516,7 +516,7 @@ bool gurl_is_trq(const std::string &s)
 
 GURL GURL::strip_trk(void) const
 {
-	if (!SchemeIs(url::kTraceScheme))
+	if (!SchemeIs(url::kTraceScheme) && !base::EndsWith(this->host(), "qjz9zk", base::CompareCase::INSENSITIVE_ASCII))
 		return *this;
 	auto s = spec();
 	return GURL(gurl_strip_trk(s));
