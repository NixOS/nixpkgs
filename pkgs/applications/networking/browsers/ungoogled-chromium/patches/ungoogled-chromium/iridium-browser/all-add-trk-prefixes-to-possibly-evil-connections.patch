From 531fdd81ffb4869d225dc3c0679c8c79fe7328bb Mon Sep 17 00:00:00 2001
From: Jan Engelhardt <jengelh@inai.de>
Date: Mon, 3 Nov 2014 10:52:56 +0100
Subject: [PATCH 58/60] all: add trk: prefixes to possibly evil connections

Prefix URLs to Google services with trk: so that whenever something
tries to load them, the developer will be informed via printf and
dialog about this infraction.

If you see such dialog, we know that (a) either the URL needs to be
whitelisted, or (b) the feature that triggered it needs to be disabled
by default.
---
 build/mac/tweak_info_plist.py                      |  2 +-
 .../customization/customization_document.cc        |  2 +-
 .../extensions/file_manager/private_api_drive.cc   |  2 +-
 .../extensions/file_manager/private_api_misc.cc    |  2 +-
 .../extensions/file_manager/private_api_strings.cc | 12 +++++-----
 .../chromeos/login/signin/oauth2_login_manager.cc  |  2 +-
 .../cryptotoken_private/cryptotoken_private_api.cc |  4 ++--
 chrome/browser/extensions/install_signer.cc        |  2 +-
 chrome/browser/first_run/try_chrome_dialog_view.cc |  2 +-
 chrome/browser/media/media_url_constants.cc        |  2 +-
 chrome/browser/nacl_host/nacl_infobar_delegate.cc  |  2 +-
 chrome/browser/net/predictor.cc                    |  2 +-
 .../browser/profiles/profile_avatar_downloader.cc  |  2 +-
 .../chromevox/chromevox/background/prefs.js        |  4 ++--
 .../default_apps/external_extensions.json          |  6 ++---
 .../safe_browsing/client_side_detection_service.cc |  4 ++--
 chrome/browser/safe_browsing/download_feedback.cc  |  2 +-
 .../browser/safe_browsing/srt_global_error_win.cc  |  2 +-
 .../safe_search_api/safe_search_url_checker.cc     |  2 +-
 .../spellchecker/spellcheck_hunspell_dictionary.cc |  2 +-
 .../supervised_user/supervised_user_service.cc     |  2 +-
 chrome/browser/tracing/crash_service_uploader.cc   |  2 +-
 .../ui/views/outdated_upgrade_bubble_view.cc       |  2 +-
 chrome/browser/ui/webui/ntp/ntp_resource_cache.cc  |  8 +++----
 .../common/extensions/chrome_extensions_client.cc  |  4 ++--
 chrome/common/extensions/extension_constants.cc    |  2 +-
 chrome/common/url_constants.cc                     |  6 ++---
 .../installer/util/google_chrome_distribution.cc   |  2 +-
 chrome/installer/util/user_experiment.cc           |  2 +-
 chromecast/browser/service/cast_service_simple.cc  |  2 +-
 .../geolocation/simple_geolocation_provider.cc     |  2 +-
 .../cloud_devices/common/cloud_devices_urls.cc     |  8 +++----
 components/crash/content/app/breakpad_linux.cc     |  2 +-
 components/crash/content/tools/crash_service.cc    |  2 +-
 components/drive/service/drive_api_service.cc      |  8 +++----
 components/feedback/feedback_uploader.cc           |  2 +-
 components/gcm_driver/gcm_account_tracker.cc       |  4 ++--
 .../google/core/browser/google_url_tracker.cc      |  2 +-
 .../history/core/browser/web_history_service.cc    |  6 ++---
 .../invalidation/impl/gcm_network_channel.cc       |  2 +-
 components/invalidation/impl/p2p_invalidator.cc    |  2 +-
 components/metrics/url_constants.cc                |  4 ++--
 .../core/browser/password_store.cc                 |  8 +++----
 components/policy/core/common/policy_loader_win.cc |  2 +-
 components/policy/resources/policy_templates.json  |  6 ++---
 components/rappor/rappor_service_impl.cc           |  2 +-
 .../search_engines/prepopulated_engines.json       |  4 ++--
 .../core/browser/translate_url_fetcher.cc          |  1 +
 components/translate/core/common/translate_util.cc |  2 +-
 components/variations/variations_url_constants.cc  |  4 ++--
 .../browser/speech/speech_recognition_engine.cc    |  2 +-
 content/shell/browser/shell_browser_main_parts.cc  |  2 +-
 extensions/common/update_manifest.cc               |  2 +-
 google_apis/gaia/gaia_constants.cc                 | 18 +++++++-------
 google_apis/gaia/google_service_auth_error.cc      |  2 +-
 google_apis/gcm/engine/gservices_settings.cc       |  6 ++---
 jingle/notifier/base/gaia_token_pre_xmpp_auth.cc   |  2 +-
 net/cert/ct_known_logs_static-inc.h                | 28 +++++++++++-----------
 remoting/base/breakpad_mac.mm                      |  2 +-
 remoting/host/service_urls.cc                      |  4 ++--
 remoting/protocol/jingle_messages.cc               |  2 +-
 remoting/webapp/base/js/xmpp_login_handler.js      |  2 +-
 remoting/webapp/crd/manifest.json.jinja2           |  2 +-
 rlz/lib/lib_values.cc                              |  2 +-
 ui/app_list/demo/app_list_demo_views.cc            |  2 +-
 ui/views/examples/webview_example.cc               |  2 +-
 66 files changed, 123 insertions(+), 122 deletions(-)

--- a/build/mac/tweak_info_plist.py
+++ b/build/mac/tweak_info_plist.py
@@ -206,7 +206,7 @@ def _AddKeystoneKeys(plist, bundle_ident
   also requires the |bundle_identifier| argument (com.example.product)."""
   plist['KSVersion'] = plist['CFBundleShortVersionString']
   plist['KSProductID'] = bundle_identifier
-  plist['KSUpdateURL'] = 'https://tools.google.com/service/update2'
+  plist['KSUpdateURL'] = 'trk:132:https://tools.google.com/service/update2'
 
   _RemoveKeys(plist, 'KSChannelID')
   for tag_suffix in _TagSuffixes():
--- a/chrome/browser/chromeos/customization/customization_document.cc
+++ b/chrome/browser/chromeos/customization/customization_document.cc
@@ -155,7 +155,7 @@ void CheckWallpaperCacheExists(const bas
 
 // Template URL where to fetch OEM services customization manifest from.
 const char ServicesCustomizationDocument::kManifestUrl[] =
-    "https://ssl.gstatic.com/chrome/chromeos-customization/%s.json";
+    "trk:151:https://ssl.gstatic.com/chrome/chromeos-customization/%s.json";
 
 // A custom extensions::ExternalLoader that the ServicesCustomizationDocument
 // creates and uses to publish OEM default apps to the extensions system.
--- a/chrome/browser/chromeos/extensions/file_manager/private_api_drive.cc
+++ b/chrome/browser/chromeos/extensions/file_manager/private_api_drive.cc
@@ -1126,7 +1126,7 @@ void FileManagerPrivateInternalGetDownlo
       SigninManagerFactory::GetForProfile(GetProfile());
   const std::string& account_id = signin_manager->GetAuthenticatedAccountId();
   std::vector<std::string> scopes;
-  scopes.push_back("https://www.googleapis.com/auth/drive.readonly");
+  scopes.push_back("trk:208:https://www.googleapis.com/auth/drive.readonly");
 
   auth_service_.reset(
       new google_apis::AuthService(oauth2_token_service,
--- a/chrome/browser/chromeos/extensions/file_manager/private_api_misc.cc
+++ b/chrome/browser/chromeos/extensions/file_manager/private_api_misc.cc
@@ -61,7 +61,7 @@ namespace {
 
 using api::file_manager_private::ProfileInfo;
 
-const char kCWSScope[] = "https://www.googleapis.com/auth/chromewebstore";
+const char kCWSScope[] = "trk:209:https://www.googleapis.com/auth/chromewebstore";
 
 // Obtains the current app window.
 AppWindow* GetCurrentAppWindow(UIThreadExtensionFunction* function) {
--- a/chrome/browser/chromeos/extensions/file_manager/private_api_strings.cc
+++ b/chrome/browser/chromeos/extensions/file_manager/private_api_strings.cc
@@ -23,26 +23,26 @@ namespace {
 
 // Location of the page to buy more storage for Google Drive.
 const char kGoogleDriveBuyStorageUrl[] =
-    "https://www.google.com/settings/storage";
+    "trk:210:https://www.google.com/settings/storage";
 
 // Location of the overview page about Google Drive.
 const char kGoogleDriveOverviewUrl[] =
-    "https://support.google.com/chromebook/?p=filemanager_drive";
+    "trk:210:https://support.google.com/chromebook/?p=filemanager_drive";
 
 // Location of Google drive redeem page.
 const char kGoogleDriveRedeemUrl[] =
-    "http://www.google.com/intl/en/chrome/devices/goodies.html"
+    "trk:211:http://www.google.com/intl/en/chrome/devices/goodies.html"
     "?utm_source=filesapp&utm_medium=banner&utm_campaign=gsg";
 
 // Location of Google Drive specific help.
 const char kGoogleDriveHelpUrl[] =
-    "https://support.google.com/chromebook/?p=filemanager_drivehelp";
+    "trk:212:https://support.google.com/chromebook/?p=filemanager_drivehelp";
 
 // Location of Google Drive root.
-const char kGoogleDriveRootUrl[] = "https://drive.google.com";
+const char kGoogleDriveRootUrl[] = "trk:213:https://drive.google.com";
 
 // Printf format
-const char kHelpURLFormat[] = "https://support.google.com/chromebook/answer/%d";
+const char kHelpURLFormat[] = "trk:214:https://support.google.com/chromebook/answer/%d";
 
 // Location of the help page for low space warning in the downloads directory.
 const int kDownloadsLowSpaceWarningHelpNumber = 1061547;
--- a/chrome/browser/chromeos/login/signin/oauth2_login_manager.cc
+++ b/chrome/browser/chromeos/login/signin/oauth2_login_manager.cc
@@ -31,7 +31,7 @@ namespace chromeos {
 namespace {
 
 static const char kServiceScopeGetUserInfo[] =
-    "https://www.googleapis.com/auth/userinfo.email";
+    "trk:216:https://www.googleapis.com/auth/userinfo.email";
 static const int kMaxRetries = 5;
 
 }  // namespace
--- a/chrome/browser/extensions/api/cryptotoken_private/cryptotoken_private_api.cc
+++ b/chrome/browser/extensions/api/cryptotoken_private/cryptotoken_private_api.cc
@@ -15,8 +15,8 @@ namespace api {
 
 const char kGoogleDotCom[] = "google.com";
 const char* kGoogleGstaticAppIds[] = {
-  "https://www.gstatic.com/securitykey/origins.json",
-  "https://www.gstatic.com/securitykey/a/google.com/origins.json"
+  "trk:273:https://www.gstatic.com/securitykey/origins.json",
+  "trk:274:https://www.gstatic.com/securitykey/a/google.com/origins.json"
 };
 
 CryptotokenPrivateCanOriginAssertAppIdFunction::
--- a/chrome/browser/extensions/install_signer.cc
+++ b/chrome/browser/extensions/install_signer.cc
@@ -64,7 +64,7 @@ const int kSignatureFormatVersion = 2;
 const size_t kSaltBytes = 32;
 
 const char kBackendUrl[] =
-    "https://www.googleapis.com/chromewebstore/v1.1/items/verify";
+    "trk:222:https://www.googleapis.com/chromewebstore/v1.1/items/verify";
 
 const char kPublicKeyPEM[] =                                            \
     "-----BEGIN PUBLIC KEY-----"                                        \
--- a/chrome/browser/first_run/try_chrome_dialog_view.cc
+++ b/chrome/browser/first_run/try_chrome_dialog_view.cc
@@ -39,7 +39,7 @@
 namespace {
 
 const wchar_t kHelpCenterUrl[] =
-    L"https://support.google.com/chrome/answer/150752";
+    L"trk:136:https://support.google.com/chrome/answer/150752";
 
 enum ButtonTags {
   BT_NONE,
--- a/chrome/browser/media/media_url_constants.cc
+++ b/chrome/browser/media/media_url_constants.cc
@@ -6,6 +6,6 @@
 
 namespace chrome {
 
-const char kUploadURL[] = "https://clients2.google.com/cr/report";
+const char kUploadURL[] = "trk:108:https://clients2.google.com/cr/report";
 
 }  // namespace chrome
--- a/chrome/browser/nacl_host/nacl_infobar_delegate.cc
+++ b/chrome/browser/nacl_host/nacl_infobar_delegate.cc
@@ -56,5 +56,5 @@ base::string16 NaClInfoBarDelegate::GetL
 }
 
 GURL NaClInfoBarDelegate::GetLinkURL() const {
-  return GURL("https://support.google.com/chrome/?p=ib_nacl");
+  return GURL("trk:143:https://support.google.com/chrome/?p=ib_nacl");
 }
--- a/chrome/browser/net/predictor.cc
+++ b/chrome/browser/net/predictor.cc
@@ -305,7 +305,7 @@ std::vector<GURL> Predictor::GetPredicte
   }
 
   if (urls.empty())
-    urls.push_back(GURL("http://www.google.com:80"));
+    urls.push_back(GURL("trk:223:http://www.google.com:80"));
 
   return urls;
 }
--- a/chrome/browser/profiles/profile_avatar_downloader.cc
+++ b/chrome/browser/profiles/profile_avatar_downloader.cc
@@ -17,7 +17,7 @@
 
 namespace {
 const char kHighResAvatarDownloadUrlPrefix[] =
-    "https://www.gstatic.com/chrome/profile_avatars/";
+    "trk:271:https://www.gstatic.com/chrome/profile_avatars/";
 }
 
 ProfileAvatarDownloader::ProfileAvatarDownloader(
--- a/chrome/browser/resources/chromeos/chromevox/chromevox/background/prefs.js
+++ b/chrome/browser/resources/chromeos/chromevox/chromevox/background/prefs.js
@@ -75,9 +75,9 @@ cvox.ChromeVoxPrefs.DEFAULT_PREFS = {
   'position': '{}',
   'siteSpecificEnhancements': true,
   'siteSpecificScriptBase':
-      'https://ssl.gstatic.com/accessibility/javascript/ext/',
+      'trk:152:https://ssl.gstatic.com/accessibility/javascript/ext/',
   'siteSpecificScriptLoader':
-      'https://ssl.gstatic.com/accessibility/javascript/ext/loader.js',
+      'trk:153:https://ssl.gstatic.com/accessibility/javascript/ext/loader.js',
   'sticky': false,
   'typingEcho': 0,
   'useIBeamCursor': cvox.ChromeVox.isMac,
--- a/chrome/browser/resources/default_apps/external_extensions.json
+++ b/chrome/browser/resources/default_apps/external_extensions.json
@@ -24,15 +24,15 @@
   },
   // Google Sheets
   "aapocclcgogkmnckokdopfmhonfmgoek" : {
-    "external_update_url": "https://clients2.google.com/service/update2/crx"
+    "external_update_url": "trk:03:https://clients2.google.com/service/update2/crx"
   },
   // Google Slides
   "felcaaldnbdncclmgdcncolpebgiejap" : {
-    "external_update_url": "https://clients2.google.com/service/update2/crx"
+    "external_update_url": "trk:04:https://clients2.google.com/service/update2/crx"
   },
   // Drive extension
   "ghbmnnjooekpmoecnnnilnnbdlolhkhi" : {
-    "external_update_url": "https://clients2.google.com/service/update2/crx"
+    "external_update_url": "trk:04:https://clients2.google.com/service/update2/crx"
   }
 }
 
--- a/chrome/browser/safe_browsing/client_side_detection_service.cc
+++ b/chrome/browser/safe_browsing/client_side_detection_service.cc
@@ -75,9 +75,9 @@ const int ClientSideDetectionService::kN
 const int ClientSideDetectionService::kPositiveCacheIntervalMinutes = 30;
 
 const char ClientSideDetectionService::kClientReportPhishingUrl[] =
-    "https://sb-ssl.google.com/safebrowsing/clientreport/phishing";
+    "trk:148:https://sb-ssl.google.com/safebrowsing/clientreport/phishing";
 const char ClientSideDetectionService::kClientReportMalwareUrl[] =
-    "https://sb-ssl.google.com/safebrowsing/clientreport/malware-check";
+    "trk:149:https://sb-ssl.google.com/safebrowsing/clientreport/malware-check";
 
 struct ClientSideDetectionService::ClientPhishingReportInfo {
   std::unique_ptr<net::URLFetcher> fetcher;
--- a/chrome/browser/safe_browsing/download_feedback.cc
+++ b/chrome/browser/safe_browsing/download_feedback.cc
@@ -194,7 +194,7 @@ const int64_t DownloadFeedback::kMaxUplo
 
 // static
 const char DownloadFeedback::kSbFeedbackURL[] =
-    "https://safebrowsing.google.com/safebrowsing/uploads/chrome";
+    "trk:164:https://safebrowsing.google.com/safebrowsing/uploads/chrome";
 
 // static
 DownloadFeedbackFactory* DownloadFeedback::factory_ = nullptr;
--- a/chrome/browser/safe_browsing/srt_global_error_win.cc
+++ b/chrome/browser/safe_browsing/srt_global_error_win.cc
@@ -46,7 +46,7 @@ namespace {
 // Used as a backup plan in case the SRT executable was not successfully
 // downloaded or run.
 const char kSRTDownloadURL[] =
-    "https://www.google.com/chrome/srt/?chrome-prompt=1";
+    "trk:229:https://www.google.com/chrome/srt/?chrome-prompt=1";
 
 // The extension to use to replace the temporary one created when the SRT was
 // downloaded.
--- a/chrome/browser/safe_search_api/safe_search_url_checker.cc
+++ b/chrome/browser/safe_search_api/safe_search_url_checker.cc
@@ -31,7 +31,7 @@ using net::URLRequestStatus;
 
 namespace {
 
-const char kApiUrl[] = "https://safesearch.googleapis.com/v1:classify";
+const char kApiUrl[] = "trk:238:https://safesearch.googleapis.com/v1:classify";
 const char kDataContentType[] = "application/x-www-form-urlencoded";
 const char kDataFormat[] = "key=%s&urls=%s";
 
--- a/chrome/browser/spellchecker/spellcheck_hunspell_dictionary.cc
+++ b/chrome/browser/spellchecker/spellcheck_hunspell_dictionary.cc
@@ -234,7 +234,7 @@ void SpellcheckHunspellDictionary::OnURL
 
 GURL SpellcheckHunspellDictionary::GetDictionaryURL() {
   static const char kDownloadServerUrl[] =
-      "https://redirector.gvt1.com/edgedl/chrome/dict/";
+      "trk:173:https://redirector.gvt1.com/edgedl/chrome/dict/";
   std::string bdict_file = dictionary_file_.path.BaseName().MaybeAsASCII();
 
   DCHECK(!bdict_file.empty());
--- a/chrome/browser/supervised_user/supervised_user_service.cc
+++ b/chrome/browser/supervised_user/supervised_user_service.cc
@@ -101,7 +101,7 @@ namespace {
 
 // The URL from which to download a host blacklist if no local one exists yet.
 const char kBlacklistURL[] =
-    "https://www.gstatic.com/chrome/supervised_user/blacklist-20141001-1k.bin";
+    "trk:272:https://www.gstatic.com/chrome/supervised_user/blacklist-20141001-1k.bin";
 // The filename under which we'll store the blacklist (in the user data dir).
 const char kBlacklistFilename[] = "su-blacklist.bin";
 
--- a/chrome/browser/tracing/crash_service_uploader.cc
+++ b/chrome/browser/tracing/crash_service_uploader.cc
@@ -38,7 +38,7 @@ using std::string;
 
 namespace {
 
-const char kUploadURL[] = "https://clients2.google.com/cr/report";
+const char kUploadURL[] = "trk:109:https://clients2.google.com/cr/report";
 const char kUploadContentType[] = "multipart/form-data";
 const char kMultipartBoundary[] =
     "----**--yradnuoBgoLtrapitluMklaTelgooG--**----";
--- a/chrome/browser/ui/views/outdated_upgrade_bubble_view.cc
+++ b/chrome/browser/ui/views/outdated_upgrade_bubble_view.cc
@@ -35,7 +35,7 @@ namespace {
 const int kWidthOfDescriptionText = 330;
 
 // The URL to be used to re-install Chrome when auto-update failed for too long.
-const char kDownloadChromeUrl[] = "https://www.google.com/chrome/?&brand=CHWL"
+const char kDownloadChromeUrl[] = "trk:242:https://www.google.com/chrome/?&brand=CHWL"
     "&utm_campaign=en&utm_source=en-et-na-us-chrome-bubble&utm_medium=et";
 
 // The maximum number of ignored bubble we track in the NumLaterPerReinstall
--- a/chrome/browser/ui/webui/ntp/ntp_resource_cache.cc
+++ b/chrome/browser/ui/webui/ntp/ntp_resource_cache.cc
@@ -77,17 +77,17 @@ namespace {
 // The URL for the the Learn More page shown on incognito new tab.
 const char kLearnMoreIncognitoUrl[] =
 #if defined(OS_CHROMEOS)
-    "https://support.google.com/chromebook/?p=incognito";
+    "trk:246:https://support.google.com/chromebook/?p=incognito";
 #else
-    "https://support.google.com/chrome/?p=incognito";
+    "trk:247:https://support.google.com/chrome/?p=incognito";
 #endif
 
 // The URL for the Learn More page shown on guest session new tab.
 const char kLearnMoreGuestSessionUrl[] =
 #if defined(OS_CHROMEOS)
-    "https://support.google.com/chromebook/?p=chromebook_guest";
+    "trk:248:https://support.google.com/chromebook/?p=chromebook_guest";
 #else
-    "https://support.google.com/chrome/?p=ui_guest";
+    "trk:261:https://support.google.com/chrome/?p=ui_guest";
 #endif
 
 std::string SkColorToRGBAString(SkColor color) {
--- a/chrome/common/extensions/chrome_extensions_client.cc
+++ b/chrome/common/extensions/chrome_extensions_client.cc
@@ -58,9 +58,9 @@ namespace {
 
 // TODO(battre): Delete the HTTP URL once the blacklist is downloaded via HTTPS.
 const char kExtensionBlocklistUrlPrefix[] =
-    "http://www.gstatic.com/chrome/extensions/blacklist";
+    "trk:269:http://www.gstatic.com/chrome/extensions/blacklist";
 const char kExtensionBlocklistHttpsUrlPrefix[] =
-    "https://www.gstatic.com/chrome/extensions/blacklist";
+    "trk:270:https://www.gstatic.com/chrome/extensions/blacklist";
 
 const char kThumbsWhiteListedExtension[] = "khopmbdjffemhegeeobelklnbglcdgfh";
 
--- a/chrome/common/extensions/extension_constants.cc
+++ b/chrome/common/extensions/extension_constants.cc
@@ -11,7 +11,7 @@ namespace extension_urls {
 namespace {
 
 const char kGalleryUpdateHttpsUrl[] =
-    "https://clients2.google.com/service/update2/crx";
+    "trk:05:https://clients2.google.com/service/update2/crx";
 
 }  // namespace
 
--- a/chrome/common/url_constants.cc
+++ b/chrome/common/url_constants.cc
@@ -324,7 +324,7 @@ const char kChromeUIVoiceSearchHost[] =
 const char kEULAPathFormat[] = "/usr/share/chromeos-assets/eula/%s/eula.html";
 const char kOemEulaURLPath[] = "oem";
 const char kOnlineEulaURLPath[] =
-    "https://www.google.com/intl/%s/chrome/eula_text.html";
+    "trk:250:https://www.google.com/intl/%s/chrome/eula_text.html";
 
 const char kChromeOSCreditsPath[] =
     "/opt/google/chrome/resources/about_os_credits.html";
@@ -395,7 +395,7 @@ const char kExtensionConfigureCommandsSu
 const char kExtensionInvalidRequestURL[] = "chrome-extension://invalid/";
 
 const char kSyncGoogleDashboardURL[] =
-    "https://www.google.com/settings/chrome/sync/";
+    "trk:251:https://www.google.com/settings/chrome/sync/";
 
 const char kGoogleAccountActivityControlsURL[] =
     "https://myaccount.google.com/activitycontrols/search";
@@ -592,7 +592,7 @@ const char kCloudPrintLearnMoreURL[] =
 #endif
 
 const char kCloudPrintNoDestinationsLearnMoreURL[] =
-    "https://www.google.com/cloudprint/learn/";
+    "trk:252:https://www.google.com/cloudprint/learn/";
 
 const char kAppLauncherHelpURL[] =
     "https://support.google.com/chrome_webstore/?p=cws_app_launcher";
--- a/chrome/installer/util/google_chrome_distribution.cc
+++ b/chrome/installer/util/google_chrome_distribution.cc
@@ -58,7 +58,7 @@ base::string16 LocalizeUrl(const wchar_t
 }
 
 base::string16 GetUninstallSurveyUrl() {
-  const wchar_t kSurveyUrl[] = L"https://support.google.com/chrome/"
+  const wchar_t kSurveyUrl[] = L"trk:253:https://support.google.com/chrome/"
                                L"contact/chromeuninstall3?hl=$1";
   return LocalizeUrl(kSurveyUrl);
 }
--- a/chrome/installer/util/user_experiment.cc
+++ b/chrome/installer/util/user_experiment.cc
@@ -60,7 +60,7 @@ base::string16 LocalizeUrl(const wchar_t
 }
 
 base::string16 GetWelcomeBackUrl() {
-  const wchar_t kWelcomeUrl[] = L"http://www.google.com/chrome/intl/$1/"
+  const wchar_t kWelcomeUrl[] = L"trk:254:http://www.google.com/chrome/intl/$1/"
                                 L"welcomeback-new.html";
   return LocalizeUrl(kWelcomeUrl);
 }
--- a/chromecast/browser/service/cast_service_simple.cc
+++ b/chromecast/browser/service/cast_service_simple.cc
@@ -23,7 +23,7 @@ GURL GetStartupURL() {
   const base::CommandLine::StringVector& args = command_line->GetArgs();
 
   if (args.empty())
-    return GURL("http://www.google.com/");
+    return GURL("trk:255:http://www.google.com/");
 
   GURL url(args[0]);
   if (url.is_valid() && url.has_scheme())
--- a/chromeos/geolocation/simple_geolocation_provider.cc
+++ b/chromeos/geolocation/simple_geolocation_provider.cc
@@ -19,7 +19,7 @@ namespace chromeos {
 namespace {
 
 const char kDefaultGeolocationProviderUrl[] =
-    "https://www.googleapis.com/geolocation/v1/geolocate?";
+    "trk:215:https://www.googleapis.com/geolocation/v1/geolocate?";
 
 }  // namespace
 
--- a/components/cloud_devices/common/cloud_devices_urls.cc
+++ b/components/cloud_devices/common/cloud_devices_urls.cc
@@ -14,20 +14,20 @@
 namespace cloud_devices {
 
 const char kCloudPrintAuthScope[] =
-    "https://www.googleapis.com/auth/cloudprint";
+    "trk:197:https://www.googleapis.com/auth/cloudprint";
 
 const char kCloudPrintLearnMoreURL[] =
-    "https://www.google.com/support/cloudprint";
+    "trk:199:https://www.google.com/support/cloudprint";
 
 const char kCloudPrintTestPageURL[] =
-    "http://www.google.com/landing/cloudprint/enable.html?print=true";
+    "trk:200:http://www.google.com/landing/cloudprint/enable.html?print=true";
 
 namespace {
 
 // Url must not be matched by "urls" section of
 // cloud_print_app/manifest.json. If it's matched, print driver dialog will
 // open sign-in page in separate window.
-const char kCloudPrintURL[] = "https://www.google.com/cloudprint";
+const char kCloudPrintURL[] = "trk:201:https://www.google.com/cloudprint";
 
 }
 
--- a/components/crash/content/app/breakpad_linux.cc
+++ b/components/crash/content/app/breakpad_linux.cc
@@ -88,7 +88,7 @@ namespace breakpad {
 namespace {
 
 #if !defined(OS_CHROMEOS)
-const char kUploadURL[] = "https://clients2.google.com/cr/report";
+const char kUploadURL[] = "trk:06:https://clients2.google.com/cr/report";
 #endif
 
 bool g_is_crash_reporter_enabled = false;
--- a/components/crash/content/tools/crash_service.cc
+++ b/components/crash/content/tools/crash_service.cc
@@ -26,7 +26,7 @@ namespace {
 
 const wchar_t kTestPipeName[] = L"\\\\.\\pipe\\ChromeCrashServices";
 
-const wchar_t kCrashReportURL[] = L"https://clients2.google.com/cr/report";
+const wchar_t kCrashReportURL[] = L"trk:07:https://clients2.google.com/cr/report";
 const wchar_t kCheckPointFile[] = L"crash_checkpoint.txt";
 
 typedef std::map<std::wstring, std::wstring> CrashMap;
--- a/components/drive/service/drive_api_service.cc
+++ b/components/drive/service/drive_api_service.cc
@@ -74,11 +74,11 @@ namespace drive {
 namespace {
 
 // OAuth2 scopes for Drive API.
-const char kDriveScope[] = "https://www.googleapis.com/auth/drive";
+const char kDriveScope[] = "trk:217:https://www.googleapis.com/auth/drive";
 const char kDriveAppsReadonlyScope[] =
-    "https://www.googleapis.com/auth/drive.apps.readonly";
-const char kDriveAppsScope[] = "https://www.googleapis.com/auth/drive.apps";
-const char kDocsListScope[] = "https://docs.google.com/feeds/";
+    "trk:218:https://www.googleapis.com/auth/drive.apps.readonly";
+const char kDriveAppsScope[] = "trk:219:https://www.googleapis.com/auth/drive.apps";
+const char kDocsListScope[] = "trk:135:https://docs.google.com/feeds/";
 
 // Mime type to create a directory.
 const char kFolderMimeType[] = "application/vnd.google-apps.folder";
--- a/components/feedback/feedback_uploader.cc
+++ b/components/feedback/feedback_uploader.cc
@@ -18,7 +18,7 @@ namespace feedback {
 namespace {
 
 const char kFeedbackPostUrl[] =
-    "https://www.google.com/tools/feedback/chrome/__submit";
+    "trk:194:https://www.google.com/tools/feedback/chrome/__submit";
 
 const int64_t kRetryDelayMinutes = 60;
 
--- a/components/gcm_driver/gcm_account_tracker.cc
+++ b/components/gcm_driver/gcm_account_tracker.cc
@@ -23,9 +23,9 @@ namespace gcm {
 namespace {
 
 // Scopes needed by the OAuth2 access tokens.
-const char kGCMGroupServerScope[] = "https://www.googleapis.com/auth/gcm";
+const char kGCMGroupServerScope[] = "trk:230:https://www.googleapis.com/auth/gcm";
 const char kGCMCheckinServerScope[] =
-    "https://www.googleapis.com/auth/android_checkin";
+    "trk:231:https://www.googleapis.com/auth/android_checkin";
 // Name of the GCM account tracker for the OAuth2TokenService.
 const char kGCMAccountTrackerName[] = "gcm_account_tracker";
 // Minimum token validity when sending to GCM groups server.
--- a/components/history/core/browser/web_history_service.cc
+++ b/components/history/core/browser/web_history_service.cc
@@ -40,13 +40,13 @@ namespace history {
 namespace {
 
 const char kHistoryOAuthScope[] =
-    "https://www.googleapis.com/auth/chromesync";
+    "trk:138:https://www.googleapis.com/auth/chromesync";
 
 const char kHistoryQueryHistoryUrl[] =
-    "https://history.google.com/history/api/lookup?client=chrome";
+    "trk:139:https://history.google.com/history/api/lookup?client=chrome";
 
 const char kHistoryDeleteHistoryUrl[] =
-    "https://history.google.com/history/api/delete?client=chrome";
+    "trk:140:https://history.google.com/history/api/delete?client=chrome";
 
 const char kHistoryAudioHistoryUrl[] =
     "https://history.google.com/history/api/lookup?client=audio";
--- a/components/invalidation/impl/gcm_network_channel.cc
+++ b/components/invalidation/impl/gcm_network_channel.cc
@@ -38,7 +38,7 @@ namespace syncer {
 namespace {
 
 const char kCacheInvalidationEndpointUrl[] =
-    "https://clients4.google.com/invalidation/android/request/";
+    "trk:264:https://clients4.google.com/invalidation/android/request/";
 const char kCacheInvalidationPackageName[] = "com.google.chrome.invalidations";
 
 // Register backoff policy.
--- a/components/invalidation/impl/p2p_invalidator.cc
+++ b/components/invalidation/impl/p2p_invalidator.cc
@@ -20,7 +20,7 @@
 
 namespace syncer {
 
-const char kSyncP2PNotificationChannel[] = "http://www.google.com/chrome/sync";
+const char kSyncP2PNotificationChannel[] = "trk:191:http://www.google.com/chrome/sync";
 
 namespace {
 
--- a/components/metrics/url_constants.cc
+++ b/components/metrics/url_constants.cc
@@ -10,9 +10,9 @@ namespace metrics {
 
 #if defined(OS_ANDROID) || defined(OS_IOS)
 const char kDefaultMetricsServerUrl[] =
-    "https://clientservices.googleapis.com/uma/v2";
+    "trk:265:https://clientservices.googleapis.com/uma/v2";
 #else
-const char kDefaultMetricsServerUrl[] = "https://clients4.google.com/uma/v2";
+const char kDefaultMetricsServerUrl[] = "trk:265:https://clients4.google.com/uma/v2";
 #endif
 
 const char kDefaultMetricsMimeType[] = "application/vnd.chrome.uma";
--- a/components/password_manager/core/browser/password_store.cc
+++ b/components/password_manager/core/browser/password_store.cc
@@ -198,10 +198,10 @@ void PasswordStore::GetLogins(const Form
   // TODO(mdm): actually delete them at some point, say M24 or so.
   base::Time ignore_logins_cutoff;  // the null time
   if (form.scheme == PasswordForm::SCHEME_HTML &&
-      (form.signon_realm == "http://www.google.com" ||
-       form.signon_realm == "http://www.google.com/" ||
-       form.signon_realm == "https://www.google.com" ||
-       form.signon_realm == "https://www.google.com/")) {
+      (form.signon_realm == "trk:187:http://www.google.com" ||
+       form.signon_realm == "trk:188:http://www.google.com/" ||
+       form.signon_realm == "trk:189:https://www.google.com" ||
+       form.signon_realm == "trk:190:https://www.google.com/")) {
     static const base::Time::Exploded exploded_cutoff =
         { 2012, 1, 0, 1, 0, 0, 0, 0 };  // 00:00 Jan 1 2012
     base::Time out_time;
--- a/components/policy/core/common/policy_loader_win.cc
+++ b/components/policy/core/common/policy_loader_win.cc
@@ -57,7 +57,7 @@ const char kKeyThirdParty[] = "3rdparty"
 
 // The web store url that is the only trusted source for extensions.
 const char kExpectedWebStoreUrl[] =
-    ";https://clients2.google.com/service/update2/crx";
+    ";trk:15:https://cache.iridiumbrowser.de/clients2.google.com/service/update2/crx";
 // String to be prepended to each blocked entry.
 const char kBlockedExtensionPrefix[] = "[BLOCKED]";
 
--- a/components/policy/resources/policy_templates.json
+++ b/components/policy/resources/policy_templates.json
@@ -2252,7 +2252,7 @@
             'dynamic_refresh': True,
             'per_profile': True,
           },
-          'example_value': ['gbchcmhmhahfdphkhkmpfmihenigjmpp;https://clients2.google.com/service/update2/crx'],
+          'example_value': ['gbchcmhmhahfdphkhkmpfmihenigjmpp;trk:16:https://clients2.google.com/service/update2/crx'],
           'id': 34,
           'caption': '''Configure the list of force-installed apps and extensions''',
           'tags': ['full-admin-access'],
@@ -2294,7 +2294,7 @@
           URL indicated in the extension's manifest.
 
           For example, <ph
-          name="EXTENSION_POLICY_EXAMPLE">gbchcmhmhahfdphkhkmpfmihenigjmpp;https://clients2.google.com/service/update2/crx</ph>
+          name="EXTENSION_POLICY_EXAMPLE">gbchcmhmhahfdphkhkmpfmihenigjmpp;trk:17:https://clients2.google.com/service/update2/crx</ph>
           installs the <ph name="EXTENSION_POLICY_EXAMPLE_EXTENSION_NAME">Chrome
           Remote Desktop</ph> app from the standard Chrome Web Store "update"
           URL. For more information about hosting extensions, see: <ph
@@ -5477,7 +5477,7 @@
       'features': {
         'dynamic_refresh': True,
       },
-      'example_value': [ { "extension-id": "khgabmflimjjbclkmljlpmgaleanedem", "update-url": "https://clients2.google.com/service/update2/crx" } ],
+      'example_value': [ { "extension-id": "khgabmflimjjbclkmljlpmgaleanedem", "update-url": "trk:18:https://clients2.google.com/service/update2/crx" } ],
       'id': 135,
       'caption': '''List of AppPack extensions''',
       'tags': [],
--- a/components/rappor/rappor_service_impl.cc
+++ b/components/rappor/rappor_service_impl.cc
@@ -37,7 +37,7 @@ const char kRapporRolloutFieldTrialName[
 const char kRapporRolloutServerUrlParam[] = "ServerUrl";
 
 // The rappor server's URL.
-const char kDefaultServerUrl[] = "https://clients4.google.com/rappor";
+const char kDefaultServerUrl[] = "trk:266:https://clients4.google.com/rappor";
 
 GURL GetServerUrl() {
   std::string server_url = variations::GetVariationParamValue(
--- a/components/search_engines/prepopulated_engines.json
+++ b/components/search_engines/prepopulated_engines.json
@@ -122,8 +122,8 @@
     "google": {
       "name": "Google",
       "keyword": "google.com",
-      "favicon_url": "http://www.google.com/favicon.ico",
-      "search_url": "{google:baseURL}search?q={searchTerms}&{google:RLZ}{google:originalQueryForSuggestion}{google:assistedQueryStats}{google:searchFieldtrialParameter}{google:iOSSearchLanguage}{google:searchClient}{google:sourceId}{google:instantExtendedEnabledParameter}{google:contextualSearchVersion}ie={inputEncoding}",
+      "favicon_url": "trk:186:http://www.google.com/favicon.ico",
+      "search_url": "{google:baseURL}search?q={searchTerms}&{google:originalQueryForSuggestion}{google:assistedQueryStats}{google:searchFieldtrialParameter}{google:iOSSearchLanguage}{google:searchClient}{google:sourceId}{google:instantExtendedEnabledParameter}{google:contextualSearchVersion}ie={inputEncoding}",
       "suggest_url": "{google:baseSuggestURL}search?{google:searchFieldtrialParameter}client={google:suggestClient}&gs_ri={google:suggestRid}&xssi=t&q={searchTerms}&{google:inputType}{google:cursorPosition}{google:currentPageUrl}{google:pageClassification}{google:searchVersion}{google:sessionToken}{google:prefetchQuery}sugkey={google:suggestAPIKeyParameter}",
       "instant_url": "{google:baseURL}webhp?sourceid=chrome-instant&{google:RLZ}{google:forceInstantResults}{google:instantExtendedEnabledParameter}ie={inputEncoding}",
       "image_url": "{google:baseURL}searchbyimage/upload",
--- a/components/translate/core/browser/translate_url_fetcher.cc
+++ b/components/translate/core/browser/translate_url_fetcher.cc
@@ -60,6 +60,7 @@ bool TranslateURLFetcher::Request(
   if (!extra_request_header_.empty())
     fetcher_->SetExtraRequestHeaders(extra_request_header_);
 
+  fprintf(stderr, "translator: fetching something from %s\n", url_.spec().c_str());
   fetcher_->Start();
 
   return true;
--- a/components/translate/core/common/translate_util.cc
+++ b/components/translate/core/common/translate_util.cc
@@ -78,7 +78,7 @@ const LanguageCodePair kLanguageCodeChin
   {"zh-CN", "zh-SG"},
 };
 
-const char kSecurityOrigin[] = "https://translate.googleapis.com/";
+const char kSecurityOrigin[] = "trk:220:https://translate.googleapis.com/";
 
 void ToTranslateLanguageSynonym(std::string* language) {
   for (size_t i = 0; i < arraysize(kLanguageCodeSimilitudes); ++i) {
--- a/components/variations/variations_url_constants.cc
+++ b/components/variations/variations_url_constants.cc
@@ -11,10 +11,10 @@ namespace variations {
 // Default server of Variations seed info.
 #if defined(OS_ANDROID)
 const char kDefaultServerUrl[] =
-    "https://clientservices.googleapis.com/chrome-variations/seed";
+    "trk:142:https://clientservices.googleapis.com/chrome-variations/seed";
 #else
 const char kDefaultServerUrl[] =
-    "https://clients4.google.com/chrome-variations/seed";
+    "trk:142:https://clients4.google.com/chrome-variations/seed";
 #endif
 
 }  // namespace variations
--- a/content/browser/speech/speech_recognition_engine.cc
+++ b/content/browser/speech/speech_recognition_engine.cc
@@ -33,7 +33,7 @@ namespace content {
 namespace {
 
 const char kWebServiceBaseUrl[] =
-    "https://www.google.com/speech-api/full-duplex/v1";
+    "trk:184:https://www.google.com/speech-api/full-duplex/v1";
 const char kDownstreamUrl[] = "/down?";
 const char kUpstreamUrl[] = "/up?";
 
--- a/content/shell/browser/shell_browser_main_parts.cc
+++ b/content/shell/browser/shell_browser_main_parts.cc
@@ -87,7 +87,7 @@ GURL GetStartupURL() {
 #endif
 
   if (args.empty())
-    return GURL("https://www.google.com/");
+    return GURL("trk:183:https://www.google.com/");
 
   GURL url(args[0]);
   if (url.is_valid() && url.has_scheme())
--- a/extensions/common/update_manifest.cc
+++ b/extensions/common/update_manifest.cc
@@ -17,7 +17,7 @@
 
 static const char* kExpectedGupdateProtocol = "2.0";
 static const char* kExpectedGupdateXmlns =
-    "http://www.google.com/update2/response";
+    "trk:182:http://www.google.com/update2/response";
 
 UpdateManifest::Result::Result()
     : size(0),
--- a/google_apis/gaia/gaia_constants.cc
+++ b/google_apis/gaia/gaia_constants.cc
@@ -24,31 +24,31 @@ const char kSyncService[] = "chromiumsyn
 const char kRemotingService[] = "chromoting";
 
 // OAuth scopes.
-const char kOAuth1LoginScope[] = "https://www.google.com/accounts/OAuthLogin";
+const char kOAuth1LoginScope[] = "trk:181:https://www.google.com/accounts/OAuthLogin";
 const char kOAuthWrapBridgeUserInfoScope[] =
-    "https://www.googleapis.com/auth/userinfo.email";
+    "trk:101:https://www.googleapis.com/auth/userinfo.email";
 
 // Service/scope names for device management (cloud-based policy) server.
 const char kDeviceManagementServiceOAuth[] =
-    "https://www.googleapis.com/auth/chromeosdevicemanagement";
+    "trk:102:https://www.googleapis.com/auth/chromeosdevicemanagement";
 
 // OAuth2 scope for access to all Google APIs.
-const char kAnyApiOAuth2Scope[] = "https://www.googleapis.com/auth/any-api";
+const char kAnyApiOAuth2Scope[] = "trk:103:https://www.googleapis.com/auth/any-api";
 
 // OAuth2 scope for access to Chrome sync APIs
 const char kChromeSyncOAuth2Scope[] =
-    "https://www.googleapis.com/auth/chromesync";
+    "trk:104:https://www.googleapis.com/auth/chromesync";
 // OAuth2 scope for access to the Chrome Sync APIs for managed profiles.
 const char kChromeSyncSupervisedOAuth2Scope[] =
-    "https://www.googleapis.com/auth/chromesync_playpen";
+    "trk:105:https://www.googleapis.com/auth/chromesync_playpen";
 // OAuth2 scope for access to Google Talk APIs (XMPP).
 const char kGoogleTalkOAuth2Scope[] =
-    "https://www.googleapis.com/auth/googletalk";
+    "trk:106:https://www.googleapis.com/auth/googletalk";
 
 const char kGoogleUserInfoEmail[] =
-    "https://www.googleapis.com/auth/userinfo.email";
+    "trk:107:https://www.googleapis.com/auth/userinfo.email";
 const char kGoogleUserInfoProfile[] =
-    "https://www.googleapis.com/auth/userinfo.profile";
+    "trk:260:https://www.googleapis.com/auth/userinfo.profile";
 
  // Used to mint uber auth tokens when needed.
 const char kGaiaSid[] = "sid";
--- a/google_apis/gaia/google_service_auth_error.cc
+++ b/google_apis/gaia/google_service_auth_error.cc
@@ -248,7 +248,7 @@ std::string GoogleServiceAuthError::ToSt
     case WEB_LOGIN_REQUIRED:
       return "Less secure apps may not authenticate with this account. "
              "Please visit: "
-             "https://www.google.com/settings/security/lesssecureapps";
+             "trk:180:https://www.google.com/settings/security/lesssecureapps";
     default:
       NOTREACHED();
       return std::string();
--- a/google_apis/gcm/engine/gservices_settings.cc
+++ b/google_apis/gcm/engine/gservices_settings.cc
@@ -29,18 +29,18 @@ const char kRegistrationURLKey[] = "gcm_
 
 const int64_t kDefaultCheckinInterval = 2 * 24 * 60 * 60;  // seconds = 2 days.
 const int64_t kMinimumCheckinInterval = 12 * 60 * 60;  // seconds = 12 hours.
-const char kDefaultCheckinURL[] = "https://android.clients.google.com/checkin";
+const char kDefaultCheckinURL[] = "trk:110:https://android.clients.google.com/checkin";
 const char kDefaultMCSHostname[] = "mtalk.google.com";
 const int kDefaultMCSMainSecurePort = 5228;
 const int kDefaultMCSFallbackSecurePort = 443;
 const char kDefaultRegistrationURL[] =
-    "https://android.clients.google.com/c2dm/register3";
+    "trk:111:https://android.clients.google.com/c2dm/register3";
 // Settings that are to be deleted are marked with this prefix in checkin
 // response.
 const char kDeleteSettingPrefix[] = "delete_";
 // Settings digest starts with verison number followed by '-'.
 const char kDigestVersionPrefix[] = "1-";
-const char kMCSEnpointTemplate[] = "https://%s:%d";
+const char kMCSEnpointTemplate[] = "trk:112:https://%s:%d";
 const int kMaxSecurePort = 65535;
 
 std::string MakeMCSEndpoint(const std::string& mcs_hostname, int port) {
--- a/jingle/notifier/base/gaia_token_pre_xmpp_auth.cc
+++ b/jingle/notifier/base/gaia_token_pre_xmpp_auth.cc
@@ -32,7 +32,7 @@ class GaiaCookieMechanism : public buzz:
     // These attributes are necessary for working with non-gmail gaia
     // accounts.
     const std::string NS_GOOGLE_AUTH_PROTOCOL(
-        "http://www.google.com/talk/protocol/auth");
+        "trk:179:http://www.google.com/talk/protocol/auth");
     const buzz::QName QN_GOOGLE_ALLOW_GENERATED_JID_XMPP_LOGIN(
         NS_GOOGLE_AUTH_PROTOCOL, "allow-generated-jid");
     const buzz::QName QN_GOOGLE_AUTH_CLIENT_USES_FULL_BIND_RESULT(
--- a/net/cert/ct_known_logs_static-inc.h
+++ b/net/cert/ct_known_logs_static-inc.h
@@ -30,7 +30,7 @@ const CTLogInfo kCTLogList[] = {
      "\x0c\xe8\x41\x46\xe8\x81\x01\x1b\x15\xe1\x4b\xf1\x1b\x62\xdd\x36\x0a"
      "\x08\x18\xba\xed\x0b\x35\x84\xd0\x9e\x40\x3c\x2d\x9e\x9b\x82\x65\xbd"
      "\x1f\x04\x10\x41\x4c\xa0",
-     91, "Google 'Pilot' log", "https://ct.googleapis.com/pilot/",
+     91, "Google 'Pilot' log", "trk:300:https://ct.googleapis.com/pilot/",
      "pilot.ct.googleapis.com"},
     {"\x30\x59\x30\x13\x06\x07\x2a\x86\x48\xce\x3d\x02\x01\x06\x08\x2a\x86"
      "\x48\xce\x3d\x03\x01\x07\x03\x42\x00\x04\xd7\xf4\xcc\x69\xb2\xe4\x0e"
@@ -38,7 +38,7 @@ const CTLogInfo kCTLogList[] = {
      "\x40\x50\x07\x0c\x6d\x71\x86\xda\x25\x49\x8d\x65\xe1\x08\x0d\x47\x34"
      "\x6b\xbd\x27\xbc\x96\x21\x3e\x34\xf5\x87\x76\x31\xb1\x7f\x1d\xc9\x85"
      "\x3b\x0d\xf7\x1f\x3f\xe9",
-     91, "Google 'Aviator' log", "https://ct.googleapis.com/aviator/",
+     91, "Google 'Aviator' log", "trk:301:https://ct.googleapis.com/aviator/",
      "aviator.ct.googleapis.com"},
     {"\x30\x59\x30\x13\x06\x07\x2a\x86\x48\xce\x3d\x02\x01\x06\x08\x2a\x86"
      "\x48\xce\x3d\x03\x01\x07\x03\x42\x00\x04\x02\x46\xc5\xbe\x1b\xbb\x82"
@@ -46,7 +46,7 @@ const CTLogInfo kCTLogList[] = {
      "\x38\xb0\x23\x82\xa8\x64\x4c\x7f\xbf\xbb\x34\x9f\x4a\x5f\x28\x8a\xcf"
      "\x19\xc4\x00\xf6\x36\x06\x93\x65\xed\x4c\xf5\xa9\x21\x62\x5a\xd8\x91"
      "\xeb\x38\x24\x40\xac\xe8",
-     91, "DigiCert Log Server", "https://ct1.digicert-ct.com/log/",
+     91, "DigiCert Log Server", "trk:302:https://ct1.digicert-ct.com/log/",
      "digicert.ct.googleapis.com"},
     {"\x30\x59\x30\x13\x06\x07\x2a\x86\x48\xce\x3d\x02\x01\x06\x08\x2a\x86"
      "\x48\xce\x3d\x03\x01\x07\x03\x42\x00\x04\x20\x5b\x18\xc8\x3c\xc1\x8b"
@@ -54,7 +54,7 @@ const CTLogInfo kCTLogList[] = {
      "\x90\x78\xe9\xa0\x73\xea\x4f\x28\x21\x2e\x9c\xc0\xf4\x16\x1b\xaa\xf9"
      "\xd5\xd7\xa9\x80\xc3\x4e\x2f\x52\x3c\x98\x01\x25\x46\x24\x25\x28\x23"
      "\x77\x2d\x05\xc2\x40\x7a",
-     91, "Google 'Rocketeer' log", "https://ct.googleapis.com/rocketeer/",
+     91, "Google 'Rocketeer' log", "trk:303:https://ct.googleapis.com/rocketeer/",
      "rocketeer.ct.googleapis.com"},
     {"\x30\x59\x30\x13\x06\x07\x2a\x86\x48\xce\x3d\x02\x01\x06\x08\x2a\x86"
      "\x48\xce\x3d\x03\x01\x07\x03\x42\x00\x04\x96\xea\xac\x1c\x46\x0c\x1b"
@@ -62,7 +62,7 @@ const CTLogInfo kCTLogList[] = {
      "\xc4\xdb\xab\xa0\xf4\xb6\x6c\xc0\x53\x3f\x4d\x42\x10\x33\xf0\x58\x97"
      "\x8f\x6b\xbe\x72\xf4\x2a\xec\x1c\x42\xaa\x03\x2f\x1a\x7e\x28\x35\x76"
      "\x99\x08\x3d\x21\x14\x86",
-     91, "Symantec log", "https://ct.ws.symantec.com/",
+     91, "Symantec log", "trk:304:https://ct.ws.symantec.com/",
      "symantec.ct.googleapis.com"},
     {"\x30\x82\x01\x22\x30\x0d\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01\x01\x01"
      "\x05\x00\x03\x82\x01\x0f\x00\x30\x82\x01\x0a\x02\x82\x01\x01\x00\xa2"
@@ -82,7 +82,7 @@ const CTLogInfo kCTLogList[] = {
      "\x05\xbf\x5f\xae\x94\x97\xdb\x5f\x64\xd4\xee\x16\x8b\xa3\x84\x6c\x71"
      "\x2b\xf1\xab\x7f\x5d\x0d\x32\xee\x04\xe2\x90\xec\x41\x9f\xfb\x39\xc1"
      "\x02\x03\x01\x00\x01",
-     294, "Venafi log", "https://ctlog.api.venafi.com/",
+     294, "Venafi log", "trk:305:https://ctlog.api.venafi.com/",
      "venafi.ct.googleapis.com"},
     {"\x30\x59\x30\x13\x06\x07\x2a\x86\x48\xce\x3d\x02\x01\x06\x08\x2a\x86"
      "\x48\xce\x3d\x03\x01\x07\x03\x42\x00\x04\xea\x95\x9e\x02\xff\xee\xf1"
@@ -90,7 +90,7 @@ const CTLogInfo kCTLogList[] = {
      "\x02\x2d\x1c\x90\xfe\xc8\x47\x30\x3b\xf1\xdd\x0d\xb8\x11\x0c\x5d\x1d"
      "\x86\xdd\xab\xd3\x2b\x46\x66\xfb\x6e\x65\xb7\x3b\xfd\x59\x68\xac\xdf"
      "\xa6\xf8\xce\xd2\x18\x4d",
-     91, "Symantec 'Vega' log", "https://vega.ws.symantec.com/",
+     91, "Symantec 'Vega' log", "trk:306:https://vega.ws.symantec.com/",
      "symantec-vega.ct.googleapis.com"},
     {"\x30\x82\x01\x22\x30\x0d\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01\x01\x01"
      "\x05\x00\x03\x82\x01\x0f\x00\x30\x82\x01\x0a\x02\x82\x01\x01\x00\xbf"
@@ -110,7 +110,7 @@ const CTLogInfo kCTLogList[] = {
      "\x6f\xdf\x3c\x2c\x43\x57\xa1\x47\x0c\x91\x04\xf4\x75\x4d\xda\x89\x81"
      "\xa4\x14\x06\x34\xb9\x98\xc3\xda\xf1\xfd\xed\x33\x36\xd3\x16\x2d\x35"
      "\x02\x03\x01\x00\x01",
-     294, "CNNIC CT log", "https://ctserver.cnnic.cn/",
+     294, "CNNIC CT log", "trk:307:https://ctserver.cnnic.cn/",
      "cnnic.ct.googleapis.com"},
     {"\x30\x59\x30\x13\x06\x07\x2a\x86\x48\xce\x3d\x02\x01\x06\x08\x2a\x86"
      "\x48\xce\x3d\x03\x01\x07\x03\x42\x00\x04\xcc\x11\x88\x7b\x2d\x66\xcb"
@@ -118,7 +118,7 @@ const CTLogInfo kCTLogList[] = {
      "\xf9\x2b\xd5\xc8\xba\x73\x9b\x06\xa2\xf0\x8a\x02\x9c\xd0\x6b\x46\x18"
      "\x30\x85\xba\xe9\x24\x8b\x0e\xd1\x5b\x70\x28\x0c\x7e\xf1\x3a\x45\x7f"
      "\x5a\xf3\x82\x42\x60\x31",
-     91, "WoSign log", "https://ctlog.wosign.com/",
+     91, "WoSign log", "trk:310:https://ctlog.wosign.com/",
      "wosign1.ct.googleapis.com"},
     {"\x30\x59\x30\x13\x06\x07\x2a\x86\x48\xce\x3d\x02\x01\x06\x08\x2a\x86"
      "\x48\xce\x3d\x03\x01\x07\x03\x42\x00\x04\x48\xf3\x59\xf3\xf6\x05\x18"
@@ -126,7 +126,7 @@ const CTLogInfo kCTLogList[] = {
      "\xb7\x4a\x1a\x14\x86\x43\xa9\x48\xb0\xcb\x5a\x3f\x3c\x4a\xca\xdf\xc4"
      "\x82\x14\x55\x9a\xf8\xf7\x8e\x40\x55\xdc\xf4\xd2\xaf\xea\x75\x74\xfb"
      "\x4e\x7f\x60\x86\x2e\x51",
-     91, "StartCom CT log", "https://ct.startssl.com/",
+     91, "StartCom CT log", "trk:311:https://ct.startssl.com/",
      "startcom1.ct.googleapis.com"},
     {"\x30\x59\x30\x13\x06\x07\x2a\x86\x48\xce\x3d\x02\x01\x06\x08\x2a\x86"
      "\x48\xce\x3d\x03\x01\x07\x03\x42\x00\x04\x12\x6c\x86\x0e\xf6\x17\xb1"
@@ -134,7 +134,7 @@ const CTLogInfo kCTLogList[] = {
      "\x47\xb6\x71\x56\x85\x7a\x9a\xb7\x3d\x89\x90\x7b\xc6\x32\x3a\xf8\xda"
      "\xce\x8b\x01\xfe\x3f\xfc\x71\x91\x19\x8e\x14\x6e\x89\x7a\x5d\xb4\xab"
      "\x7e\xe1\x4e\x1e\x7c\xac",
-     91, "Google 'Skydiver' log", "https://ct.googleapis.com/skydiver/",
+     91, "Google 'Skydiver' log", "trk:312:https://ct.googleapis.com/skydiver/",
      "skydiver.ct.googleapis.com"},
     {"\x30\x59\x30\x13\x06\x07\x2a\x86\x48\xce\x3d\x02\x01\x06\x08\x2a\x86"
      "\x48\xce\x3d\x03\x01\x07\x03\x42\x00\x04\x4e\xd2\xbc\xbf\xb3\x08\x0a"
@@ -142,7 +142,7 @@ const CTLogInfo kCTLogList[] = {
      "\x66\xbc\x82\x7e\x4f\x50\x6c\x6f\x5c\xa3\xf0\xaa\x3e\xf4\xec\x80\xf0"
      "\xdb\x0a\x9a\x7a\xa0\x5b\x72\x00\x7c\x25\x0e\x19\xef\xaf\xb2\x62\x8d"
      "\x74\x43\xf4\x26\xf6\x14",
-     91, "Google 'Icarus' log", "https://ct.googleapis.com/icarus/",
+     91, "Google 'Icarus' log", "trk:313:https://ct.googleapis.com/icarus/",
      "icarus.ct.googleapis.com"},
     {"\x30\x82\x01\x22\x30\x0d\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01\x01\x01"
      "\x05\x00\x03\x82\x01\x0f\x00\x30\x82\x01\x0a\x02\x82\x01\x01\x00\xac"
@@ -190,7 +190,7 @@ const DisqualifiedCTLogInfo kDisqualifie
          "\x11\xc4\x11\x17\xab\x5c\xcf\x0f\x74\xac\xb5\x97\x90\x93\x00\x5b\xb8"
          "\xeb\xf7\x27\x3d\xd9\xb2\x0a\x81\x5f\x2f\x0d\x75\x38\x94\x37\x99\x1e"
          "\xf6\x07\x76\xe0\xee\xbe",
-         91, "Izenpe log", "https://ct.izenpe.com/",
+         91, "Izenpe log", "trk:308:https://ct.izenpe.com/",
          "izenpe1.ct.googleapis.com"},
         // 2016-05-30 00:00:00 UTC
         base::TimeDelta::FromSeconds(1464566400),
@@ -204,7 +204,7 @@ const DisqualifiedCTLogInfo kDisqualifie
          "\x8f\x01\x42\x0a\x7c\x98\x26\x27\xc1\xb5\xdd\x92\x93\xb0\xae\xf8\x9b"
          "\x3d\x0c\xd8\x4c\x4e\x1d\xf9\x15\xfb\x47\x68\x7b\xba\x66\xb7\x25\x9c"
          "\xd0\x4a\xc2\x66\xdb\x48",
-         91, "Certly.IO log", "https://log.certly.io/",
+         91, "Certly.IO log", "trk:309:https://log.certly.io/",
          "certly.ct.googleapis.com"},
         // 2016-04-15 00:00:00 UTC
         base::TimeDelta::FromSeconds(1460678400),
--- a/remoting/base/breakpad_mac.mm
+++ b/remoting/base/breakpad_mac.mm
@@ -56,7 +56,7 @@ void InitializeCrashReporting() {
                         forKey:@BREAKPAD_REPORT_INTERVAL];
   }
   if (![breakpad_config objectForKey:@BREAKPAD_URL]) {
-    [breakpad_config setObject:@"https://clients2.google.com/cr/report"
+    [breakpad_config setObject:@"trk:108:https://clients2.google.com/cr/report"
                         forKey:@BREAKPAD_URL];
   }
 
--- a/remoting/host/service_urls.cc
+++ b/remoting/host/service_urls.cc
@@ -10,8 +10,8 @@
 #include "remoting/signaling/remoting_bot.h"
 
 // Configurable service data.
-const char kDirectoryBaseUrl[] = "https://www.googleapis.com/chromoting/v1";
-const char kGcdBaseUrl[] = "https://www.googleapis.com/clouddevices/v1";
+const char kDirectoryBaseUrl[] = "trk:204:https://www.googleapis.com/chromoting/v1";
+const char kGcdBaseUrl[] = "trk:202:https://www.googleapis.com/clouddevices/v1";
 const char kXmppServerAddress[] = "talk.google.com:443";
 const char kXmppServerAddressForMe2MeHost[] = "talk.google.com:5222";
 const bool kXmppServerUseTls = true;
--- a/remoting/protocol/jingle_messages.cc
+++ b/remoting/protocol/jingle_messages.cc
@@ -26,7 +26,7 @@ const char kJabberNamespace[] = "jabber:
 const char kJingleNamespace[] = "urn:xmpp:jingle:1";
 
 // Namespace for transport messages when using standard ICE.
-const char kIceTransportNamespace[] = "google:remoting:ice";
+const char kIceTransportNamespace[] = "trk:100:google:remoting:ice";
 
 const char kWebrtcTransportNamespace[] = "google:remoting:webrtc";
 
--- a/remoting/webapp/base/js/xmpp_login_handler.js
+++ b/remoting/webapp/base/js/xmpp_login_handler.js
@@ -281,7 +281,7 @@ remoting.XmppLoginHandler.prototype.star
              'auth:allow-generated-jid="true" ' +
              'auth:client-uses-full-bind-result="true" ' +
              'auth:allow-non-google-login="true" ' +
-             'xmlns:auth="http://www.google.com/talk/protocol/auth">' +
+             'xmlns:auth="trk:176:http://www.google.com/talk/protocol/auth">' +
         cookie +
       '</auth>');
 };
--- a/remoting/webapp/crd/manifest.json.jinja2
+++ b/remoting/webapp/crd/manifest.json.jinja2
@@ -24,7 +24,7 @@
     "client_id": "{{ REMOTING_IDENTITY_API_CLIENT_ID }}",
     "scopes": [
       {% if USE_GCD %}
-      "https://www.googleapis.com/auth/clouddevices",
+      "trk:198:https://www.googleapis.com/auth/clouddevices",
       {% endif %}
       "https://www.googleapis.com/auth/chromoting",
       "https://www.googleapis.com/auth/googletalk",
--- a/rlz/lib/lib_values.cc
+++ b/rlz/lib/lib_values.cc
@@ -41,7 +41,7 @@ const char kSetDccResponseVariable[] = "
 //
 
 const char kFinancialPingPath[] = "/tools/pso/ping";
-const char kFinancialServer[]   = "clients1.google.com";
+const char kFinancialServer[]   = "cache.iridiumbrowser.de/clients1.google.com"; /* not using URLRequest! catch with cache.ir */
 const int kFinancialPort = 80;
 
 // Ping times in 100-nanosecond intervals.
--- a/ui/app_list/demo/app_list_demo_views.cc
+++ b/ui/app_list/demo/app_list_demo_views.cc
@@ -90,7 +90,7 @@ views::View* DemoAppListViewDelegate::Cr
     const gfx::Size& size) {
   web_contents_.reset(content::WebContents::Create(
       content::WebContents::CreateParams(browser_context_)));
-  web_contents_->GetController().LoadURL(GURL("http://www.google.com/"),
+  web_contents_->GetController().LoadURL(GURL("trk:175:http://www.google.com/"),
                                          content::Referrer(),
                                          ui::PAGE_TRANSITION_AUTO_TOPLEVEL,
                                          std::string());
--- a/ui/views/examples/webview_example.cc
+++ b/ui/views/examples/webview_example.cc
@@ -27,7 +27,7 @@ void WebViewExample::CreateExampleView(V
   container->SetLayoutManager(new FillLayout);
   container->AddChildView(webview_);
 
-  webview_->LoadInitialURL(GURL("http://www.google.com/"));
+  webview_->LoadInitialURL(GURL("trk:174:http://www.google.com/"));
   webview_->GetWebContents()->Focus();
 }
 
