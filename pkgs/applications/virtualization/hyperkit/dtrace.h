/*
 * Generated by dtrace(1M).
 */

#ifndef	_DTRACE_H
#define	_DTRACE_H

#include <unistd.h>

#ifdef	__cplusplus
extern "C" {
#endif

#define HYPERKIT_STABILITY "___dtrace_stability$hyperkit$v1$1_1_0_1_1_0_1_1_0_1_1_0_1_1_0"

#define HYPERKIT_TYPEDEFS "___dtrace_typedefs$hyperkit$v2$6f66665f74"

#if !defined(DTRACE_PROBES_DISABLED) || !DTRACE_PROBES_DISABLED

#define	HYPERKIT_BLOCK_DELETE(arg0, arg1) \
do { \
	__asm__ volatile(".reference " HYPERKIT_TYPEDEFS); \
	__dtrace_probe$hyperkit$block__delete$v1$6f66665f74$6f66665f74(arg0, arg1); \
	__asm__ volatile(".reference " HYPERKIT_STABILITY); \
} while (0)
#define	HYPERKIT_BLOCK_DELETE_ENABLED() \
	({ int _r = __dtrace_isenabled$hyperkit$block__delete$v1(); \
		__asm__ volatile(""); \
		_r; })
#define	HYPERKIT_BLOCK_DELETE_DONE(arg0, arg1) \
do { \
	__asm__ volatile(".reference " HYPERKIT_TYPEDEFS); \
	__dtrace_probe$hyperkit$block__delete__done$v1$6f66665f74$6f66665f74(arg0, arg1); \
	__asm__ volatile(".reference " HYPERKIT_STABILITY); \
} while (0)
#define	HYPERKIT_BLOCK_DELETE_DONE_ENABLED() \
	({ int _r = __dtrace_isenabled$hyperkit$block__delete__done$v1(); \
		__asm__ volatile(""); \
		_r; })
#define	HYPERKIT_BLOCK_PREADV(arg0, arg1) \
do { \
	__asm__ volatile(".reference " HYPERKIT_TYPEDEFS); \
	__dtrace_probe$hyperkit$block__preadv$v1$6f66665f74$73697a655f74(arg0, arg1); \
	__asm__ volatile(".reference " HYPERKIT_STABILITY); \
} while (0)
#define	HYPERKIT_BLOCK_PREADV_ENABLED() \
	({ int _r = __dtrace_isenabled$hyperkit$block__preadv$v1(); \
		__asm__ volatile(""); \
		_r; })
#define	HYPERKIT_BLOCK_PREADV_DONE(arg0, arg1) \
do { \
	__asm__ volatile(".reference " HYPERKIT_TYPEDEFS); \
	__dtrace_probe$hyperkit$block__preadv__done$v1$6f66665f74$7373697a655f74(arg0, arg1); \
	__asm__ volatile(".reference " HYPERKIT_STABILITY); \
} while (0)
#define	HYPERKIT_BLOCK_PREADV_DONE_ENABLED() \
	({ int _r = __dtrace_isenabled$hyperkit$block__preadv__done$v1(); \
		__asm__ volatile(""); \
		_r; })
#define	HYPERKIT_BLOCK_PWRITEV(arg0, arg1) \
do { \
	__asm__ volatile(".reference " HYPERKIT_TYPEDEFS); \
	__dtrace_probe$hyperkit$block__pwritev$v1$6f66665f74$73697a655f74(arg0, arg1); \
	__asm__ volatile(".reference " HYPERKIT_STABILITY); \
} while (0)
#define	HYPERKIT_BLOCK_PWRITEV_ENABLED() \
	({ int _r = __dtrace_isenabled$hyperkit$block__pwritev$v1(); \
		__asm__ volatile(""); \
		_r; })
#define	HYPERKIT_BLOCK_PWRITEV_DONE(arg0, arg1) \
do { \
	__asm__ volatile(".reference " HYPERKIT_TYPEDEFS); \
	__dtrace_probe$hyperkit$block__pwritev__done$v1$6f66665f74$7373697a655f74(arg0, arg1); \
	__asm__ volatile(".reference " HYPERKIT_STABILITY); \
} while (0)
#define	HYPERKIT_BLOCK_PWRITEV_DONE_ENABLED() \
	({ int _r = __dtrace_isenabled$hyperkit$block__pwritev__done$v1(); \
		__asm__ volatile(""); \
		_r; })
#define	HYPERKIT_VMX_EPT_FAULT(arg0, arg1, arg2) \
do { \
	__asm__ volatile(".reference " HYPERKIT_TYPEDEFS); \
	__dtrace_probe$hyperkit$vmx__ept__fault$v1$696e74$756e7369676e6564206c6f6e67$756e7369676e6564206c6f6e67(arg0, arg1, arg2); \
	__asm__ volatile(".reference " HYPERKIT_STABILITY); \
} while (0)
#define	HYPERKIT_VMX_EPT_FAULT_ENABLED() \
	({ int _r = __dtrace_isenabled$hyperkit$vmx__ept__fault$v1(); \
		__asm__ volatile(""); \
		_r; })
#define	HYPERKIT_VMX_EXIT(arg0, arg1) \
do { \
	__asm__ volatile(".reference " HYPERKIT_TYPEDEFS); \
	__dtrace_probe$hyperkit$vmx__exit$v1$696e74$756e7369676e656420696e74(arg0, arg1); \
	__asm__ volatile(".reference " HYPERKIT_STABILITY); \
} while (0)
#define	HYPERKIT_VMX_EXIT_ENABLED() \
	({ int _r = __dtrace_isenabled$hyperkit$vmx__exit$v1(); \
		__asm__ volatile(""); \
		_r; })
#define	HYPERKIT_VMX_INJECT_VIRQ(arg0, arg1) \
do { \
	__asm__ volatile(".reference " HYPERKIT_TYPEDEFS); \
	__dtrace_probe$hyperkit$vmx__inject__virq$v1$696e74$696e74(arg0, arg1); \
	__asm__ volatile(".reference " HYPERKIT_STABILITY); \
} while (0)
#define	HYPERKIT_VMX_INJECT_VIRQ_ENABLED() \
	({ int _r = __dtrace_isenabled$hyperkit$vmx__inject__virq$v1(); \
		__asm__ volatile(""); \
		_r; })
#define	HYPERKIT_VMX_READ_MSR(arg0, arg1, arg2) \
do { \
	__asm__ volatile(".reference " HYPERKIT_TYPEDEFS); \
	__dtrace_probe$hyperkit$vmx__read__msr$v1$696e74$756e7369676e656420696e74$756e7369676e6564206c6f6e67(arg0, arg1, arg2); \
	__asm__ volatile(".reference " HYPERKIT_STABILITY); \
} while (0)
#define	HYPERKIT_VMX_READ_MSR_ENABLED() \
	({ int _r = __dtrace_isenabled$hyperkit$vmx__read__msr$v1(); \
		__asm__ volatile(""); \
		_r; })
#define	HYPERKIT_VMX_WRITE_MSR(arg0, arg1, arg2) \
do { \
	__asm__ volatile(".reference " HYPERKIT_TYPEDEFS); \
	__dtrace_probe$hyperkit$vmx__write__msr$v1$696e74$756e7369676e656420696e74$756e7369676e6564206c6f6e67(arg0, arg1, arg2); \
	__asm__ volatile(".reference " HYPERKIT_STABILITY); \
} while (0)
#define	HYPERKIT_VMX_WRITE_MSR_ENABLED() \
	({ int _r = __dtrace_isenabled$hyperkit$vmx__write__msr$v1(); \
		__asm__ volatile(""); \
		_r; })


extern void __dtrace_probe$hyperkit$block__delete$v1$6f66665f74$6f66665f74(off_t, off_t);
extern int __dtrace_isenabled$hyperkit$block__delete$v1(void);
extern void __dtrace_probe$hyperkit$block__delete__done$v1$6f66665f74$6f66665f74(off_t, off_t);
extern int __dtrace_isenabled$hyperkit$block__delete__done$v1(void);
extern void __dtrace_probe$hyperkit$block__preadv$v1$6f66665f74$73697a655f74(off_t, size_t);
extern int __dtrace_isenabled$hyperkit$block__preadv$v1(void);
extern void __dtrace_probe$hyperkit$block__preadv__done$v1$6f66665f74$7373697a655f74(off_t, ssize_t);
extern int __dtrace_isenabled$hyperkit$block__preadv__done$v1(void);
extern void __dtrace_probe$hyperkit$block__pwritev$v1$6f66665f74$73697a655f74(off_t, size_t);
extern int __dtrace_isenabled$hyperkit$block__pwritev$v1(void);
extern void __dtrace_probe$hyperkit$block__pwritev__done$v1$6f66665f74$7373697a655f74(off_t, ssize_t);
extern int __dtrace_isenabled$hyperkit$block__pwritev__done$v1(void);
extern void __dtrace_probe$hyperkit$vmx__ept__fault$v1$696e74$756e7369676e6564206c6f6e67$756e7369676e6564206c6f6e67(int, unsigned long, unsigned long);
extern int __dtrace_isenabled$hyperkit$vmx__ept__fault$v1(void);
extern void __dtrace_probe$hyperkit$vmx__exit$v1$696e74$756e7369676e656420696e74(int, unsigned int);
extern int __dtrace_isenabled$hyperkit$vmx__exit$v1(void);
extern void __dtrace_probe$hyperkit$vmx__inject__virq$v1$696e74$696e74(int, int);
extern int __dtrace_isenabled$hyperkit$vmx__inject__virq$v1(void);
extern void __dtrace_probe$hyperkit$vmx__read__msr$v1$696e74$756e7369676e656420696e74$756e7369676e6564206c6f6e67(int, unsigned int, unsigned long);
extern int __dtrace_isenabled$hyperkit$vmx__read__msr$v1(void);
extern void __dtrace_probe$hyperkit$vmx__write__msr$v1$696e74$756e7369676e656420696e74$756e7369676e6564206c6f6e67(int, unsigned int, unsigned long);
extern int __dtrace_isenabled$hyperkit$vmx__write__msr$v1(void);

#else

#define	HYPERKIT_BLOCK_DELETE(arg0, arg1) \
do { \
	} while (0)
#define	HYPERKIT_BLOCK_DELETE_ENABLED() (0)
#define	HYPERKIT_BLOCK_DELETE_DONE(arg0, arg1) \
do { \
	} while (0)
#define	HYPERKIT_BLOCK_DELETE_DONE_ENABLED() (0)
#define	HYPERKIT_BLOCK_PREADV(arg0, arg1) \
do { \
	} while (0)
#define	HYPERKIT_BLOCK_PREADV_ENABLED() (0)
#define	HYPERKIT_BLOCK_PREADV_DONE(arg0, arg1) \
do { \
	} while (0)
#define	HYPERKIT_BLOCK_PREADV_DONE_ENABLED() (0)
#define	HYPERKIT_BLOCK_PWRITEV(arg0, arg1) \
do { \
	} while (0)
#define	HYPERKIT_BLOCK_PWRITEV_ENABLED() (0)
#define	HYPERKIT_BLOCK_PWRITEV_DONE(arg0, arg1) \
do { \
	} while (0)
#define	HYPERKIT_BLOCK_PWRITEV_DONE_ENABLED() (0)
#define	HYPERKIT_VMX_EPT_FAULT(arg0, arg1, arg2) \
do { \
	} while (0)
#define	HYPERKIT_VMX_EPT_FAULT_ENABLED() (0)
#define	HYPERKIT_VMX_EXIT(arg0, arg1) \
do { \
	} while (0)
#define	HYPERKIT_VMX_EXIT_ENABLED() (0)
#define	HYPERKIT_VMX_INJECT_VIRQ(arg0, arg1) \
do { \
	} while (0)
#define	HYPERKIT_VMX_INJECT_VIRQ_ENABLED() (0)
#define	HYPERKIT_VMX_READ_MSR(arg0, arg1, arg2) \
do { \
	} while (0)
#define	HYPERKIT_VMX_READ_MSR_ENABLED() (0)
#define	HYPERKIT_VMX_WRITE_MSR(arg0, arg1, arg2) \
do { \
	} while (0)
#define	HYPERKIT_VMX_WRITE_MSR_ENABLED() (0)

#endif /* !defined(DTRACE_PROBES_DISABLED) || !DTRACE_PROBES_DISABLED */


#ifdef	__cplusplus
}
#endif

#endif	/* _DTRACE_H */
