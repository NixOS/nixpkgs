--- a/main.cpp
+++ b/main.cpp
@@ -91,14 +91,5 @@ int main(int argc, char *argv[])
         w.show();
     }
 
-    QTimer::singleShot(0, [=] {
-       cg->getUpdateInfo();
-       QObject::connect(cg, &ClipGrab::updateInfoProcessed, [cg] {
-           bool force = QSettings().value("forceYoutubeDlDownload", false).toBool();
-           if (force) QSettings().setValue("forceYoutubeDlDownload", false);
-           cg->downloadYoutubeDl(force);
-       });
-    });
-
     return app.exec();
 }
--- a/youtube_dl.cpp
+++ b/youtube_dl.cpp
@@ -9,81 +9,17 @@ QString YoutubeDl::path = QString();
 QString YoutubeDl::pythonCaFile = QString();
 
 QString YoutubeDl::find(bool force) {
-    if (!force && !path.isEmpty()) return path;
-
-    // Prefer downloaded youtube-dl
-    QString localPath = QStandardPaths::locate(QStandardPaths::AppDataLocation, "yt-dlp");
-    QProcess* process = instance(localPath, QStringList() << "--version");
-    process->start();
-    process->waitForFinished();
-    process->deleteLater();
-    if (process->state() != QProcess::NotRunning) process->kill();
-    if (process->exitCode() == QProcess::ExitStatus::NormalExit) {
-        path = localPath;
-        return path;
-    }
-
-    // Try system-wide youtube-dlp installation
-    QString globalPath = QStandardPaths::findExecutable("yt-dlp");
-    process = instance(globalPath, QStringList() << "--version");
-    process->start();
-    process->waitForFinished();
-    process->deleteLater();
-    if (process->state() != QProcess::NotRunning) process->kill();
-    if (process->exitCode() == QProcess::ExitStatus::NormalExit) {
-        path = globalPath;
-        return path;
-    }
-
-    return "";
+    // We supply yt-dlp from nixpkgs, so the downloading
+    // machinery is not needed anymore.
+    (void)force;
+    return path;
 }
 
 QProcess* YoutubeDl::instance(QStringList arguments) {
-    return instance(find(), arguments);
-}
-
-QProcess* YoutubeDl::instance(QString path, QStringList arguments) {
     QProcess *process = new QProcess();
 
-    QString execPath = QCoreApplication::applicationDirPath();
-    QProcessEnvironment env = QProcessEnvironment::systemEnvironment();
+    process->setProgram(path);
 
-    #if defined Q_OS_WIN
-        env.insert("PATH", QDir::toNativeSeparators(execPath) + ";" + env.value("PATH"));
-        process->setProgram(execPath + "/python/python.exe");
-    #elif defined Q_OS_MAC
-        QDir pythonDir(execPath + "/../Frameworks/Python.framework/Versions/Current/bin");
-        QString pythonPath = pythonDir.canonicalPath() + "/python3";
-        if (QFile::exists(pythonPath)) {
-            if (pythonCaFile.isEmpty()) {
-                QProcess* caFileProcess = new QProcess();
-                caFileProcess->setProgram(pythonPath);
-                caFileProcess->setProcessEnvironment(env);
-                caFileProcess->setArguments(QStringList() << "-m" << "pip._vendor.certifi");
-                caFileProcess->start();
-                caFileProcess->waitForFinished(10000);
-                pythonCaFile = caFileProcess->readLine().trimmed();
-                QString error = caFileProcess->readAllStandardError();
-                if (!error.isEmpty()) {
-                    qDebug() << "Error finding Python certificates" << error;
-                }
-                qDebug() << "Using SSL_CERT_FILE" << pythonCaFile;
-            }
-        } else {
-            pythonPath = QStandardPaths::findExecutable("python3");
-        }
-
-        if (!pythonCaFile.isEmpty()) {
-            env.insert("SSL_CERT_FILE", pythonCaFile);
-        }
-
-        env.insert("PATH", execPath + ":" + env.value("PATH"));
-        process->setProgram(pythonPath);
-    #else
-        env.insert("PATH", execPath + ":" + env.value("PATH"));
-        process->setProgram(QStandardPaths::findExecutable("python3"));
-    #endif
-    
     QSettings settings;
     QStringList proxyArguments;
     if (settings.value("UseProxy", false).toBool()) {
@@ -110,9 +46,8 @@ QProcess* YoutubeDl::instance(QString path, QStringList arguments) {
         networkArguments << "--force-ipv4";
     }
 
-    process->setArguments(QStringList() << path << arguments << proxyArguments << networkArguments);
+    process->setArguments(QStringList() << arguments << proxyArguments << networkArguments);
     process->setWorkingDirectory(QDir::tempPath());
-    process->setProcessEnvironment(env);
     
     return process;
 }
