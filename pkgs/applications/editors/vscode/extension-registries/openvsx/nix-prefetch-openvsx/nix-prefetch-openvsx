#!/usr/bin/env bash

# Adapt from get_vsixpkg() of the original update_install_exts.sh

set -eu -o pipefail

declare -a NONFLAG_ARGS=()

source nix-prefetch-vsix-lib.sh

unset DOMAIN
function prepare_domain {
    if [[ -z "${DOMAIN-}" ]]; then
        echo "Variable DOMAIN not defined." >&2
        return 1
    fi
}

unset VSIX_PLATFORM
function prepare_vsix_platform {
    if [[ -z "${VSIX_PLATFORM-}" ]]; then
        echo "Variable VSIX_PLATFORM not defined." >&2
        return 1
    fi
}

function prepare_vsix_metadata_url {
    if [[ -z "${VSIX_METADATA_URL-}" ]]; then
        prepare_domain
        prepare_vsix_publisher
        prepare_vsix_name
        prepare_vsix_platform
        prepare_vsix_version_specified
        VSIX_METADATA_URL="$DOMAIN/api/$VSIX_PUBLISHER/$VSIX_NAME/$VSIX_PLATFORM/$VSIX_VERSION_SPECIFIED"
    fi
}

function prepare_vsix_metadata_path_expected {
    if [[ -z "${VSIX_METADATA_PATH_EXPECTED-}" ]]; then
        prepare_exttmp
        prepare_vsix_identifier
        VSIX_METADATA_PATH_EXPECTED="$EXTTMP/${VSIX_IDENTIFIER}_meta.json"
    fi
}

# Extension-specific metadata fetched from the Open VSX API
function prepare_vsix_metadata_path {
    if [[ -z "${VSIX_METADATA_PATH-}" ]]; then
        prepare_vsix_metadata_path_expected
        prepare_vsix_metadata_url
        download_file "$VSIX_METADATA_PATH_EXPECTED" "$VSIX_METADATA_URL"
        VSIX_METADATA_PATH="$VSIX_METADATA_PATH_EXPECTED"
    fi
}

function prepare_vsix_version_fetched {
    prepare_vsix_metadata_path
    if [[ -z "${VSIX_VERSION_FETCHED-}" ]]; then
        refget_from_varname_json VSIX_METADATA_PATH VSIX_VERSION_FETCHED version
        if [[ "${VSIX_VERSION_FETCHED:-null}" == "null" ]]; then
            echo "VSIX_VERSION_FETCHED: invalid value ($VSIX_VERSION_FETCHED)" >&2
            return 1
        fi
    fi
}

function prepare_vsix_url {
    if [[ -z "${VSIX_URL-}" ]]; then
        prepare_vsix_metadata_url
        prepare_vsix_identifier
        prepare_vsix_version
        VSIX_URL="${VSIX_METADATA_URL}/file/${VSIX_IDENTIFIER}-${VSIX_VERSION}.vsix"
    fi
}

function prepare_manifest_url {
    if [[ -z "${VSIX_URL-}" ]]; then
        prepare_vsix_metadata_url
        prepare_vsix_identifier
        prepare_vsix_version
        MANIFEST_URL="${VSIX_METADATA_URL}/file/package.json"
    fi
}

function download_manifest {
    prepare_manifest_path_expected
    prepare_manifest_url
    download_file "$MANIFEST_PATH_EXPECTED" "$MANIFEST_URL"
    MANIFEST_PATH="$MANIFEST_PATH_EXPECTED"
}

unset FORCE_QUERY_HASH
function prepare_force_query_hash {
    if [[ -z "${FORCE_QUERY_HASH}" ]]; then
        FORCE_QUERY_HASH=0
    fi
}

unset FORCE_COMPUTE_HASH
function prepare_force_compute_hash {
    if [[ -z "${FORCE_COMPUTE_HASH}" ]]; then
        FORCE_COMPUTE_HASH=0
    fi
}

unset ADD_TO_STORE
function prepare_add_to_store {
    if [[ -z "${ADD_TO_STORE}" ]]; then
        ADD_TO_STORE=0
    fi
}

function prepare_manifest_path {
    prepare_add_to_store
    prepare_force_compute_hash
    if [[ -z "${MANIFEST_PATH-}" ]]; then
        if ((ADD_TO_STORE)) || ((FORCE_COMPUTE_HASH)); then
            unpack_manifest
        else
            download_manifest
        fi
    fi
}

function query_vsix_hash {
    prepare_vsix_metadata_url
    prepare_exttmp
    prepare_hash_algo
    prepare_hash_format
    local VSIX_HASH_FILE_URL="${VSIX_METADATA_URL}/file/${HASH_ALGO}"
    local VSIX_HASH_FILE_PATH_EXPECTED="${EXTTMP}/${HASH_ALGO}"
    download_file "$VSIX_HASH_FILE_PATH_EXPECTED" "$VSIX_HASH_FILE_URL"
    VSIX_HASH="$(nix --extra-experimental-features nix-command hash "to-${HASH_FORMAT}" --type "${HASH_ALGO}" "$(cat "$VSIX_HASH_FILE_PATH_EXPECTED")")"
    if [[ -z "$VSIX_HASH" ]]; then
        echo "query_vsix_hash: failed" >&2
        return 1
    fi
    rm "$VSIX_HASH_FILE_PATH_EXPECTED"
}

function prepare_vsix_hash {
    if [[ -z "${VSIX_HASH-}" ]]; then
        prepare_force_query_hash
        prepare_force_compute_hash
        if ((FORCE_QUERY_HASH)); then
            query_vsix_hash
        elif ((FORCE_COMPUTE_HASH)); then
            compute_vsix_hash
        else
            # Note: The if keyword and logical operator will deprive those not-the-last commands
            # of the `set -e` property, so we must ensure that query_vsix_hash returns properly
            # without the fail-early warrenty.
            # Use the LBYL strategy instead of the `query_vsix_hash || compute_vsix_hash` EAFP.
            # See https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html
            local _HASH_FILE_URL;
            prepare_hash_algo
            prepare_manifest_path
            _HASH_FILE_URL="$(jq -c -r ".$HASH_ALGO" "$MANIFEST_PATH")"
            if [[ "${_HASH_FILE_URL:-null}" != "null" ]]; then
                query_vsix_hash
            else
                compute_vsix_hash
            fi
        fi
    fi
}

unset NO_PRINT_DOMAIN
function prepare_no_print_domain {
    if [[ -z "${NO_PRINT_DOMAIN-}" ]]; then
        NO_PRINT_DOMAIN=0
    fi
}

unset NO_PRINT_PLATFORM
function prepare_no_print_platform {
    if [[ -z "${NO_PRINT_PLATFORM-}" ]]; then
        NO_PRINT_PLATFORM=0
    fi
}

save_function prepare_dict_key_output prepare_dict_key_output_orig
function prepare_dict_key_output {
    prepare_dict_key_output_orig
    prepare_no_print_domain
    if ! ((NO_PRINT_DOMAIN)); then
        prepare_domain
        DICT_KEY_OUTPUT[domain]=DOMAIN
    fi
    prepare_no_print_platform
    if ! ((NO_PRINT_PLATFORM)); then
        prepare_vsix_platform
        DICT_KEY_OUTPUT[platform]=VSIX_PLATFORM
    fi
}

VSIX_PUBLISHER=""
VSIX_NAME=""
VSIX_VERSION=""
VSIX_VERSION_SPECIFIED=""
VSIX_VERSION_FETCHED=""
COMPACT=0
ADD_TO_STORE=0
NO_HASH=0
NO_META=0
PRINT_CONFIGURATION=0

DOMAIN="https://open-vsx.org"
VSIX_PLATFORM="universal"
NO_PRINT_DOMAIN=0
NO_PRINT_PLATFORM=0
FORCE_QUERY_HASH=0
FORCE_COMPUTE_HASH=0

(("$#")) || fail "Expect PUBLISHER and NAME"

while (("$#")); do
    case "$1" in
    -h | --help)
        # shellcheck disable=SC2028 # False positive, see https://github.com/koalaman/shellcheck/issues/2486
        echo \
            "Usage: nix-prefetch-openvsx [OPTIONS] PUBLISHER NAME VERSION=latest

Fetch the vscode extension from Open VSX Registry
and print the registryRef (previously \"mktplcRef\") attributes in JSON format

Options:
  -a, --add-to-store        Add the downloaded VSIX file to the Nix store.
                            This inherently requires downloading the VSIX file
                            even when hash querying is possible.
  --base16                  Print the hash in base-16 format.
  --base32                  Print the hash in base-32 format.
  --base64                  Print the hash in base-64 format.
  -c, --compact             Use compact JSON output instead of multi-line output.
  --force-query             Force nix-prefetch-openvsx to query the hash
  --force-compute           Force nix-prefetch-openvsx to download the VSIX file
                            and compute the hash.
  -h, --help                Print this help and exit.
  -H, --no-hash             Do not print the nix-hash value of this extension.
                            This prevents downloading the VSIX file when hash-querying
                            is not possible.
  -M, --no-meta             Do not print the meta attributes of this extension.
                            This speed up the program
                            by preventing the manifest downloading / unpacking.
  -p, --platform PLATFORM   Specify the targetPlatform of the extension.
  -P, --no-print-platform   Don't print the targetPlatform of the extension.
      --print-configuration Print the configuration options of the extension.
  --sri                     Print the hash in SRI format.
                            This is the default behavior
  -t, --tmpdir TMPDIR       Specify the directory
                            to create temporary directories in.
                            Default to \`\"\${TMPDIR:-/tmp}\"\` by \`mktemp\`
                            from the environment.
  --type HASH_ALGO          Specify the hash algorithm.
                            Default to sha256
  -u, --domain DOMAIN       Specify the domain of the Open VSX Registry instance.
                            Default to
                            $DOMAIN
  -U, --no-print-domain     Don't print the domain of the Open VSX Registry instance.

If non-flag arguments (PUBLISHER, NAME, VERSION, etc.) happen to start with '-',
they should be escaped with a '\\' prefix or be added after '--'."
        exit 0
        ;;
    -a | --add-to-store)
        ADD_TO_STORE=1
        shift
        ;;
    --base16)
        HASH_FORMAT="base16"
        shift
        ;;
    --base32)
        HASH_FORMAT="base32"
        shift
        ;;
    --base64)
        HASH_FORMAT="base64"
        shift
        ;;
    -c | --compact)
        COMPACT=1
        shift
        ;;
    --force-query)
        FORCE_QUERY_HASH=1
        shift
        ;;
    --force-compute)
        FORCE_COMPUTE_HASH=1
        shift
        ;;
    -H | --no-hash)
        NO_HASH=1
        shift
        ;;
    -M | --no-meta)
        NO_META=1
        shift
        ;;
    -p | --platform)
        (("$#" >= 2)) || fail "Expect $1 PLATFORM"
        VSIX_PLATFORM="$2"
        shift 2
        ;;
    -P | --no-print-platform)
        NO_PRINT_PLATFORM=1
        shift
        ;;
    --print-configuration)
        PRINT_CONFIGURATION=1
        shift
        ;;
    --sri)
        HASH_FORMAT="sri"
        shift
        ;;
    -t | --tmpdir)
        (("$#" >= 2)) || fail "Expect $1 TMPDIR"
        export TMPDIR="$2"
        shift 2
        ;;
    --type)
        (("$#" >= 2)) || fail "Expect $1 HASH_ALGO."
        HASH_ALGO="$2"
        shift 2
        ;;
    -u | --domain)
        (("$#" >= 2)) || fail "Expect $1 DOMAIN"
        DOMAIN="$2"
        shift 2
        ;;
    -U | --no-print-domain)
        NO_PRINT_DOMAIN=1
        shift
        ;;
    -)
        fail "Unexpected argument $1"
        ;;
    --)
        shift
        NONFLAG_ARGS+=("$@")
        set --
        ;;
    --?*)
        fail "Unexpected argument $1"
        ;;
    -?*)
        manage_shorthands
        ;;
    \\-*)
        # If an argument begins with '\-',
        # strip the prefixing backslash
        # and put into NONFLAG_ARGS
        NONFLAG_ARGS+=("${1:1}")
        shift
        ;;
    *)
        NONFLAG_ARGS+=("$1")
        shift
        ;;
    esac
done

if [[ "${#NONFLAG_ARGS[@]}" -lt 2 ]]; then
    fail "Expect PUBLISHER and NAME"
fi
VSIX_PUBLISHER="${NONFLAG_ARGS[0]}"
VSIX_NAME="${NONFLAG_ARGS[1]}"
if [[ "${#NONFLAG_ARGS[@]}" -lt 3 || -z "${NONFLAG_ARGS[2]}" ]]; then
    VSIX_VERSION_SPECIFIED="latest"
else
    VSIX_VERSION_SPECIFIED="${NONFLAG_ARGS[2]}"
fi

if ((FORCE_QUERY_HASH)) && ((FORCE_COMPUTE_HASH)); then
    fail "--force-query and --force-compute must not coexist."
fi

create_exttmp
trap cleanup EXIT

if ((ADD_TO_STORE)); then
    add_vsix_to_store
fi

print_output
