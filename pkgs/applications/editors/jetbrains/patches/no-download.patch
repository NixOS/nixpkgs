diff --git a/build/deps/src/org/jetbrains/intellij/build/impl/BundledMavenDownloader.kt b/build/deps/src/org/jetbrains/intellij/build/impl/BundledMavenDownloader.kt
index 9c7732df006f..c3df110056d6 100644
--- a/build/deps/src/org/jetbrains/intellij/build/impl/BundledMavenDownloader.kt
+++ b/build/deps/src/org/jetbrains/intellij/build/impl/BundledMavenDownloader.kt
@@ -89,7 +89,7 @@ object BundledMavenDownloader {
       }
       val file = root.resolve("${split[1]}-${split[2]}.jar")
       val uri = BuildDependenciesDownloader.getUriForMavenArtifact(
-        mavenRepository = BuildDependenciesConstants.MAVEN_CENTRAL_URL,
+        mavenRepository = "MAVEN_REPO_HERE",
         groupId = split[0],
         artifactId = split[1],
         version = split[2],
@@ -111,7 +111,7 @@ object BundledMavenDownloader {
     val targetToSourceFiles = coroutineScope {
       toDownload.map { (targetFile, uri) ->
         async {
-          targetFile to downloadFileToCacheLocation(uri.toString(), communityRoot)
+          targetFile to Path.of(uri.toString())
         }
       }
     }.asSequence().map { it.getCompleted() }.toMap()
@@ -145,22 +145,7 @@ object BundledMavenDownloader {
   }
 
   suspend fun downloadMavenDistribution(communityRoot: BuildDependenciesCommunityRoot): Path {
-    val extractDir = communityRoot.communityRoot.resolve("plugins/maven/maven36-server-impl/lib/maven3")
-    val properties = BuildDependenciesDownloader.getDependencyProperties(communityRoot)
-    val bundledMavenVersion = properties.property("bundledMavenVersion")
-    mutex.withLock {
-      val uri = BuildDependenciesDownloader.getUriForMavenArtifact(
-        mavenRepository = BuildDependenciesConstants.MAVEN_CENTRAL_URL,
-        groupId = "org.apache.maven",
-        artifactId = "apache-maven",
-        version = bundledMavenVersion,
-        classifier = "bin",
-        packaging = "zip"
-      )
-      val zipPath = downloadFileToCacheLocation(uri.toString(), communityRoot)
-      BuildDependenciesDownloader.extractFile(zipPath, extractDir, communityRoot, BuildDependenciesExtractOptions.STRIP_ROOT)
-    }
-    return extractDir
+    return Path.of("MAVEN_PATH_HERE")
   }
 
   suspend fun downloadMavenTelemetryDependencies(communityRoot: BuildDependenciesCommunityRoot): Path =
diff --git a/platform/build-scripts/downloader/src/org/jetbrains/intellij/build/dependencies/BuildDependenciesDownloader.kt b/platform/build-scripts/downloader/src/org/jetbrains/intellij/build/dependencies/BuildDependenciesDownloader.kt
index a09749c47365..95be3245aa95 100644
--- a/platform/build-scripts/downloader/src/org/jetbrains/intellij/build/dependencies/BuildDependenciesDownloader.kt
+++ b/platform/build-scripts/downloader/src/org/jetbrains/intellij/build/dependencies/BuildDependenciesDownloader.kt
@@ -77,7 +77,7 @@ object BuildDependenciesDownloader {
                              version: String,
                              classifier: String?,
                              packaging: String): URI {
-    val base = mavenRepository.trim('/')
+    val base = mavenRepository.trimEnd('/')
     val groupStr = groupId.replace('.', '/')
     val classifierStr = if (classifier != null) "-${classifier}" else ""
     return URI.create("${base}/${groupStr}/${artifactId}/${version}/${artifactId}-${version}${classifierStr}.${packaging}")
diff --git a/platform/build-scripts/downloader/src/org/jetbrains/intellij/build/dependencies/JdkDownloader.kt b/platform/build-scripts/downloader/src/org/jetbrains/intellij/build/dependencies/JdkDownloader.kt
index 40163e067665..bf146619d594 100644
--- a/platform/build-scripts/downloader/src/org/jetbrains/intellij/build/dependencies/JdkDownloader.kt
+++ b/platform/build-scripts/downloader/src/org/jetbrains/intellij/build/dependencies/JdkDownloader.kt
@@ -33,13 +33,16 @@ object JdkDownloader {
   }
 
   suspend fun getJdkHome(communityRoot: BuildDependenciesCommunityRoot, os: OS, arch: Arch, infoLog: (String) -> Unit): Path {
-    val jdkUrl = getUrl(communityRoot = communityRoot, os = os, arch = arch)
-    val jdkArchive = downloadFileToCacheLocation(url = jdkUrl.toString(), communityRoot = communityRoot)
-    val jdkExtracted = BuildDependenciesDownloader.extractFileToCacheLocation(communityRoot = communityRoot,
-                                                                              archiveFile = jdkArchive,
-                                                                              BuildDependenciesExtractOptions.STRIP_ROOT)
-    val jdkHome = if (os == OS.MACOSX) jdkExtracted.resolve("Contents").resolve("Home") else jdkExtracted
-    infoLog("JPS-bootstrap JDK (jdkHome=$jdkHome, executable=${getJavaExecutable(jdkHome)})")
+    val jdkExtracted = Path.of("JDK_PATH_HERE")
+
+    val jdkHome: Path = if (os == OS.MACOSX) {
+      jdkExtracted.resolve("Contents").resolve("Home")
+    }
+    else {
+      jdkExtracted
+    }
+    val executable = getJavaExecutable(jdkHome)
+    infoLog("JDK home is at $jdkHome, executable at $executable")
     return jdkHome
   }
 
diff --git a/platform/build-scripts/src/org/jetbrains/intellij/build/LinuxDistributionCustomizer.kt b/platform/build-scripts/src/org/jetbrains/intellij/build/LinuxDistributionCustomizer.kt
index 67966c074cff..a61d9c794703 100644
--- a/platform/build-scripts/src/org/jetbrains/intellij/build/LinuxDistributionCustomizer.kt
+++ b/platform/build-scripts/src/org/jetbrains/intellij/build/LinuxDistributionCustomizer.kt
@@ -46,7 +46,7 @@ abstract class LinuxDistributionCustomizer {
   /**
    * If `true`, a separate *[org.jetbrains.intellij.build.impl.LinuxDistributionBuilder.NO_RUNTIME_SUFFIX].tar.gz artifact without a runtime will be produced.
    */
-  var buildArtifactWithoutRuntime = false
+  var buildArtifactWithoutRuntime = true
 
   /**
    * Set both properties if a .snap package should be produced.
diff --git a/platform/build-scripts/src/org/jetbrains/intellij/build/impl/LinuxDistributionBuilder.kt b/platform/build-scripts/src/org/jetbrains/intellij/build/impl/LinuxDistributionBuilder.kt
index b3d07a389b47..0583bf3051bd 100644
--- a/platform/build-scripts/src/org/jetbrains/intellij/build/impl/LinuxDistributionBuilder.kt
+++ b/platform/build-scripts/src/org/jetbrains/intellij/build/impl/LinuxDistributionBuilder.kt
@@ -48,7 +48,7 @@ class LinuxDistributionBuilder(override val context: BuildContext,
       withContext(Dispatchers.IO) {
         val distBinDir = targetPath.resolve("bin")
         val sourceBinDir = context.paths.communityHomeDir.resolve("bin/linux")
-        copyFileToDir(NativeBinaryDownloader.downloadRestarter(context = context, os = OsFamily.LINUX, arch = arch), distBinDir)
+        copyFileToDir(sourceBinDir.resolve("${arch.dirName}/restarter"), distBinDir)
         copyFileToDir(sourceBinDir.resolve("${arch.dirName}/fsnotifier"), distBinDir)
         copyFileToDir(sourceBinDir.resolve("${arch.dirName}/libdbm.so"), distBinDir)
         generateBuildTxt(context, targetPath)
@@ -93,6 +93,8 @@ class LinuxDistributionBuilder(override val context: BuildContext,
         }
       }
 
+      return@executeStep
+
       val runtimeDir = context.bundledRuntime.extract(os = OsFamily.LINUX, arch = arch)
       updateExecutablePermissions(runtimeDir, executableFileMatchers)
       val tarGzPath = buildTarGz(arch = arch, runtimeDir = runtimeDir, unixDistPath = osAndArchSpecificDistPath, suffix = suffix(arch))
diff --git a/platform/build-scripts/src/org/jetbrains/intellij/build/impl/brokenPlugins.kt b/platform/build-scripts/src/org/jetbrains/intellij/build/impl/brokenPlugins.kt
index db409dcb7732..69cab5f6686a 100644
--- a/platform/build-scripts/src/org/jetbrains/intellij/build/impl/brokenPlugins.kt
+++ b/platform/build-scripts/src/org/jetbrains/intellij/build/impl/brokenPlugins.kt
@@ -8,7 +8,9 @@ import kotlinx.serialization.json.Json
 import org.jetbrains.intellij.build.downloadAsText
 import java.io.ByteArrayOutputStream
 import java.io.DataOutputStream
+import java.nio.file.Path
 import java.util.*
+import kotlin.io.path.readText
 
 private const val MARKETPLACE_BROKEN_PLUGINS_URL = "https://plugins.jetbrains.com/files/brokenPlugins.json"
 
@@ -19,7 +21,7 @@ suspend fun buildBrokenPlugins(currentBuildString: String, isInDevelopmentMode:
   val span = Span.current()
 
   val allBrokenPlugins = try {
-    val content = downloadAsText(MARKETPLACE_BROKEN_PLUGINS_URL)
+    val content = Path.of("BROKEN_PLUGINS_HERE").readText()
     @Suppress("JSON_FORMAT_REDUNDANT")
     Json { ignoreUnknownKeys = true }.decodeFromString(ListSerializer(MarketplaceBrokenPlugin.serializer()), content)
   }
@@ -200,4 +202,4 @@ private class BuildNumber(private val productCode: String, private val component
   }
 
   override fun hashCode() = 31 * productCode.hashCode() + components.contentHashCode()
-}
\ No newline at end of file
+}
diff --git a/platform/build-scripts/src/org/jetbrains/intellij/build/kotlin/KotlinCompilerDependencyDownloader.kt b/platform/build-scripts/src/org/jetbrains/intellij/build/kotlin/KotlinCompilerDependencyDownloader.kt
index 4b8cbcf07a80..942785793946 100644
--- a/platform/build-scripts/src/org/jetbrains/intellij/build/kotlin/KotlinCompilerDependencyDownloader.kt
+++ b/platform/build-scripts/src/org/jetbrains/intellij/build/kotlin/KotlinCompilerDependencyDownloader.kt
@@ -23,31 +23,11 @@ private const val ARTIFACT_GROUP_ID = "org.jetbrains.kotlin"
 
 object KotlinCompilerDependencyDownloader {
   fun downloadAndExtractKotlinCompiler(communityRoot: BuildDependenciesCommunityRoot): Path {
-    val kotlinJpsPluginVersion = getKotlinJpsPluginVersion(communityRoot)
-    val kotlinDistUrl = getUriForMavenArtifact(MAVEN_REPOSITORY_URL, ARTIFACT_GROUP_ID, "kotlin-dist-for-ide", kotlinJpsPluginVersion, "jar")
-    val kotlinDistJar = downloadFileToCacheLocation(communityRoot, kotlinDistUrl)
-    return extractFileToCacheLocation(communityRoot, kotlinDistJar)
+    return Path.of("KOTLIN_PATH_HERE")
   }
 
   suspend fun downloadKotlinJpsPlugin(communityRoot: BuildDependenciesCommunityRoot): Path = withContext(Dispatchers.IO) {
-    val kotlinJpsPluginVersion = getKotlinJpsPluginVersion(communityRoot)
-    val kotlinJpsPluginUrl = getUriForMavenArtifact(MAVEN_REPOSITORY_URL, ARTIFACT_GROUP_ID, "kotlin-jps-plugin-classpath", kotlinJpsPluginVersion, "jar")
-
-    val cacheLocation = getTargetFile(communityRoot, kotlinJpsPluginUrl.toString())
-    if (cacheLocation.exists()) {
-      return@withContext cacheLocation
-    }
-
-    // Download file by hand since calling entire ktor/cio/coroutines stuff *before* loading JPS plugin into classpath
-    // leads to funny kotlin-reflect failures later in Kotlin JPS plugin
-    // Ideal solution would be to move compilation to other process altogether and do not modify current process classpath
-    println(" * Downloading $kotlinJpsPluginUrl")
-    val tmpLocation = Files.createTempFile(cacheLocation.parent, cacheLocation.name, ".tmp")
-    suspendingRetryWithExponentialBackOff {
-      FileUtils.copyURLToFile(kotlinJpsPluginUrl.toURL(), tmpLocation.toFile())
-    }
-    Files.move(tmpLocation, cacheLocation, StandardCopyOption.ATOMIC_MOVE)
-    return@withContext cacheLocation
+    return@withContext Path.of("JPS_PLUGIN_CLASSPATH_HERE")
   }
 
   fun getKotlinJpsPluginVersion(communityRoot: BuildDependenciesCommunityRoot): String {
