#!/usr/bin/env nix-shell
#!nix-shell update-shell.nix -i python3


# format:
# $ nix run nixpkgs.python3Packages.black -c black update.py
# type-check:
# $ nix run nixpkgs.python3Packages.mypy -c mypy update.py
# linted:
# $ nix run nixpkgs.python3Packages.flake8 -c flake8 --ignore E501,E265,E402 update.py

# If you see `HTTP Error 429: too many requests` errors while running this script,
# refer to:
#
# https://github.com/NixOS/nixpkgs/blob/master/doc/languages-frameworks/vim.section.md#updating-plugins-in-nixpkgs-updating-plugins-in-nixpkgs
#
# (or the equivalent file /doc/languages-frameworks/vim.section.md from Nixpkgs master tree).
#

import inspect
import os
import sys
import logging
import textwrap
import glob
import subprocess
from typing import List, Tuple
from pathlib import Path

log = logging.getLogger()

sh = logging.StreamHandler()
formatter = logging.Formatter('%(name)s:%(levelname)s: %(message)s')
sh.setFormatter(formatter)
log.addHandler(sh)

# Import plugin update library from maintainers/scripts/pluginupdate.py
ROOT = Path(os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe()))))
# Ideally, ROOT.(parent^5) points to root of Nixpkgs official tree
sys.path.insert(0, os.path.join(ROOT.parent.parent.parent.parent.parent, "maintainers", "scripts"))
import pluginupdate

GET_PLUGINS = f"""(with import <localpkgs> {{}};
let
  inherit (vimUtils.override {{inherit vim;}}) buildVimPluginFrom2Nix;
  generated = callPackage {ROOT}/generated.nix {{
    inherit buildVimPluginFrom2Nix;
  }};
  hasChecksum = value: lib.isAttrs value && lib.hasAttrByPath ["src" "outputHash"] value;
  getChecksum = name: value:
    if hasChecksum value then {{
      submodules = value.src.fetchSubmodules or false;
      sha256 = value.src.outputHash;
      rev = value.src.rev;
    }} else null;
  checksums = lib.mapAttrs getChecksum generated;
in lib.filterAttrs (n: v: v != null) checksums)"""

HEADER = (
    "# This file has been generated by ./pkgs/applications/editors/vim/plugins/update.py. Do not edit!"
)

def get_dependencies(plugin, rockspec):
    '''loads dependencies from luarocks'''
    # call luarocks
    cmd = [ "luarocks", "nix", plugin.name ]
    print ("ran cmd:", cmd)
    print ("plugin:", plugin)
    out = subprocess.check_output(cmd).decode()
    print (out)
    content = '''
        {plugin.normalized_name} = let
        '''
    content += f"luaDrv = {out}"
    content += '''
        in buildVimPluginFrom2Nix {{
            pname = "{plugin.name}";
            version = "{luaDrv.version}";
            src = {src_nix};
            inherit (luaDrv) meta buildInputs;
        }};

    '''
    return content

def look_for_rockspec(store_path: str) -> Tuple[bool, str]:
    # TODO check for a rockspec
    print("Checking for rockspec")
    for result in glob.glob(store_path + "/*.rockspec"):
        log.info("TOTO")
        print("Found a rockspec ! ")
        print(result)
        return True, result
        # TODO call luarocks-nix on it
    return False, ""


class VimEditor(pluginupdate.Editor):
    def generate_nix(self, plugins: List[Tuple[pluginupdate.PluginDesc, pluginupdate.Plugin]], outfile: str):
        sorted_plugins = sorted(plugins, key=lambda v: v[0].name.lower())

        with open(outfile, "w+") as f:
            f.write(HEADER)
            f.write(textwrap.dedent("""
                { lib, buildVimPluginFrom2Nix, fetchFromGitHub, fetchgit }:

                final: prev:
                {"""
            ))
            for pdesc, plugin in sorted_plugins:
                content = self.plugin2nix(pdesc, plugin)
                f.write(content)
            f.write("\n}\n")
        print(f"updated {outfile}")

    def plugin2nix(self, pdesc: pluginupdate.PluginDesc, plugin: pluginupdate.Plugin) -> str:

        repo = pdesc.repo
        has_rockspec, rockspec_path = look_for_rockspec(plugin.store_path)

        content = ""
        src_nix = repo.as_nix(plugin)
        if has_rockspec:
            content = get_dependencies(plugin, rockspec_path)
        else:
            # TODO the meta page could also be fetched from a rockspec
            content = """
{plugin.normalized_name} = buildVimPluginFrom2Nix {{
pname = "{plugin.name}";
version = "{plugin.version}";
src = {src_nix};
meta.homepage = "{repo.uri}";
}};
"""
        return content.format(plugin=plugin, src_nix = src_nix, repo=repo)

def main():
    editor = VimEditor("vim", ROOT, GET_PLUGINS)
    parser = editor.create_parser()
    args = parser.parse_args()
    pluginupdate.update_plugins(editor, args)


if __name__ == "__main__":
    main()
