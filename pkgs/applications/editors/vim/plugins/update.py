#!/usr/bin/env nix-shell
#!nix-shell update-shell.nix -i python3


# format:
# $ nix shell nixpkgs#python3Packages.black --command black update.py
# type-check:
# $ nix shell nixpkgs#python3Packages.mypy --command mypy update.py
# linted:
# $ nix shell nixpkgs#python3Packages.flake8 --command flake8 --ignore E501,E265,E402 update.py

# If you see `HTTP Error 429: too many requests` errors while running this script,
# refer to:
#
# https://github.com/NixOS/nixpkgs/blob/master/doc/languages-frameworks/vim.section.md#updating-plugins-in-nixpkgs-updating-plugins-in-nixpkgs
#
# (or the equivalent file /doc/languages-frameworks/vim.section.md from Nixpkgs master tree).
#

import inspect
import os
import sys
import logging
import re
import subprocess
import textwrap
from collections import deque
from typing import Deque, List, Tuple
from pathlib import Path

log = logging.getLogger()

sh = logging.StreamHandler()
formatter = logging.Formatter("%(name)s:%(levelname)s: %(message)s")
sh.setFormatter(formatter)
log.addHandler(sh)

# Import plugin update library from maintainers/scripts/pluginupdate.py
ROOT = Path(os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe()))))
# Ideally, ROOT.(parent^5) points to root of Nixpkgs official tree
sys.path.insert(
    0, os.path.join(ROOT.parent.parent.parent.parent.parent, "maintainers", "scripts")
)
import pluginupdate
from pluginupdate import run_nix_expr, PluginDesc

GET_PLUGINS = f"""(with import <localpkgs> {{}};
let
  inherit (vimUtils.override {{inherit vim;}}) buildNeovimPluginFrom2Nix buildVimPluginFrom2Nix;
  generated = callPackage {ROOT}/generated.nix {{
    inherit buildNeovimPluginFrom2Nix buildVimPluginFrom2Nix;
  }};
  hasChecksum = value: lib.isAttrs value && lib.hasAttrByPath ["src" "outputHash"] value;
  getChecksum = name: value:
    if hasChecksum value then {{
      submodules = value.src.fetchSubmodules or false;
      sha256 = value.src.outputHash;
      rev = value.src.rev;
    }} else null;
  checksums = lib.mapAttrs getChecksum generated;
in lib.filterAttrs (n: v: v != null) checksums)"""

GET_PLUGINS_LUA = """
with import <localpkgs> {};
lib.attrNames lua51Packages"""

HEADER = "# This file has been generated by ./pkgs/applications/editors/vim/plugins/update.py. Do not edit!"


def isNeovimPlugin(plug: pluginupdate.Plugin) -> bool:
    """
    Whether it's a neovim-only plugin
    We can check if it's available in lua packages
    """
    global luaPlugins
    if plug.normalized_name in luaPlugins:
        log.debug("%s is a neovim plugin", plug)
        return True
    return False


class VimEditor(pluginupdate.Editor):
    def generate_nix(
        self, plugins: List[Tuple[PluginDesc, pluginupdate.Plugin]], outfile: str
    ):
        sorted_plugins = sorted(plugins, key=lambda v: v[0].name.lower())

        with open(outfile, "w+", encoding="utf-8") as f:
            f.write(HEADER)
            f.write(
                textwrap.dedent(
                    """
                { lib, buildVimPluginFrom2Nix, buildNeovimPluginFrom2Nix, fetchFromGitHub, fetchgit }:

                final: prev:
                {
                """
                )
            )
            for pdesc, plugin in sorted_plugins:
                content = self.plugin2nix(pdesc, plugin)
                f.write(content)
            f.write("\n}\n")
        print(f"updated {outfile}")

    def plugin2nix(self, pdesc: PluginDesc, plugin: pluginupdate.Plugin) -> str:

        repo = pdesc.repo
        isNeovim = isNeovimPlugin(plugin)

        content = f"  {plugin.normalized_name} = "
        src_nix = repo.as_nix(plugin)
        content += """{buildFn} {{
    pname = "{plugin.name}";
    version = "{plugin.version}";
    src = {src_nix};
    meta.homepage = "{repo.uri}";
  }};

""".format(
            buildFn="buildNeovimPluginFrom2Nix"
            if isNeovim
            else "buildVimPluginFrom2Nix",
            plugin=plugin,
            src_nix=src_nix,
            repo=repo,
        )
        print(content)
        return content


def get_rust_dep_plugins() -> List[str]:
    """Get list of plugins that have Rust dependencies."""
    overrides = (Path(__file__).parent / "overrides.nix").read_text().splitlines()
    stack: Deque[str] = deque()
    first_plugins_line = next(
        line_num
        for line_num, line in enumerate(overrides, 1)
        if line == "self: super: {"
    )
    last_plugins_line = 0

    for line_num, line in enumerate(
        overrides[first_plugins_line - 1 :], first_plugins_line
    ):
        for char in line:
            if char == "{":
                stack.append(char)
            elif char == "}":
                stack.pop()

        if len(stack) == 0:
            last_plugins_line = line_num
            break

    plugins = overrides[first_plugins_line:last_plugins_line]

    plugin_def_lines = {
        line for line in plugins if re.search(r"^\s\s[a-zA-Z0-9-_]*\s=", line)
    }

    rust_plugins: List[str] = []

    for line_num, line in enumerate(plugins):
        if line in plugin_def_lines:
            plugin_name = line.split(" =")[0].strip()
            for interior_line in plugins[line_num + 1 :]:
                if "cargoSha256 =" in interior_line:
                    rust_plugins.append(plugin_name)

                if interior_line in plugin_def_lines:
                    break

    return rust_plugins


def check_rust_plugins() -> None:
    """Check that plugins with Rust deps still build after updates."""
    failed_builds = []

    for plugin in get_rust_dep_plugins():
        nix_attr = f"vimPlugins.{plugin}"

        try:
            subprocess.run(
                ["nix-build", "-A", nix_attr],
                check=True,
                cwd=Path(__file__).parent / "../../../../../",
            )
        except subprocess.CalledProcessError:
            failed_builds.append(nix_attr)

    if failed_builds:
        sys.exit(
            "ERROR: Failed to build the following plugins with Rust dependencies: "
            f"{', '.join(failed_builds)}\nUpdates to the 'cargoSha256' in 'overrides.nix'"
            " may be needed"
        )


def main():

    global luaPlugins
    luaPlugins = run_nix_expr(GET_PLUGINS_LUA)

    editor = VimEditor("vim", ROOT, GET_PLUGINS)
    parser = editor.create_parser()
    args = parser.parse_args()
    pluginupdate.update_plugins(editor, args)
    check_rust_plugins()


if __name__ == "__main__":
    main()
