diff --git a/kcms/libkwindevices/inputdevice.cpp b/kcms/libkwindevices/inputdevice.cpp
index 9a437137077390a61152be96ac69b4f5e992d062..aea0952143a29a4b2bf06777f737a84cbd6e5b6d 100644
--- a/kcms/libkwindevices/inputdevice.cpp
+++ b/kcms/libkwindevices/inputdevice.cpp
@@ -10,44 +10,6 @@
 
 #include "logging.h"
 
-template<typename T>
-bool InputDevice::Prop<T>::save()
-{
-    if (!isSupported() || !m_value || m_prop.isConstant()) {
-        qCDebug(LIBKWINDEVICES) << "skipping" << this << m_value.has_value() << isSupported() << m_prop.name();
-        return false;
-    }
-
-    auto iface = m_device->m_iface.get();
-    const bool ret = m_prop.write(iface, *m_value);
-    if (ret) {
-        m_configValue = *m_value;
-    }
-    return ret;
-}
-
-template<typename T>
-void InputDevice::Prop<T>::set(T newVal)
-{
-    if (!m_value) {
-        value();
-    }
-
-    Q_ASSERT(isSupported());
-    if (m_value != newVal) {
-        m_value = newVal;
-        if (m_changedSignalFunction) {
-            (m_device->*m_changedSignalFunction)();
-        }
-    }
-}
-
-template<typename T>
-bool InputDevice::Prop<T>::changed() const
-{
-    return m_value.has_value() && m_value.value() != m_configValue;
-}
-
 InputDevice::InputDevice(const QString &dbusName, QObject *parent)
     : QObject(parent)
 {
diff --git a/kcms/libkwindevices/inputdevice.h b/kcms/libkwindevices/inputdevice.h
index 93f9753cfae3c8795c5493566f7e51c806710983..f5589b095f39aa76071f67b8ee544a71585a479a 100644
--- a/kcms/libkwindevices/inputdevice.h
+++ b/kcms/libkwindevices/inputdevice.h
@@ -269,12 +269,29 @@ private:
             }
         }
 
-        void set(T newVal);
+        void set(T newVal) {
+            if (!m_value) {
+                value();
+            }
+        
+            Q_ASSERT(isSupported());
+            if (m_value != newVal) {
+                m_value = newVal;
+                if (m_changedSignalFunction) {
+                    (m_device->*m_changedSignalFunction)();
+                }
+            }
+        }
+
         T defaultValue() const
         {
             return m_defaultValueFunction ? (m_device->m_iface.get()->*m_defaultValueFunction)() : T();
         }
-        bool changed() const;
+        
+        bool changed() const {
+            return m_value.has_value() && m_value.value() != m_configValue;
+        }
+
         void set(const Prop<T> &p)
         {
             set(p.value());
@@ -286,7 +303,20 @@ private:
             return !m_supportedFunction || (iface->*m_supportedFunction)();
         }
 
-        bool save();
+        bool save() {
+            if (!isSupported() || !m_value || m_prop.isConstant()) {
+                qDebug() << "skipping" << this << m_value.has_value() << isSupported() << m_prop.name();
+                return false;
+            }
+        
+            auto iface = m_device->m_iface.get();
+            const bool ret = m_prop.write(iface, *m_value);
+            if (ret) {
+                m_configValue = *m_value;
+            }
+            return ret;
+        }
+
         bool isDefaults() const
         {
             return m_value == defaultValue();
