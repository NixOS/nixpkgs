#!/usr/bin/env nix-shell
#!nix-shell -i python3 -p python3 patchelf

from pathlib import Path
import subprocess
import sys

dist_path = Path(sys.argv[1])

# Use directories in include/ as a proxy for the list of SerenityOS libraries
library_names = [x.name for x in dist_path.glob("include/Lib*")]
# Special cases that don't have folders in include directory
library_names += ["LibC", "LibSystem"]
library_names.sort()

libs = list(dist_path.glob("lib/*"))

# Map library name to build artifact (ex. LibABC -> libabc.so)
name_to_path = {}
path_stem_to_name = {}
for name in library_names:
    found = False
    for l in libs:
        if name.lower() == l.stem.lower():
            name_to_path[name] = l
            path_stem_to_name[l.stem] = name
            found = True
            break
    if not found:
        print(f"ERROR: library for {name} not found")
        exit(1)

# Get dependencies for each library
name_to_deps = {}
for name in library_names:
    lib = name_to_path[name]
    deps = []
    if lib.suffixes[0] == ".so":
        dependencies = subprocess.run(
            ["patchelf", lib.absolute(), "--print-needed"],
            capture_output=True,
            check=True,
            encoding="utf8",
        )
        for d in dependencies.stdout.strip().splitlines():
            dep_stem = d.split(".", maxsplit=1)[0]
            deps.append(path_stem_to_name[dep_stem])
    deps.sort()
    name_to_deps[name] = deps

# Output
name_length = len(max(library_names, key=len))
print("# This file is generated by gen-libraries.py.")
print("# Do not edit!")
print("{ libraries }: with libraries;")
print("{")
for name in library_names:
    deps = name_to_deps[name]
    if len(deps) > 0:
        deps_str = f'{{ inherit {" ".join(deps)}; }};'
    else:
        deps_str = "{};"
    print(f"  {name.ljust(name_length)} = {deps_str}")
print("}")
