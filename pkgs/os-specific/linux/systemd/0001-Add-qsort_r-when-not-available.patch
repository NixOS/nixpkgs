From fb68759696fdeef04062dbde9f639f578158e9d8 Mon Sep 17 00:00:00 2001
From: Travis Athougies <iammisc@gmail.com>
Date: Mon, 22 Oct 2018 18:13:32 -0700
Subject: [PATCH 01/13] Add qsort_r when not available

---
 meson.build      |   2 +-
 src/basic/util.c | 228 +++++++++++++++++++++++++++++++++++++++++++++++++++++++
 src/basic/util.h |   4 +
 3 files changed, 233 insertions(+), 1 deletion(-)

diff --git a/meson.build b/meson.build
index 885498148..a7e08067e 100644
--- a/meson.build
+++ b/meson.build
@@ -473,7 +473,7 @@ foreach decl : [['IFLA_INET6_ADDR_GEN_MODE',         'linux/if_link.h'],
         conf.set10('HAVE_' + decl[0], have)
 endforeach
 
-foreach ident : ['secure_getenv', '__secure_getenv']
+foreach ident : ['secure_getenv', '__secure_getenv', 'qsort_r']
         conf.set10('HAVE_' + ident.to_upper(), cc.has_function(ident))
 endforeach
 
diff --git a/src/basic/util.c b/src/basic/util.c
index 8f2d6061d..2c55efe3c 100644
--- a/src/basic/util.c
+++ b/src/basic/util.c
@@ -621,3 +621,231 @@ void disable_coredumps(void) {
         if (r < 0)
                 log_debug_errno(r, "Failed to turn off coredumps, ignoring: %m");
 }
+
+#if ! HAVE_QSORT_R
+/* Copyright (C) 2011 by Valentin Ochs
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to
+ * deal in the Software without restriction, including without limitation the
+ * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
+ * sell copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
+ * IN THE SOFTWARE.
+ */
+
+/* Minor changes by Rich Felker for integration in musl, 2011-04-27. */
+
+/* Smoothsort, an adaptive variant of Heapsort.  Memory usage: O(1).
+   Run time: Worst case O(n log n), close to O(n) in the mostly-sorted case. */
+
+#include <stdint.h>
+#include <stdlib.h>
+#include <string.h>
+
+typedef int (*cmpfun)(const void *, const void *, void *);
+
+static inline int a_ctz_l(unsigned long x)
+{
+	static const char debruijn32[32] = {
+		0, 1, 23, 2, 29, 24, 19, 3, 30, 27, 25, 11, 20, 8, 4, 13,
+		31, 22, 28, 18, 26, 10, 7, 12, 21, 17, 9, 6, 16, 5, 15, 14
+	};
+	return debruijn32[(x&-x)*0x076be629 >> 27];
+}
+
+static inline int pntz(size_t p[2]) {
+        int r = a_ctz_l(p[0] - 1);
+        if(r != 0 || (r = 8*sizeof(size_t) + a_ctz_l(p[1])) != 8*sizeof(size_t)) {
+                return r;
+        }
+        return 0;
+}
+
+static void cycle(size_t width, unsigned char* ar[], int n)
+{
+        unsigned char tmp[256];
+        size_t l;
+        int i;
+
+        if(n < 2) {
+                return;
+        }
+
+        ar[n] = tmp;
+        while(width) {
+                l = sizeof(tmp) < width ? sizeof(tmp) : width;
+                memcpy(ar[n], ar[0], l);
+                for(i = 0; i < n; i++) {
+                        memcpy(ar[i], ar[i + 1], l);
+                        ar[i] += l;
+                }
+                width -= l;
+        }
+}
+
+/* shl() and shr() need n > 0 */
+static inline void shl(size_t p[2], int n)
+{
+        if(n >= 8 * sizeof(size_t)) {
+                n -= 8 * sizeof(size_t);
+                p[1] = p[0];
+                p[0] = 0;
+        }
+        p[1] <<= n;
+        p[1] |= p[0] >> (sizeof(size_t) * 8 - n);
+        p[0] <<= n;
+}
+
+static inline void shr(size_t p[2], int n)
+{
+        if(n >= 8 * sizeof(size_t)) {
+                n -= 8 * sizeof(size_t);
+                p[0] = p[1];
+                p[1] = 0;
+        }
+        p[0] >>= n;
+        p[0] |= p[1] << (sizeof(size_t) * 8 - n);
+        p[1] >>= n;
+}
+
+static void sift(unsigned char *head, size_t width, cmpfun cmp, int pshift, size_t lp[], void *user_data)
+{
+        unsigned char *rt, *lf;
+        unsigned char *ar[14 * sizeof(size_t) + 1];
+        int i = 1;
+
+        ar[0] = head;
+        while(pshift > 1) {
+                rt = head - width;
+                lf = head - width - lp[pshift - 2];
+
+                if((*cmp)(ar[0], lf, user_data) >= 0 &&
+                   (*cmp)(ar[0], rt, user_data) >= 0) {
+                        break;
+                }
+                if((*cmp)(lf, rt, user_data) >= 0) {
+                        ar[i++] = lf;
+                        head = lf;
+                        pshift -= 1;
+                } else {
+                        ar[i++] = rt;
+                        head = rt;
+                        pshift -= 2;
+                }
+        }
+        cycle(width, ar, i);
+}
+
+static void trinkle(unsigned char *head, size_t width, cmpfun cmp, size_t pp[2], int pshift, int trusty, size_t lp[], void *user_data)
+{
+        unsigned char *stepson,
+                      *rt, *lf;
+        size_t p[2];
+        unsigned char *ar[14 * sizeof(size_t) + 1];
+        int i = 1;
+        int trail;
+
+        p[0] = pp[0];
+        p[1] = pp[1];
+
+        ar[0] = head;
+        while(p[0] != 1 || p[1] != 0) {
+                stepson = head - lp[pshift];
+                if((*cmp)(stepson, ar[0], user_data) <= 0) {
+                        break;
+                }
+                if(!trusty && pshift > 1) {
+                        rt = head - width;
+                        lf = head - width - lp[pshift - 2];
+                        if((*cmp)(rt, stepson, user_data) >= 0 || (*cmp)(lf, stepson, user_data) >= 0) {
+                                break;
+                        }
+                }
+
+                ar[i++] = stepson;
+                head = stepson;
+                trail = pntz(p);
+                shr(p, trail);
+                pshift += trail;
+                trusty = 0;
+        }
+        if(!trusty) {
+                cycle(width, ar, i);
+                sift(head, width, cmp, pshift, lp, user_data);
+        }
+}
+
+void qsort_r(void *base, size_t nel, size_t width, cmpfun cmp, void *user_data)
+{
+        size_t lp[12*sizeof(size_t)];
+        size_t i, size = width * nel;
+        unsigned char *head, *high;
+        size_t p[2] = {1, 0};
+        int pshift = 1;
+        int trail;
+
+        if (!size) return;
+
+        head = base;
+        high = head + size - width;
+
+        /* Precompute Leonardo numbers, scaled by element width */
+        for(lp[0]=lp[1]=width, i=2; (lp[i]=lp[i-2]+lp[i-1]+width) < size; i++);
+
+        while(head < high) {
+                if((p[0] & 3) == 3) {
+                        sift(head, width, cmp, pshift, lp, user_data);
+                        shr(p, 2);
+                        pshift += 2;
+                } else {
+                        if(lp[pshift - 1] >= high - head) {
+                                trinkle(head, width, cmp, p, pshift, 0, lp, user_data);
+                        } else {
+                                sift(head, width, cmp, pshift, lp, user_data);
+                        }
+
+                        if(pshift == 1) {
+                                shl(p, 1);
+                                pshift = 0;
+                        } else {
+                                shl(p, pshift - 1);
+                                pshift = 1;
+                        }
+                }
+
+                p[0] |= 1;
+                head += width;
+        }
+
+        trinkle(head, width, cmp, p, pshift, 0, lp, user_data);
+
+        while(pshift != 1 || p[0] != 1 || p[1] != 0) {
+                if(pshift <= 1) {
+                        trail = pntz(p);
+                        shr(p, trail);
+                        pshift += trail;
+                } else {
+                        shl(p, 2);
+                        pshift -= 2;
+                        p[0] ^= 7;
+                        shr(p, 1);
+                        trinkle(head - lp[pshift] - width, width, cmp, p, pshift + 1, 1, lp, user_data);
+                        shl(p, 1);
+                        p[0] |= 1;
+                        trinkle(head - width, width, cmp, p, pshift, 1, lp, user_data);
+                }
+                head -= width;
+        }
+}
+#endif
diff --git a/src/basic/util.h b/src/basic/util.h
index 9699d228f..aa77e4cc8 100644
--- a/src/basic/util.h
+++ b/src/basic/util.h
@@ -105,6 +105,10 @@ static inline void qsort_safe(void *base, size_t nmemb, size_t size, comparison_
                 qsort_safe((p), (n), sizeof((p)[0]), (__compar_fn_t) _func_); \
         })
 
+#if ! HAVE_QSORT_R
+void qsort_r(void *base, size_t nmemb, size_t size, int (*compar)(const void*, const void*, void*), void *userdata);
+#endif
+
 static inline void qsort_r_safe(void *base, size_t nmemb, size_t size, int (*compar)(const void*, const void*, void*), void *userdata) {
         if (nmemb <= 1)
                 return;
-- 
2.16.4

