From 4e4a162d9af283cf71f7310c497672e0c2b8ca3b Mon Sep 17 00:00:00 2001
From: Rich Felker <dalias@aerifal.cx>
Date: Tue, 4 Sep 2018 21:28:38 -0400
Subject: [PATCH 1/3] in pthread_mutex_trylock, EBUSY out more directly when
 possible

avoid gratuitously setting up and tearing down the robust list pending
slot.
---
 src/thread/pthread_mutex_trylock.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/thread/pthread_mutex_trylock.c b/src/thread/pthread_mutex_trylock.c
index 54876a61..783ca0c4 100644
--- a/src/thread/pthread_mutex_trylock.c
+++ b/src/thread/pthread_mutex_trylock.c
@@ -15,6 +15,7 @@ int __pthread_mutex_trylock_owner(pthread_mutex_t *m)
 		return 0;
 	}
 	if (own == 0x7fffffff) return ENOTRECOVERABLE;
+	if (own && (!(own & 0x40000000) || !(type & 4))) return EBUSY;
 
 	if (m->_m_type & 128) {
 		if (!self->robust_list.off) {
@@ -25,8 +26,7 @@ int __pthread_mutex_trylock_owner(pthread_mutex_t *m)
 		self->robust_list.pending = &m->_m_next;
 	}
 
-	if ((own && (!(own & 0x40000000) || !(type & 4)))
-	    || a_cas(&m->_m_lock, old, tid) != old) {
+	if (a_cas(&m->_m_lock, old, tid) != old) {
 		self->robust_list.pending = 0;
 		return EBUSY;
 	}
-- 
2.19.0

