using System;
using System.Reflection;
using System.IO;

namespace @NAMESPACE@Wrapper
{
    class @MAINCLASSNAME@Wrapper
    {
        private String[] AssemblySearchPaths = { @ASSEMBLYSEARCHPATH@ };

        private String ExePath = @"@EXEPATH@";

        private String MainClassName = "@NAMESPACE@.@MAINCLASSNAME@";

        private Assembly exeAssembly;

        public @MAINCLASSNAME@Wrapper(string[] args)
        {
            // Attach the resolve event handler to the AppDomain so that missing library assemblies will be searched
            AppDomain currentDomain = AppDomain.CurrentDomain;
            currentDomain.AssemblyResolve += new ResolveEventHandler(MyResolveEventHandler);

            // Dynamically load the executable assembly
            exeAssembly = Assembly.LoadFrom(ExePath);

            // Lookup the main class
            Type mainClass = exeAssembly.GetType(MainClassName);

            // Lookup the main method
            MethodInfo mainMethod = mainClass.GetMethod("Main");

            // Invoke the main method
            mainMethod.Invoke(this, new Object[] {args});
        }

        static void Main(string[] args)
        {
            new @MAINCLASSNAME@Wrapper(args);
        }

        private Assembly MyResolveEventHandler(object sender, ResolveEventArgs args)
        {
            //This handler is called only when the common language runtime tries to bind to the assembly and fails.

            //Retrieve the list of referenced assemblies in an array of AssemblyName.
            Assembly MyAssembly;
            string assemblyPath = "";

            AssemblyName[] referencedAssemblies = exeAssembly.GetReferencedAssemblies();

            //Loop through the array of referenced assembly names.
            foreach (AssemblyName assemblyName in referencedAssemblies)
            {
                //Check for the assembly names that have raised the "AssemblyResolve" event.
                if (assemblyName.FullName.Substring(0, assemblyName.FullName.IndexOf(",")) == args.Name.Substring(0, args.Name.IndexOf(",")))
                {
                    //Retrieve the name of the assembly from where it has to be loaded.				
                    String dllName = args.Name.Substring(0, args.Name.IndexOf(",")) + ".dll";

                    //Search for the right path of the library assembly
                    foreach (String currentAssemblyPath in AssemblySearchPaths)
                    {
                        assemblyPath = currentAssemblyPath + "/" + dllName;
                        if (File.Exists(assemblyPath))
                            break;
                    }
                }
            }

            //Load the assembly from the specified path. 					
            MyAssembly = Assembly.LoadFrom(assemblyPath);

            //Return the loaded assembly.
            return MyAssembly;
        }

    }
}
