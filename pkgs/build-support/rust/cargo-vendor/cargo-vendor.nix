# Generated by carnix 0.7.2: carnix nix
{ lib, buildPlatform, buildRustCrate, fetchgit }:
let kernel = buildPlatform.parsed.kernel.name;
    abi = buildPlatform.parsed.abi.name;
    include = includedFiles: src: builtins.filterSource (path: type:
      lib.lists.any (f:
        let p = toString (src + ("/" + f)); in
        (path == p) || (type == "directory" && lib.strings.hasPrefix path p)
      ) includedFiles
    ) src;
    updateFeatures = f: up: functions: builtins.deepSeq f (lib.lists.foldl' (features: fun: fun features) (lib.attrsets.recursiveUpdate f up) functions);
    mapFeatures = features: map (fun: fun { features = features; });
    mkFeatures = feat: lib.lists.foldl (features: featureName:
      if feat.${featureName} or false then
        [ featureName ] ++ features
      else
        features
    ) [] (builtins.attrNames feat);
in
rec {
  cargo_vendor = f: cargo_vendor_0_1_16 { features = cargo_vendor_0_1_16_features { cargo_vendor_0_1_16 = f; }; };
  __all = [ (cargo_vendor {}) ];
  aho_corasick_0_6_8_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "aho-corasick";
    version = "0.6.8";
    authors = [ "Andrew Gallant <jamslam@gmail.com>" ];
    sha256 = "04bz5m32ykyn946iwxgbrl8nwca7ssxsqma140hgmkchaay80nfr";
    libName = "aho_corasick";
    crateBin = [ {  name = "aho-corasick-dot";  path = "src/main.rs"; } ];
    inherit dependencies buildDependencies features;
  };
  ansi_term_0_11_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "ansi_term";
    version = "0.11.0";
    authors = [ "ogham@bsago.me" "Ryan Scheel (Havvy) <ryan.havvy@gmail.com>" "Josh Triplett <josh@joshtriplett.org>" ];
    sha256 = "08fk0p2xvkqpmz3zlrwnf6l8sj2vngw464rvzspzp31sbgxbwm4v";
    inherit dependencies buildDependencies features;
  };
  arrayvec_0_4_7_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "arrayvec";
    version = "0.4.7";
    authors = [ "bluss" ];
    sha256 = "0fzgv7z1x1qnyd7j32vdcadk4k9wfx897y06mr3bw1yi52iqf4z4";
    inherit dependencies buildDependencies features;
  };
  atty_0_2_11_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "atty";
    version = "0.2.11";
    authors = [ "softprops <d.tangren@gmail.com>" ];
    sha256 = "0by1bj2km9jxi4i4g76zzi76fc2rcm9934jpnyrqd95zw344pb20";
    inherit dependencies buildDependencies features;
  };
  backtrace_0_3_9_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "backtrace";
    version = "0.3.9";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" "The Rust Project Developers" ];
    sha256 = "137pjkcn89b7fqk78w65ggj92pynmf1hkr1sjz53aga4b50lkmwm";
    inherit dependencies buildDependencies features;
  };
  backtrace_sys_0_1_24_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "backtrace-sys";
    version = "0.1.24";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "15d6jlknykiijcin3vqbx33760w24ss5qw3l1xd3hms5k4vc8305";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  bitflags_1_0_4_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "bitflags";
    version = "1.0.4";
    authors = [ "The Rust Project Developers" ];
    sha256 = "1g1wmz2001qmfrd37dnd5qiss5njrw26aywmg6yhkmkbyrhjxb08";
    inherit dependencies buildDependencies features;
  };
  cargo_0_30_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "cargo";
    version = "0.30.0";
    authors = [ "Yehuda Katz <wycats@gmail.com>" "Carl Lerche <me@carllerche.com>" "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "08bmi218fv7vbl5w300lvg3imk0vkpa25fdnmqrs84wqhlbymgn0";
    libPath = "src/cargo/lib.rs";
    crateBin = [ {  name = "cargo"; } ];
    inherit dependencies buildDependencies features;
  };
  cargo_vendor_0_1_16_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "cargo-vendor";
    version = "0.1.16";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "0h1h21znvgp6a6jkvy7bhh8lly3hayc8xlj697ypjs7mp0r8x4qr";
    inherit dependencies buildDependencies features;
  };
  cc_1_0_25_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "cc";
    version = "1.0.25";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "0pd8fhjlpr5qan984frkf1c8nxrqp6827wmmfzhm2840229z2hq0";
    inherit dependencies buildDependencies features;
  };
  cfg_if_0_1_5_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "cfg-if";
    version = "0.1.5";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "1i0w5v51fxnlfsfs9asrnx5bs2di4hcq363gbaw39wya3cmw6vky";
    inherit dependencies buildDependencies features;
  };
  clap_2_32_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "clap";
    version = "2.32.0";
    authors = [ "Kevin K. <kbknapp@gmail.com>" ];
    sha256 = "1hdjf0janvpjkwrjdjx1mm2aayzr54k72w6mriyr0n5anjkcj1lx";
    inherit dependencies buildDependencies features;
  };
  cloudabi_0_0_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "cloudabi";
    version = "0.0.3";
    authors = [ "Nuxi (https://nuxi.nl/) and contributors" ];
    sha256 = "1z9lby5sr6vslfd14d6igk03s7awf91mxpsfmsp3prxbxlk0x7h5";
    libPath = "cloudabi.rs";
    inherit dependencies buildDependencies features;
  };
  commoncrypto_0_2_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "commoncrypto";
    version = "0.2.0";
    authors = [ "Mark Lee" ];
    sha256 = "1ywgmv5ai4f6yskr3wv3j1wzfsdm9km8j8lm4x4j5ccln5362xdf";
    inherit dependencies buildDependencies features;
  };
  commoncrypto_sys_0_2_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "commoncrypto-sys";
    version = "0.2.0";
    authors = [ "Mark Lee" ];
    sha256 = "001i2g7xbfi48r2xjgxwrgjjjf00x9c24vfrs3g6p2q2djhwww4i";
    inherit dependencies buildDependencies features;
  };
  core_foundation_0_6_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "core-foundation";
    version = "0.6.1";
    authors = [ "The Servo Project Developers" ];
    sha256 = "02132v5171y7yi7xrrrrq07cfascrz606ww1zzyg3pkvkpliyr55";
    inherit dependencies buildDependencies features;
  };
  core_foundation_sys_0_6_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "core-foundation-sys";
    version = "0.6.1";
    authors = [ "The Servo Project Developers" ];
    sha256 = "1x2178j7mxpzbhnhl0v4m92jpr9cz2kqbza0p6xgqrlwvzp6qdkh";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  crates_io_0_18_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "crates-io";
    version = "0.18.0";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "1g62bijb202yr5h24ab3rn0l62s5zk3k9gk9163v77s7r5j7nc73";
    libPath = "lib.rs";
    libName = "crates_io";
    inherit dependencies buildDependencies features;
  };
  crossbeam_channel_0_2_6_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "crossbeam-channel";
    version = "0.2.6";
    authors = [ "The Crossbeam Project Developers" ];
    sha256 = "0qcpvzx091wnp94sl11wx6smnp3r0fj1rghlc31dcmqghxry767c";
    inherit dependencies buildDependencies features;
  };
  crossbeam_epoch_0_6_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "crossbeam-epoch";
    version = "0.6.0";
    authors = [ "The Crossbeam Project Developers" ];
    sha256 = "0nd9ns8xyn9xwrkdqfax7h2a402iafjfsbfzrfrzslxpv1570pwc";
    inherit dependencies buildDependencies features;
  };
  crossbeam_utils_0_5_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "crossbeam-utils";
    version = "0.5.0";
    authors = [ "The Crossbeam Project Developers" ];
    sha256 = "1sx0s9lnv9ja3q9l649w7rn23d7mgvb3cl08zx69vp9x4rdpxdpn";
    inherit dependencies buildDependencies features;
  };
  crypto_hash_0_3_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "crypto-hash";
    version = "0.3.1";
    authors = [ "Mark Lee" ];
    sha256 = "1qxmmx2wykyz8zigjda1j5fpqw4xjxv3mzjbqpx9gjxkv97zsw6a";
    inherit dependencies buildDependencies features;
  };
  curl_0_4_17_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "curl";
    version = "0.4.17";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "0hjwyly44bdsnykvq50ack6lkpn2682bsdayd2l1hj1mf9imlm4s";
    inherit dependencies buildDependencies features;
  };
  curl_sys_0_4_11_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "curl-sys";
    version = "0.4.11";
    authors = [ "Carl Lerche <me@carllerche.com>" "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "1zy5bh4vk4nvqjw7zj5ngjp4q6y7kpmmqi99khy1xai3cwbv1mzr";
    libPath = "lib.rs";
    libName = "curl_sys";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  docopt_1_0_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "docopt";
    version = "1.0.1";
    authors = [ "Andrew Gallant <jamslam@gmail.com>" ];
    sha256 = "0qpw2njgf29krbqn9yhnfdinpg7rnxm7kafw7xv94mbk3llp1mh3";
    crateBin = [ {  name = "docopt-wordlist";  path = "src/wordlist.rs"; } ];
    inherit dependencies buildDependencies features;
  };
  env_logger_0_5_13_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "env_logger";
    version = "0.5.13";
    authors = [ "The Rust Project Developers" ];
    sha256 = "1q6vylngcz4bn088b4hvsl879l8yz1k2bma75waljb5p4h4kbb72";
    inherit dependencies buildDependencies features;
  };
  failure_0_1_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "failure";
    version = "0.1.2";
    authors = [ "Without Boats <boats@mozilla.com>" ];
    sha256 = "0xlvmy42sjv63pgbbb0l9bdmvanlchyzbyd9mv1fs0yhw8np73x1";
    inherit dependencies buildDependencies features;
  };
  failure_derive_0_1_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "failure_derive";
    version = "0.1.2";
    authors = [ "Without Boats <woboats@gmail.com>" ];
    sha256 = "16zw2n9rmjisk8n4rxxqm7ffmxgd5dspf04b97lh7ns1nypk54w3";
    procMacro = true;
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  filetime_0_2_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "filetime";
    version = "0.2.1";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "1wmbj3jnpl39851lymw64j9ac1nmy1z96h1wymvlvypspl68w5y0";
    inherit dependencies buildDependencies features;
  };
  flate2_1_0_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "flate2";
    version = "1.0.2";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "1rky6f7r5whg39gy9z70plrgirlj17zfrjg41dwknjc3z6j6y26l";
    inherit dependencies buildDependencies features;
  };
  fnv_1_0_6_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "fnv";
    version = "1.0.6";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "128mlh23y3gg6ag5h8iiqlcbl59smisdzraqy88ldrf75kbw27ip";
    libPath = "lib.rs";
    inherit dependencies buildDependencies features;
  };
  foreign_types_0_3_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "foreign-types";
    version = "0.3.2";
    authors = [ "Steven Fackler <sfackler@gmail.com>" ];
    sha256 = "105n8sp2djb1s5lzrw04p7ss3dchr5qa3canmynx396nh3vwm2p8";
    inherit dependencies buildDependencies features;
  };
  foreign_types_shared_0_1_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "foreign-types-shared";
    version = "0.1.1";
    authors = [ "Steven Fackler <sfackler@gmail.com>" ];
    sha256 = "0b6cnvqbflws8dxywk4589vgbz80049lz4x1g9dfy4s1ppd3g4z5";
    inherit dependencies buildDependencies features;
  };
  fs2_0_4_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "fs2";
    version = "0.4.3";
    authors = [ "Dan Burkert <dan@danburkert.com>" ];
    sha256 = "1crj36rhhpk3qby9yj7r77w7sld0mzab2yicmphbdkfymbmp3ldp";
    inherit dependencies buildDependencies features;
  };
  fuchsia_zircon_0_3_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "fuchsia-zircon";
    version = "0.3.3";
    authors = [ "Raph Levien <raph@google.com>" ];
    sha256 = "0jrf4shb1699r4la8z358vri8318w4mdi6qzfqy30p2ymjlca4gk";
    inherit dependencies buildDependencies features;
  };
  fuchsia_zircon_sys_0_3_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "fuchsia-zircon-sys";
    version = "0.3.3";
    authors = [ "Raph Levien <raph@google.com>" ];
    sha256 = "08jp1zxrm9jbrr6l26bjal4dbm8bxfy57ickdgibsqxr1n9j3hf5";
    inherit dependencies buildDependencies features;
  };
  git2_0_7_5_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "git2";
    version = "0.7.5";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "0niyjy68vb790x5hl72qbpp1145xfbfrlf0rgmc8fq4qwbz4p5pb";
    inherit dependencies buildDependencies features;
  };
  git2_curl_0_8_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "git2-curl";
    version = "0.8.1";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "0yn64hcld1pvxw3kdff4c34vgb9m6vc695nrib8kh4ar5adx8yhn";
    inherit dependencies buildDependencies features;
  };
  glob_0_2_11_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "glob";
    version = "0.2.11";
    authors = [ "The Rust Project Developers" ];
    sha256 = "104389jjxs8r2f5cc9p0axhjmndgln60ih5x4f00ccgg9d3zarlf";
    inherit dependencies buildDependencies features;
  };
  globset_0_4_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "globset";
    version = "0.4.2";
    authors = [ "Andrew Gallant <jamslam@gmail.com>" ];
    sha256 = "0cymxnzzzadk13f344gska1apvggc0mnd3klhw3h504vhqrb1l2b";
    inherit dependencies buildDependencies features;
  };
  hex_0_3_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "hex";
    version = "0.3.2";
    authors = [ "KokaKiwi <kokakiwi@kokakiwi.net>" ];
    sha256 = "0hs0xfb4x67y4ss9mmbjmibkwakbn3xf23i21m409bw2zqk9b6kz";
    inherit dependencies buildDependencies features;
  };
  home_0_3_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "home";
    version = "0.3.3";
    authors = [ "Brian Anderson <andersrb@gmail.com>" ];
    sha256 = "1hgyd8zglkf3qn1agc6k87nykkimi19rbcc47c165xfyldcgmk09";
    inherit dependencies buildDependencies features;
  };
  humantime_1_1_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "humantime";
    version = "1.1.1";
    authors = [ "Paul Colomiets <paul@colomiets.name>" ];
    sha256 = "1lzdfsfzdikcp1qb6wcdvnsdv16pmzr7p7cv171vnbnyz2lrwbgn";
    libPath = "src/lib.rs";
    inherit dependencies buildDependencies features;
  };
  idna_0_1_5_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "idna";
    version = "0.1.5";
    authors = [ "The rust-url developers" ];
    sha256 = "1gwgl19rz5vzi67rrhamczhxy050f5ynx4ybabfapyalv7z1qmjy";
    inherit dependencies buildDependencies features;
  };
  ignore_0_4_4_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "ignore";
    version = "0.4.4";
    authors = [ "Andrew Gallant <jamslam@gmail.com>" ];
    sha256 = "1qv4k62i98akvdy1fd5lvxlnm3lkm48v0ihzhaml9ma18ipzpnd2";
    inherit dependencies buildDependencies features;
  };
  itoa_0_4_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "itoa";
    version = "0.4.3";
    authors = [ "David Tolnay <dtolnay@gmail.com>" ];
    sha256 = "0zadimmdgvili3gdwxqg7ljv3r4wcdg1kkdfp9nl15vnm23vrhy1";
    inherit dependencies buildDependencies features;
  };
  jobserver_0_1_11_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "jobserver";
    version = "0.1.11";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "0l424ksgmixvac4x9adq14jh6n00py502wvcfbv01qp6qg2bdlv6";
    inherit dependencies buildDependencies features;
  };
  kernel32_sys_0_2_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "kernel32-sys";
    version = "0.2.2";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "1lrw1hbinyvr6cp28g60z97w32w8vsk6pahk64pmrv2fmby8srfj";
    libName = "kernel32";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  lazy_static_1_1_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "lazy_static";
    version = "1.1.0";
    authors = [ "Marvin Löbel <loebel.marvin@gmail.com>" ];
    sha256 = "1da2b6nxfc2l547qgl9kd1pn9sh1af96a6qx6xw8xdnv6hh5fag0";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  lazycell_1_1_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "lazycell";
    version = "1.1.0";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" "Nikita Pekin <contact@nikitapek.in>" ];
    sha256 = "0n1g6yx4zh002985qqixis5dp1svspcxc7c7kr7abxwgw0mmghgg";
    inherit dependencies buildDependencies features;
  };
  libc_0_2_43_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "libc";
    version = "0.2.43";
    authors = [ "The Rust Project Developers" ];
    sha256 = "0pshydmsq71kl9276zc2928ld50sp524ixcqkcqsgq410dx6c50b";
    inherit dependencies buildDependencies features;
  };
  libgit2_sys_0_7_8_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "libgit2-sys";
    version = "0.7.8";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "0gxhh6zyqy7vmhmi8cvg9a543dbiyllkp3awlsjn2ms23dklr24b";
    libPath = "lib.rs";
    libName = "libgit2_sys";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  libssh2_sys_0_2_11_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "libssh2-sys";
    version = "0.2.11";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "1mjily9qjjjf31pzvlxyqnp1midjc77s6sd303j46d14igna7nhi";
    libPath = "lib.rs";
    libName = "libssh2_sys";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  libz_sys_1_0_22_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "libz-sys";
    version = "1.0.22";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "1jp63akcqr1vfnms2w8rbsqwbjkibv5qy4jicsvp3v0sy9r4l8c4";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  lock_api_0_1_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "lock_api";
    version = "0.1.3";
    authors = [ "Amanieu d'Antras <amanieu@gmail.com>" ];
    sha256 = "19m77g5pbpshd27srm4ppwxpddvdy15vmxpmnjd6afgj4scsiz8l";
    inherit dependencies buildDependencies features;
  };
  log_0_4_5_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "log";
    version = "0.4.5";
    authors = [ "The Rust Project Developers" ];
    sha256 = "1hdcj17al94ga90q7jx2y1rmxi68n3akra1awv3hr3s9b9zipgq6";
    inherit dependencies buildDependencies features;
  };
  matches_0_1_8_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "matches";
    version = "0.1.8";
    authors = [ "Simon Sapin <simon.sapin@exyr.org>" ];
    sha256 = "03hl636fg6xggy0a26200xs74amk3k9n0908rga2szn68agyz3cv";
    libPath = "lib.rs";
    inherit dependencies buildDependencies features;
  };
  memchr_2_1_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "memchr";
    version = "2.1.0";
    authors = [ "Andrew Gallant <jamslam@gmail.com>" "bluss" ];
    sha256 = "02w1fc5z1ccx8fbzgcr0mpk0xf2i9g4vbx9q5c2g8pjddbaqvjjq";
    inherit dependencies buildDependencies features;
  };
  memoffset_0_2_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "memoffset";
    version = "0.2.1";
    authors = [ "Gilad Naaman <gilad.naaman@gmail.com>" ];
    sha256 = "00vym01jk9slibq2nsiilgffp7n6k52a4q3n4dqp0xf5kzxvffcf";
    inherit dependencies buildDependencies features;
  };
  miniz_sys_0_1_10_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "miniz-sys";
    version = "0.1.10";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "11vg6phafxil87nbxgrlhcx5hjr3145wsbwwkfmibvnmzxfdmvln";
    libPath = "lib.rs";
    libName = "miniz_sys";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  miow_0_3_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "miow";
    version = "0.3.3";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "1mlk5mn00cl6bmf8qlpc6r85dxf4l45vbkbzshsr1mrkb3hn1j57";
    inherit dependencies buildDependencies features;
  };
  nodrop_0_1_12_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "nodrop";
    version = "0.1.12";
    authors = [ "bluss" ];
    sha256 = "1b9rxvdg8061gxjc239l9slndf0ds3m6fy2sf3gs8f9kknqgl49d";
    inherit dependencies buildDependencies features;
  };
  num_cpus_1_8_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "num_cpus";
    version = "1.8.0";
    authors = [ "Sean McArthur <sean@seanmonstar.com>" ];
    sha256 = "1y6qnd9r8ga6y8mvlabdrr73nc8cshjjlzbvnanzyj9b8zzkfwk2";
    inherit dependencies buildDependencies features;
  };
  openssl_0_10_12_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "openssl";
    version = "0.10.12";
    authors = [ "Steven Fackler <sfackler@gmail.com>" ];
    sha256 = "1fwm5zmypfs0my1s0dpkhjcm2nk639i5wni6981by0dlzhfjygqa";
    inherit dependencies buildDependencies features;
  };
  openssl_probe_0_1_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "openssl-probe";
    version = "0.1.2";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "1a89fznx26vvaxyrxdvgf6iwai5xvs6xjvpjin68fgvrslv6n15a";
    inherit dependencies buildDependencies features;
  };
  openssl_src_110_0_7_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "openssl-src";
    version = "110.0.7+1.1.0i";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "0ycz2ka6cd4yc1kcn2hfyqcafak16300msx4d5qqbp5ic98x8v4h";
    inherit dependencies buildDependencies features;
  };
  openssl_sys_0_9_36_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "openssl-sys";
    version = "0.9.36";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" "Steven Fackler <sfackler@gmail.com>" ];
    sha256 = "0rrx8hhq9xi1a37jwjdabzpz09i8dh1ixrr39339n2q8ic3rf2kd";
    build = "build/main.rs";
    inherit dependencies buildDependencies features;
  };
  owning_ref_0_3_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "owning_ref";
    version = "0.3.3";
    authors = [ "Marvin Löbel <loebel.marvin@gmail.com>" ];
    sha256 = "13ivn0ydc0hf957ix0f5si9nnplzzykbr70hni1qz9m19i9kvmrh";
    inherit dependencies buildDependencies features;
  };
  parking_lot_0_6_4_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "parking_lot";
    version = "0.6.4";
    authors = [ "Amanieu d'Antras <amanieu@gmail.com>" ];
    sha256 = "0qwfysx8zfkj72sfcrqvd6pp7lgjmklyixsi3y0g6xjspw876rax";
    inherit dependencies buildDependencies features;
  };
  parking_lot_core_0_3_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "parking_lot_core";
    version = "0.3.1";
    authors = [ "Amanieu d'Antras <amanieu@gmail.com>" ];
    sha256 = "0h5p7dys8cx9y6ii4i57ampf7qdr8zmkpn543kd3h7nkhml8bw72";
    inherit dependencies buildDependencies features;
  };
  percent_encoding_1_0_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "percent-encoding";
    version = "1.0.1";
    authors = [ "The rust-url developers" ];
    sha256 = "04ahrp7aw4ip7fmadb0bknybmkfav0kk0gw4ps3ydq5w6hr0ib5i";
    libPath = "lib.rs";
    inherit dependencies buildDependencies features;
  };
  pkg_config_0_3_14_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "pkg-config";
    version = "0.3.14";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "0207fsarrm412j0dh87lfcas72n8mxar7q3mgflsbsrqnb140sv6";
    inherit dependencies buildDependencies features;
  };
  proc_macro2_0_4_19_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "proc-macro2";
    version = "0.4.19";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "1k76q9qfgyhqv0w80f0r4hv4dfm0sk751pm9bc1v40qq1sp6jypn";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  quick_error_1_2_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "quick-error";
    version = "1.2.2";
    authors = [ "Paul Colomiets <paul@colomiets.name>" "Colin Kiegel <kiegel@gmx.de>" ];
    sha256 = "192a3adc5phgpibgqblsdx1b421l5yg9bjbmv552qqq9f37h60k5";
    inherit dependencies buildDependencies features;
  };
  quote_0_6_8_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "quote";
    version = "0.6.8";
    authors = [ "David Tolnay <dtolnay@gmail.com>" ];
    sha256 = "0dq6j23w6pmc4l6v490arixdwypy0b82z76nrzaingqhqri4p3mh";
    inherit dependencies buildDependencies features;
  };
  rand_0_4_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rand";
    version = "0.4.3";
    authors = [ "The Rust Project Developers" ];
    sha256 = "1644wri45l147822xy7dgdm4k7myxzs66cb795ga0x7dan11ci4f";
    inherit dependencies buildDependencies features;
  };
  rand_0_5_5_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rand";
    version = "0.5.5";
    authors = [ "The Rust Project Developers" ];
    sha256 = "0d7pnsh57qxhz1ghrzk113ddkn13kf2g758ffnbxq4nhwjfzhlc9";
    inherit dependencies buildDependencies features;
  };
  rand_core_0_2_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rand_core";
    version = "0.2.1";
    authors = [ "The Rust Project Developers" ];
    sha256 = "12mbdma0is3a43s6xkz5g48ndx3zn4hb611gngv1yrbaghpw8nrw";
    inherit dependencies buildDependencies features;
  };
  redox_syscall_0_1_40_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "redox_syscall";
    version = "0.1.40";
    authors = [ "Jeremy Soller <jackpot51@gmail.com>" ];
    sha256 = "132rnhrq49l3z7gjrwj2zfadgw6q0355s6a7id7x7c0d7sk72611";
    libName = "syscall";
    inherit dependencies buildDependencies features;
  };
  redox_termios_0_1_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "redox_termios";
    version = "0.1.1";
    authors = [ "Jeremy Soller <jackpot51@gmail.com>" ];
    sha256 = "04s6yyzjca552hdaqlvqhp3vw0zqbc304md5czyd3axh56iry8wh";
    libPath = "src/lib.rs";
    inherit dependencies buildDependencies features;
  };
  regex_1_0_5_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "regex";
    version = "1.0.5";
    authors = [ "The Rust Project Developers" ];
    sha256 = "1nb4dva9lhb3v76bdds9qcxldb2xy998sdraqnqaqdr6axfsfp02";
    inherit dependencies buildDependencies features;
  };
  regex_syntax_0_6_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "regex-syntax";
    version = "0.6.2";
    authors = [ "The Rust Project Developers" ];
    sha256 = "109426mj7nhwr6szdzbcvn1a8g5zy52f9maqxjd9agm8wg87ylyw";
    inherit dependencies buildDependencies features;
  };
  remove_dir_all_0_5_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "remove_dir_all";
    version = "0.5.1";
    authors = [ "Aaronepower <theaaronepower@gmail.com>" ];
    sha256 = "1chx3yvfbj46xjz4bzsvps208l46hfbcy0sm98gpiya454n4rrl7";
    inherit dependencies buildDependencies features;
  };
  rustc_demangle_0_1_9_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rustc-demangle";
    version = "0.1.9";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "00ma4r9haq0zv5krps617mym6y74056pfcivyld0kpci156vfaax";
    inherit dependencies buildDependencies features;
  };
  rustc_workspace_hack_1_0_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rustc-workspace-hack";
    version = "1.0.0";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "0arpdp472j4lrwxbmf4z21d8kh95rbbphnzccf605pqq2rvczv3p";
    inherit dependencies buildDependencies features;
  };
  rustc_version_0_2_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rustc_version";
    version = "0.2.3";
    authors = [ "Marvin Löbel <loebel.marvin@gmail.com>" ];
    sha256 = "0rgwzbgs3i9fqjm1p4ra3n7frafmpwl29c8lw85kv1rxn7n2zaa7";
    inherit dependencies buildDependencies features;
  };
  rustfix_0_4_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rustfix";
    version = "0.4.2";
    authors = [ "Pascal Hertleif <killercup@gmail.com>" "Oliver Schneider <oli-obk@users.noreply.github.com>" ];
    sha256 = "16xsmcnys80w1wg6dhk3g9625gmy25pnb5f2pbq5d6bh70a50z7d";
    inherit dependencies buildDependencies features;
  };
  ryu_0_2_6_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "ryu";
    version = "0.2.6";
    authors = [ "David Tolnay <dtolnay@gmail.com>" ];
    sha256 = "1vdh6z4aysc9kiiqhl7vxkqz3fykcnp24kgfizshlwfsz2j0p9dr";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  same_file_1_0_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "same-file";
    version = "1.0.3";
    authors = [ "Andrew Gallant <jamslam@gmail.com>" ];
    sha256 = "0558b4jnrkf35v7lsl42751864kqn3r89bjbx3jjss539g87fjw6";
    inherit dependencies buildDependencies features;
  };
  schannel_0_1_13_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "schannel";
    version = "0.1.13";
    authors = [ "Steven Fackler <sfackler@gmail.com>" "Steffen Butzer <steffen.butzer@outlook.com>" ];
    sha256 = "033zavvq2k6z5akk38vzaglzbxzljaixgmhj9am27nr21dgaj6b3";
    inherit dependencies buildDependencies features;
  };
  scopeguard_0_3_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "scopeguard";
    version = "0.3.3";
    authors = [ "bluss" ];
    sha256 = "0i1l013csrqzfz6c68pr5pi01hg5v5yahq8fsdmaxy6p8ygsjf3r";
    inherit dependencies buildDependencies features;
  };
  semver_0_9_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "semver";
    version = "0.9.0";
    authors = [ "Steve Klabnik <steve@steveklabnik.com>" "The Rust Project Developers" ];
    sha256 = "0azak2lb2wc36s3x15az886kck7rpnksrw14lalm157rg9sc9z63";
    inherit dependencies buildDependencies features;
  };
  semver_parser_0_7_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "semver-parser";
    version = "0.7.0";
    authors = [ "Steve Klabnik <steve@steveklabnik.com>" ];
    sha256 = "1da66c8413yakx0y15k8c055yna5lyb6fr0fw9318kdwkrk5k12h";
    inherit dependencies buildDependencies features;
  };
  serde_1_0_79_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "serde";
    version = "1.0.79";
    authors = [ "Erick Tryzelaar <erick.tryzelaar@gmail.com>" "David Tolnay <dtolnay@gmail.com>" ];
    sha256 = "123jh1h8a7r1qk61n97arm1rwkzfg35a0j5a9nbmcy6y7xc4rbsc";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  serde_derive_1_0_79_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "serde_derive";
    version = "1.0.79";
    authors = [ "Erick Tryzelaar <erick.tryzelaar@gmail.com>" "David Tolnay <dtolnay@gmail.com>" ];
    sha256 = "1waika12l2ibqyak53xq46rvh70zk9ql3m84aa4vkvjbl0z93qab";
    procMacro = true;
    inherit dependencies buildDependencies features;
  };
  serde_ignored_0_0_4_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "serde_ignored";
    version = "0.0.4";
    authors = [ "David Tolnay <dtolnay@gmail.com>" ];
    sha256 = "1ljsywm58p1s645rg2l9mchc5xa6mzxjpm8ag8nc2b74yp09h4jh";
    inherit dependencies buildDependencies features;
  };
  serde_json_1_0_28_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "serde_json";
    version = "1.0.28";
    authors = [ "Erick Tryzelaar <erick.tryzelaar@gmail.com>" "David Tolnay <dtolnay@gmail.com>" ];
    sha256 = "16zm8zlarcmkzsfplmrhh3vzyqqv7gcliwyr2bbfy3gnak0k94ww";
    inherit dependencies buildDependencies features;
  };
  shell_escape_0_1_4_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "shell-escape";
    version = "0.1.4";
    authors = [ "Steven Fackler <sfackler@gmail.com>" ];
    sha256 = "02ik28la039b8anx0sx8mbdp2yx66m64mjrjyy6x0dgpbmfxmc24";
    inherit dependencies buildDependencies features;
  };
  smallvec_0_6_5_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "smallvec";
    version = "0.6.5";
    authors = [ "Simon Sapin <simon.sapin@exyr.org>" ];
    sha256 = "0jx49nb1c91936jaq30axc96wncdp2wdmspf1qc8iv85f1i44vvf";
    libPath = "lib.rs";
    inherit dependencies buildDependencies features;
  };
  socket2_0_3_8_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "socket2";
    version = "0.3.8";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "1a71m20jxmf9kqqinksphc7wj1j7q672q29cpza7p9siyzyfx598";
    inherit dependencies buildDependencies features;
  };
  stable_deref_trait_1_1_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "stable_deref_trait";
    version = "1.1.1";
    authors = [ "Robert Grosse <n210241048576@gmail.com>" ];
    sha256 = "1xy9slzslrzr31nlnw52sl1d820b09y61b7f13lqgsn8n7y0l4g8";
    inherit dependencies buildDependencies features;
  };
  strsim_0_7_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "strsim";
    version = "0.7.0";
    authors = [ "Danny Guo <dannyguo91@gmail.com>" ];
    sha256 = "0fy0k5f2705z73mb3x9459bpcvrx4ky8jpr4zikcbiwan4bnm0iv";
    inherit dependencies buildDependencies features;
  };
  syn_0_14_9_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "syn";
    version = "0.14.9";
    authors = [ "David Tolnay <dtolnay@gmail.com>" ];
    sha256 = "1ia0qbrnqz40s8886b2jpcjiqfbziigd96lqjfin06xk6i28vr7b";
    inherit dependencies buildDependencies features;
  };
  syn_0_15_4_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "syn";
    version = "0.15.4";
    authors = [ "David Tolnay <dtolnay@gmail.com>" ];
    sha256 = "1kjpz5rw8fr53if153yxczx02yijf05x6q5ynvwz47h8wyf8vxcb";
    inherit dependencies buildDependencies features;
  };
  synstructure_0_9_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "synstructure";
    version = "0.9.0";
    authors = [ "Nika Layzell <nika@thelayzells.com>" ];
    sha256 = "1ipvy750zdyrxn9d60ns5r2niqnv8k3dky5ila725s25gxsxrq19";
    inherit dependencies buildDependencies features;
  };
  tar_0_4_16_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "tar";
    version = "0.4.16";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "0s36d0nzn2hs20y805wpmpc4asd1jhrpabqwcpqf5ha442fa7f3b";
    inherit dependencies buildDependencies features;
  };
  tempfile_3_0_4_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "tempfile";
    version = "3.0.4";
    authors = [ "Steven Allen <steven@stebalien.com>" "The Rust Project Developers" "Ashley Mannix <ashleymannix@live.com.au>" "Jason White <jasonaw0@gmail.com>" ];
    sha256 = "0i4iwxayiwip8g10wvjmrw8dy6zbkyxxpxxjanii37s026hgd5n4";
    inherit dependencies buildDependencies features;
  };
  termcolor_1_0_4_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "termcolor";
    version = "1.0.4";
    authors = [ "Andrew Gallant <jamslam@gmail.com>" ];
    sha256 = "0xydrjc0bxg08llcbcmkka29szdrfklk4vh6l6mdd67ajifqw1mv";
    inherit dependencies buildDependencies features;
  };
  termion_1_5_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "termion";
    version = "1.5.1";
    authors = [ "ticki <Ticki@users.noreply.github.com>" "gycos <alexandre.bury@gmail.com>" "IGI-111 <igi-111@protonmail.com>" ];
    sha256 = "02gq4vd8iws1f3gjrgrgpajsk2bk43nds5acbbb4s8dvrdvr8nf1";
    inherit dependencies buildDependencies features;
  };
  textwrap_0_10_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "textwrap";
    version = "0.10.0";
    authors = [ "Martin Geisler <martin@geisler.net>" ];
    sha256 = "1s8d5cna12smhgj0x2y1xphklyk2an1yzbadnj89p1vy5vnjpsas";
    inherit dependencies buildDependencies features;
  };
  thread_local_0_3_6_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "thread_local";
    version = "0.3.6";
    authors = [ "Amanieu d'Antras <amanieu@gmail.com>" ];
    sha256 = "02rksdwjmz2pw9bmgbb4c0bgkbq5z6nvg510sq1s6y2j1gam0c7i";
    inherit dependencies buildDependencies features;
  };
  toml_0_4_6_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "toml";
    version = "0.4.6";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "0rfl7lyb5f67spk69s604nw87f97g7fvv36hj9v88qlr2bwyrn8v";
    inherit dependencies buildDependencies features;
  };
  ucd_util_0_1_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "ucd-util";
    version = "0.1.1";
    authors = [ "Andrew Gallant <jamslam@gmail.com>" ];
    sha256 = "02a8h3siipx52b832xc8m8rwasj6nx9jpiwfldw8hp6k205hgkn0";
    inherit dependencies buildDependencies features;
  };
  unicode_bidi_0_3_4_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "unicode-bidi";
    version = "0.3.4";
    authors = [ "The Servo Project Developers" ];
    sha256 = "0lcd6jasrf8p9p0q20qyf10c6xhvw40m2c4rr105hbk6zy26nj1q";
    libName = "unicode_bidi";
    inherit dependencies buildDependencies features;
  };
  unicode_normalization_0_1_7_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "unicode-normalization";
    version = "0.1.7";
    authors = [ "kwantam <kwantam@gmail.com>" ];
    sha256 = "1da2hv800pd0wilmn4idwpgv5p510hjxizjcfv6xzb40xcsjd8gs";
    inherit dependencies buildDependencies features;
  };
  unicode_width_0_1_5_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "unicode-width";
    version = "0.1.5";
    authors = [ "kwantam <kwantam@gmail.com>" ];
    sha256 = "0886lc2aymwgy0lhavwn6s48ik3c61ykzzd3za6prgnw51j7bi4w";
    inherit dependencies buildDependencies features;
  };
  unicode_xid_0_1_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "unicode-xid";
    version = "0.1.0";
    authors = [ "erick.tryzelaar <erick.tryzelaar@gmail.com>" "kwantam <kwantam@gmail.com>" ];
    sha256 = "05wdmwlfzxhq3nhsxn6wx4q8dhxzzfb9szsz6wiw092m1rjj01zj";
    inherit dependencies buildDependencies features;
  };
  unreachable_1_0_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "unreachable";
    version = "1.0.0";
    authors = [ "Jonathan Reem <jonathan.reem@gmail.com>" ];
    sha256 = "1am8czbk5wwr25gbp2zr007744fxjshhdqjz9liz7wl4pnv3whcf";
    inherit dependencies buildDependencies features;
  };
  url_1_7_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "url";
    version = "1.7.1";
    authors = [ "The rust-url developers" ];
    sha256 = "1l36pbvlwdnh3zqz4wp5n6jg332wkis9pi2g3vy12xr8k4nfyk8i";
    inherit dependencies buildDependencies features;
  };
  utf8_ranges_1_0_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "utf8-ranges";
    version = "1.0.1";
    authors = [ "Andrew Gallant <jamslam@gmail.com>" ];
    sha256 = "1s56ihd2c8ba6191078wivvv59247szaiszrh8x2rxqfsxlfrnpp";
    inherit dependencies buildDependencies features;
  };
  vcpkg_0_2_6_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "vcpkg";
    version = "0.2.6";
    authors = [ "Jim McGrath <jimmc2@gmail.com>" ];
    sha256 = "1ig6jqpzzl1z9vk4qywgpfr4hfbd8ny8frqsgm3r449wkc4n1i5x";
    inherit dependencies buildDependencies features;
  };
  vec_map_0_8_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "vec_map";
    version = "0.8.1";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" "Jorge Aparicio <japaricious@gmail.com>" "Alexis Beingessner <a.beingessner@gmail.com>" "Brian Anderson <>" "tbu- <>" "Manish Goregaokar <>" "Aaron Turon <aturon@mozilla.com>" "Adolfo Ochagavía <>" "Niko Matsakis <>" "Steven Fackler <>" "Chase Southwood <csouth3@illinois.edu>" "Eduard Burtescu <>" "Florian Wilkens <>" "Félix Raimundo <>" "Tibor Benke <>" "Markus Siemens <markus@m-siemens.de>" "Josh Branchaud <jbranchaud@gmail.com>" "Huon Wilson <dbau.pp@gmail.com>" "Corey Farwell <coref@rwell.org>" "Aaron Liblong <>" "Nick Cameron <nrc@ncameron.org>" "Patrick Walton <pcwalton@mimiga.net>" "Felix S Klock II <>" "Andrew Paseltiner <apaseltiner@gmail.com>" "Sean McArthur <sean.monstar@gmail.com>" "Vadim Petrochenkov <>" ];
    sha256 = "1jj2nrg8h3l53d43rwkpkikq5a5x15ms4rf1rw92hp5lrqhi8mpi";
    inherit dependencies buildDependencies features;
  };
  version_check_0_1_4_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "version_check";
    version = "0.1.4";
    authors = [ "Sergio Benitez <sb@sergio.bz>" ];
    sha256 = "1ghi6bw2qsj53x2vyprs883dbrq8cjzmshlamjsxvmwd2zp13bck";
    inherit dependencies buildDependencies features;
  };
  void_1_0_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "void";
    version = "1.0.2";
    authors = [ "Jonathan Reem <jonathan.reem@gmail.com>" ];
    sha256 = "0h1dm0dx8dhf56a83k68mijyxigqhizpskwxfdrs1drwv2cdclv3";
    inherit dependencies buildDependencies features;
  };
  walkdir_2_2_5_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "walkdir";
    version = "2.2.5";
    authors = [ "Andrew Gallant <jamslam@gmail.com>" ];
    sha256 = "02ik4g8z0kayc7x3rfszbfc2iz7czlqnln9wcya5xwymaairbd84";
    inherit dependencies buildDependencies features;
  };
  winapi_0_2_8_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "winapi";
    version = "0.2.8";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "0a45b58ywf12vb7gvj6h3j264nydynmzyqz8d8rqxsj6icqv82as";
    inherit dependencies buildDependencies features;
  };
  winapi_0_3_5_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "winapi";
    version = "0.3.5";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "0cfdsxa5yf832r5i2z7dhdvnryyvhfp3nb32gpcaq502zgjdm3w6";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  winapi_build_0_1_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "winapi-build";
    version = "0.1.1";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "1lxlpi87rkhxcwp2ykf1ldw3p108hwm24nywf3jfrvmff4rjhqga";
    libName = "build";
    inherit dependencies buildDependencies features;
  };
  winapi_i686_pc_windows_gnu_0_4_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "winapi-i686-pc-windows-gnu";
    version = "0.4.0";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "05ihkij18r4gamjpxj4gra24514can762imjzlmak5wlzidplzrp";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  winapi_util_0_1_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "winapi-util";
    version = "0.1.1";
    authors = [ "Andrew Gallant <jamslam@gmail.com>" ];
    sha256 = "10madanla73aagbklx6y73r2g2vwq9w8a0qcghbbbpn9vfr6a95f";
    inherit dependencies buildDependencies features;
  };
  winapi_x86_64_pc_windows_gnu_0_4_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "winapi-x86_64-pc-windows-gnu";
    version = "0.4.0";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "0n1ylmlsb8yg1v583i4xy0qmqg42275flvbc51hdqjjfjcl9vlbj";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  wincolor_1_0_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "wincolor";
    version = "1.0.1";
    authors = [ "Andrew Gallant <jamslam@gmail.com>" ];
    sha256 = "0gr7v4krmjba7yq16071rfacz42qbapas7mxk5nphjwb042a8gvz";
    inherit dependencies buildDependencies features;
  };
  aho_corasick_0_6_8 = { features?(aho_corasick_0_6_8_features {}) }: aho_corasick_0_6_8_ {
    dependencies = mapFeatures features ([ memchr_2_1_0 ]);
  };
  aho_corasick_0_6_8_features = f: updateFeatures f (rec {
    aho_corasick_0_6_8.default = (f.aho_corasick_0_6_8.default or true);
    memchr_2_1_0.default = true;
  }) [ memchr_2_1_0_features ];
  ansi_term_0_11_0 = { features?(ansi_term_0_11_0_features {}) }: ansi_term_0_11_0_ {
    dependencies = (if kernel == "windows" then mapFeatures features ([ winapi_0_3_5 ]) else []);
  };
  ansi_term_0_11_0_features = f: updateFeatures f (rec {
    ansi_term_0_11_0.default = (f.ansi_term_0_11_0.default or true);
    winapi_0_3_5.consoleapi = true;
    winapi_0_3_5.default = true;
    winapi_0_3_5.errhandlingapi = true;
    winapi_0_3_5.processenv = true;
  }) [ winapi_0_3_5_features ];
  arrayvec_0_4_7 = { features?(arrayvec_0_4_7_features {}) }: arrayvec_0_4_7_ {
    dependencies = mapFeatures features ([ nodrop_0_1_12 ]);
    features = mkFeatures (features.arrayvec_0_4_7 or {});
  };
  arrayvec_0_4_7_features = f: updateFeatures f (rec {
    arrayvec_0_4_7.default = (f.arrayvec_0_4_7.default or true);
    arrayvec_0_4_7.serde =
      (f.arrayvec_0_4_7.serde or false) ||
      (f.arrayvec_0_4_7.serde-1 or false) ||
      (arrayvec_0_4_7.serde-1 or false);
    arrayvec_0_4_7.std =
      (f.arrayvec_0_4_7.std or false) ||
      (f.arrayvec_0_4_7.default or false) ||
      (arrayvec_0_4_7.default or false);
    nodrop_0_1_12.default = (f.nodrop_0_1_12.default or false);
  }) [ nodrop_0_1_12_features ];
  atty_0_2_11 = { features?(atty_0_2_11_features {}) }: atty_0_2_11_ {
    dependencies = (if kernel == "redox" then mapFeatures features ([ termion_1_5_1 ]) else [])
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ libc_0_2_43 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ winapi_0_3_5 ]) else []);
  };
  atty_0_2_11_features = f: updateFeatures f (rec {
    atty_0_2_11.default = (f.atty_0_2_11.default or true);
    libc_0_2_43.default = (f.libc_0_2_43.default or false);
    termion_1_5_1.default = true;
    winapi_0_3_5.consoleapi = true;
    winapi_0_3_5.default = true;
    winapi_0_3_5.minwinbase = true;
    winapi_0_3_5.minwindef = true;
    winapi_0_3_5.processenv = true;
    winapi_0_3_5.winbase = true;
  }) [ termion_1_5_1_features libc_0_2_43_features winapi_0_3_5_features ];
  backtrace_0_3_9 = { features?(backtrace_0_3_9_features {}) }: backtrace_0_3_9_ {
    dependencies = mapFeatures features ([ cfg_if_0_1_5 rustc_demangle_0_1_9 ])
      ++ (if (kernel == "linux" || kernel == "darwin") && !(kernel == "fuchsia") && !(kernel == "emscripten") && !(kernel == "darwin") && !(kernel == "ios") then mapFeatures features ([ ]
      ++ (if features.backtrace_0_3_9.backtrace-sys or false then [ backtrace_sys_0_1_24 ] else [])) else [])
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ libc_0_2_43 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ ]
      ++ (if features.backtrace_0_3_9.winapi or false then [ winapi_0_3_5 ] else [])) else []);
    features = mkFeatures (features.backtrace_0_3_9 or {});
  };
  backtrace_0_3_9_features = f: updateFeatures f (rec {
    backtrace_0_3_9.addr2line =
      (f.backtrace_0_3_9.addr2line or false) ||
      (f.backtrace_0_3_9.gimli-symbolize or false) ||
      (backtrace_0_3_9.gimli-symbolize or false);
    backtrace_0_3_9.backtrace-sys =
      (f.backtrace_0_3_9.backtrace-sys or false) ||
      (f.backtrace_0_3_9.libbacktrace or false) ||
      (backtrace_0_3_9.libbacktrace or false);
    backtrace_0_3_9.coresymbolication =
      (f.backtrace_0_3_9.coresymbolication or false) ||
      (f.backtrace_0_3_9.default or false) ||
      (backtrace_0_3_9.default or false);
    backtrace_0_3_9.dbghelp =
      (f.backtrace_0_3_9.dbghelp or false) ||
      (f.backtrace_0_3_9.default or false) ||
      (backtrace_0_3_9.default or false);
    backtrace_0_3_9.default = (f.backtrace_0_3_9.default or true);
    backtrace_0_3_9.dladdr =
      (f.backtrace_0_3_9.dladdr or false) ||
      (f.backtrace_0_3_9.default or false) ||
      (backtrace_0_3_9.default or false);
    backtrace_0_3_9.findshlibs =
      (f.backtrace_0_3_9.findshlibs or false) ||
      (f.backtrace_0_3_9.gimli-symbolize or false) ||
      (backtrace_0_3_9.gimli-symbolize or false);
    backtrace_0_3_9.gimli =
      (f.backtrace_0_3_9.gimli or false) ||
      (f.backtrace_0_3_9.gimli-symbolize or false) ||
      (backtrace_0_3_9.gimli-symbolize or false);
    backtrace_0_3_9.libbacktrace =
      (f.backtrace_0_3_9.libbacktrace or false) ||
      (f.backtrace_0_3_9.default or false) ||
      (backtrace_0_3_9.default or false);
    backtrace_0_3_9.libunwind =
      (f.backtrace_0_3_9.libunwind or false) ||
      (f.backtrace_0_3_9.default or false) ||
      (backtrace_0_3_9.default or false);
    backtrace_0_3_9.memmap =
      (f.backtrace_0_3_9.memmap or false) ||
      (f.backtrace_0_3_9.gimli-symbolize or false) ||
      (backtrace_0_3_9.gimli-symbolize or false);
    backtrace_0_3_9.object =
      (f.backtrace_0_3_9.object or false) ||
      (f.backtrace_0_3_9.gimli-symbolize or false) ||
      (backtrace_0_3_9.gimli-symbolize or false);
    backtrace_0_3_9.rustc-serialize =
      (f.backtrace_0_3_9.rustc-serialize or false) ||
      (f.backtrace_0_3_9.serialize-rustc or false) ||
      (backtrace_0_3_9.serialize-rustc or false);
    backtrace_0_3_9.serde =
      (f.backtrace_0_3_9.serde or false) ||
      (f.backtrace_0_3_9.serialize-serde or false) ||
      (backtrace_0_3_9.serialize-serde or false);
    backtrace_0_3_9.serde_derive =
      (f.backtrace_0_3_9.serde_derive or false) ||
      (f.backtrace_0_3_9.serialize-serde or false) ||
      (backtrace_0_3_9.serialize-serde or false);
    backtrace_0_3_9.winapi =
      (f.backtrace_0_3_9.winapi or false) ||
      (f.backtrace_0_3_9.dbghelp or false) ||
      (backtrace_0_3_9.dbghelp or false);
    backtrace_sys_0_1_24.default = true;
    cfg_if_0_1_5.default = true;
    libc_0_2_43.default = true;
    rustc_demangle_0_1_9.default = true;
    winapi_0_3_5.dbghelp = true;
    winapi_0_3_5.default = true;
    winapi_0_3_5.minwindef = true;
    winapi_0_3_5.processthreadsapi = true;
    winapi_0_3_5.std = true;
    winapi_0_3_5.winnt = true;
  }) [ cfg_if_0_1_5_features rustc_demangle_0_1_9_features backtrace_sys_0_1_24_features libc_0_2_43_features winapi_0_3_5_features ];
  backtrace_sys_0_1_24 = { features?(backtrace_sys_0_1_24_features {}) }: backtrace_sys_0_1_24_ {
    dependencies = mapFeatures features ([ libc_0_2_43 ]);
    buildDependencies = mapFeatures features ([ cc_1_0_25 ]);
  };
  backtrace_sys_0_1_24_features = f: updateFeatures f (rec {
    backtrace_sys_0_1_24.default = (f.backtrace_sys_0_1_24.default or true);
    cc_1_0_25.default = true;
    libc_0_2_43.default = true;
  }) [ libc_0_2_43_features cc_1_0_25_features ];
  bitflags_1_0_4 = { features?(bitflags_1_0_4_features {}) }: bitflags_1_0_4_ {
    features = mkFeatures (features.bitflags_1_0_4 or {});
  };
  bitflags_1_0_4_features = f: updateFeatures f (rec {
    bitflags_1_0_4.default = (f.bitflags_1_0_4.default or true);
  }) [];
  cargo_0_30_0 = { features?(cargo_0_30_0_features {}) }: cargo_0_30_0_ {
    dependencies = mapFeatures features ([ atty_0_2_11 clap_2_32_0 crates_io_0_18_0 crossbeam_utils_0_5_0 crypto_hash_0_3_1 curl_0_4_17 env_logger_0_5_13 failure_0_1_2 filetime_0_2_1 flate2_1_0_2 fs2_0_4_3 git2_0_7_5 git2_curl_0_8_1 glob_0_2_11 hex_0_3_2 home_0_3_3 ignore_0_4_4 jobserver_0_1_11 lazy_static_1_1_0 lazycell_1_1_0 libc_0_2_43 libgit2_sys_0_7_8 log_0_4_5 num_cpus_1_8_0 rustc_workspace_hack_1_0_0 rustfix_0_4_2 same_file_1_0_3 semver_0_9_0 serde_1_0_79 serde_derive_1_0_79 serde_ignored_0_0_4 serde_json_1_0_28 shell_escape_0_1_4 tar_0_4_16 tempfile_3_0_4 termcolor_1_0_4 toml_0_4_6 unicode_width_0_1_5 url_1_7_1 ])
      ++ (if kernel == "darwin" then mapFeatures features ([ core_foundation_0_6_1 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ miow_0_3_3 winapi_0_3_5 ]) else []);
    features = mkFeatures (features.cargo_0_30_0 or {});
  };
  cargo_0_30_0_features = f: updateFeatures f (rec {
    atty_0_2_11.default = true;
    cargo_0_30_0.default = (f.cargo_0_30_0.default or true);
    clap_2_32_0.default = true;
    core_foundation_0_6_1.default = true;
    core_foundation_0_6_1.mac_os_10_7_support = true;
    crates_io_0_18_0.default = true;
    crossbeam_utils_0_5_0.default = true;
    crypto_hash_0_3_1.default = true;
    curl_0_4_17.default = true;
    env_logger_0_5_13.default = true;
    failure_0_1_2.default = true;
    filetime_0_2_1.default = true;
    flate2_1_0_2.default = true;
    fs2_0_4_3.default = true;
    git2_0_7_5.default = true;
    git2_curl_0_8_1.default = true;
    glob_0_2_11.default = true;
    hex_0_3_2.default = true;
    home_0_3_3.default = true;
    ignore_0_4_4.default = true;
    jobserver_0_1_11.default = true;
    lazy_static_1_1_0.default = true;
    lazycell_1_1_0.default = true;
    libc_0_2_43.default = true;
    libgit2_sys_0_7_8.default = true;
    log_0_4_5.default = true;
    miow_0_3_3.default = true;
    num_cpus_1_8_0.default = true;
    rustc_workspace_hack_1_0_0.default = true;
    rustfix_0_4_2.default = true;
    same_file_1_0_3.default = true;
    semver_0_9_0.default = true;
    semver_0_9_0.serde = true;
    serde_1_0_79.default = true;
    serde_derive_1_0_79.default = true;
    serde_ignored_0_0_4.default = true;
    serde_json_1_0_28.default = true;
    shell_escape_0_1_4.default = true;
    tar_0_4_16.default = (f.tar_0_4_16.default or false);
    tempfile_3_0_4.default = true;
    termcolor_1_0_4.default = true;
    toml_0_4_6.default = true;
    unicode_width_0_1_5.default = true;
    url_1_7_1.default = true;
    winapi_0_3_5.basetsd = true;
    winapi_0_3_5.default = true;
    winapi_0_3_5.handleapi = true;
    winapi_0_3_5.jobapi = true;
    winapi_0_3_5.jobapi2 = true;
    winapi_0_3_5.memoryapi = true;
    winapi_0_3_5.minwindef = true;
    winapi_0_3_5.ntdef = true;
    winapi_0_3_5.ntstatus = true;
    winapi_0_3_5.processenv = true;
    winapi_0_3_5.processthreadsapi = true;
    winapi_0_3_5.psapi = true;
    winapi_0_3_5.synchapi = true;
    winapi_0_3_5.winbase = true;
    winapi_0_3_5.wincon = true;
    winapi_0_3_5.winerror = true;
    winapi_0_3_5.winnt = true;
  }) [ atty_0_2_11_features clap_2_32_0_features crates_io_0_18_0_features crossbeam_utils_0_5_0_features crypto_hash_0_3_1_features curl_0_4_17_features env_logger_0_5_13_features failure_0_1_2_features filetime_0_2_1_features flate2_1_0_2_features fs2_0_4_3_features git2_0_7_5_features git2_curl_0_8_1_features glob_0_2_11_features hex_0_3_2_features home_0_3_3_features ignore_0_4_4_features jobserver_0_1_11_features lazy_static_1_1_0_features lazycell_1_1_0_features libc_0_2_43_features libgit2_sys_0_7_8_features log_0_4_5_features num_cpus_1_8_0_features rustc_workspace_hack_1_0_0_features rustfix_0_4_2_features same_file_1_0_3_features semver_0_9_0_features serde_1_0_79_features serde_derive_1_0_79_features serde_ignored_0_0_4_features serde_json_1_0_28_features shell_escape_0_1_4_features tar_0_4_16_features tempfile_3_0_4_features termcolor_1_0_4_features toml_0_4_6_features unicode_width_0_1_5_features url_1_7_1_features core_foundation_0_6_1_features miow_0_3_3_features winapi_0_3_5_features ];
  cargo_vendor_0_1_16 = { features?(cargo_vendor_0_1_16_features {}) }: cargo_vendor_0_1_16_ {
    dependencies = mapFeatures features ([ cargo_0_30_0 docopt_1_0_1 env_logger_0_5_13 failure_0_1_2 serde_1_0_79 serde_derive_1_0_79 serde_json_1_0_28 toml_0_4_6 ]);
  };
  cargo_vendor_0_1_16_features = f: updateFeatures f (rec {
    cargo_0_30_0.default = true;
    cargo_vendor_0_1_16.default = (f.cargo_vendor_0_1_16.default or true);
    docopt_1_0_1.default = true;
    env_logger_0_5_13.default = true;
    failure_0_1_2.default = true;
    serde_1_0_79.default = true;
    serde_derive_1_0_79.default = true;
    serde_json_1_0_28.default = true;
    toml_0_4_6.default = true;
  }) [ cargo_0_30_0_features docopt_1_0_1_features env_logger_0_5_13_features failure_0_1_2_features serde_1_0_79_features serde_derive_1_0_79_features serde_json_1_0_28_features toml_0_4_6_features ];
  cc_1_0_25 = { features?(cc_1_0_25_features {}) }: cc_1_0_25_ {
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.cc_1_0_25 or {});
  };
  cc_1_0_25_features = f: updateFeatures f (rec {
    cc_1_0_25.default = (f.cc_1_0_25.default or true);
    cc_1_0_25.rayon =
      (f.cc_1_0_25.rayon or false) ||
      (f.cc_1_0_25.parallel or false) ||
      (cc_1_0_25.parallel or false);
  }) [];
  cfg_if_0_1_5 = { features?(cfg_if_0_1_5_features {}) }: cfg_if_0_1_5_ {};
  cfg_if_0_1_5_features = f: updateFeatures f (rec {
    cfg_if_0_1_5.default = (f.cfg_if_0_1_5.default or true);
  }) [];
  clap_2_32_0 = { features?(clap_2_32_0_features {}) }: clap_2_32_0_ {
    dependencies = mapFeatures features ([ bitflags_1_0_4 textwrap_0_10_0 unicode_width_0_1_5 ]
      ++ (if features.clap_2_32_0.atty or false then [ atty_0_2_11 ] else [])
      ++ (if features.clap_2_32_0.strsim or false then [ strsim_0_7_0 ] else [])
      ++ (if features.clap_2_32_0.vec_map or false then [ vec_map_0_8_1 ] else []))
      ++ (if !(kernel == "windows") then mapFeatures features ([ ]
      ++ (if features.clap_2_32_0.ansi_term or false then [ ansi_term_0_11_0 ] else [])) else []);
    features = mkFeatures (features.clap_2_32_0 or {});
  };
  clap_2_32_0_features = f: updateFeatures f (rec {
    ansi_term_0_11_0.default = true;
    atty_0_2_11.default = true;
    bitflags_1_0_4.default = true;
    clap_2_32_0.ansi_term =
      (f.clap_2_32_0.ansi_term or false) ||
      (f.clap_2_32_0.color or false) ||
      (clap_2_32_0.color or false);
    clap_2_32_0.atty =
      (f.clap_2_32_0.atty or false) ||
      (f.clap_2_32_0.color or false) ||
      (clap_2_32_0.color or false);
    clap_2_32_0.clippy =
      (f.clap_2_32_0.clippy or false) ||
      (f.clap_2_32_0.lints or false) ||
      (clap_2_32_0.lints or false);
    clap_2_32_0.color =
      (f.clap_2_32_0.color or false) ||
      (f.clap_2_32_0.default or false) ||
      (clap_2_32_0.default or false);
    clap_2_32_0.default = (f.clap_2_32_0.default or true);
    clap_2_32_0.strsim =
      (f.clap_2_32_0.strsim or false) ||
      (f.clap_2_32_0.suggestions or false) ||
      (clap_2_32_0.suggestions or false);
    clap_2_32_0.suggestions =
      (f.clap_2_32_0.suggestions or false) ||
      (f.clap_2_32_0.default or false) ||
      (clap_2_32_0.default or false);
    clap_2_32_0.term_size =
      (f.clap_2_32_0.term_size or false) ||
      (f.clap_2_32_0.wrap_help or false) ||
      (clap_2_32_0.wrap_help or false);
    clap_2_32_0.vec_map =
      (f.clap_2_32_0.vec_map or false) ||
      (f.clap_2_32_0.default or false) ||
      (clap_2_32_0.default or false);
    clap_2_32_0.yaml =
      (f.clap_2_32_0.yaml or false) ||
      (f.clap_2_32_0.doc or false) ||
      (clap_2_32_0.doc or false);
    clap_2_32_0.yaml-rust =
      (f.clap_2_32_0.yaml-rust or false) ||
      (f.clap_2_32_0.yaml or false) ||
      (clap_2_32_0.yaml or false);
    strsim_0_7_0.default = true;
    textwrap_0_10_0.default = true;
    textwrap_0_10_0.term_size =
      (f.textwrap_0_10_0.term_size or false) ||
      (clap_2_32_0.wrap_help or false) ||
      (f.clap_2_32_0.wrap_help or false);
    unicode_width_0_1_5.default = true;
    vec_map_0_8_1.default = true;
  }) [ atty_0_2_11_features bitflags_1_0_4_features strsim_0_7_0_features textwrap_0_10_0_features unicode_width_0_1_5_features vec_map_0_8_1_features ansi_term_0_11_0_features ];
  cloudabi_0_0_3 = { features?(cloudabi_0_0_3_features {}) }: cloudabi_0_0_3_ {
    dependencies = mapFeatures features ([ ]
      ++ (if features.cloudabi_0_0_3.bitflags or false then [ bitflags_1_0_4 ] else []));
    features = mkFeatures (features.cloudabi_0_0_3 or {});
  };
  cloudabi_0_0_3_features = f: updateFeatures f (rec {
    bitflags_1_0_4.default = true;
    cloudabi_0_0_3.bitflags =
      (f.cloudabi_0_0_3.bitflags or false) ||
      (f.cloudabi_0_0_3.default or false) ||
      (cloudabi_0_0_3.default or false);
    cloudabi_0_0_3.default = (f.cloudabi_0_0_3.default or true);
  }) [ bitflags_1_0_4_features ];
  commoncrypto_0_2_0 = { features?(commoncrypto_0_2_0_features {}) }: commoncrypto_0_2_0_ {
    dependencies = mapFeatures features ([ commoncrypto_sys_0_2_0 ]);
    features = mkFeatures (features.commoncrypto_0_2_0 or {});
  };
  commoncrypto_0_2_0_features = f: updateFeatures f (rec {
    commoncrypto_0_2_0.clippy =
      (f.commoncrypto_0_2_0.clippy or false) ||
      (f.commoncrypto_0_2_0.lint or false) ||
      (commoncrypto_0_2_0.lint or false);
    commoncrypto_0_2_0.default = (f.commoncrypto_0_2_0.default or true);
    commoncrypto_sys_0_2_0.default = true;
  }) [ commoncrypto_sys_0_2_0_features ];
  commoncrypto_sys_0_2_0 = { features?(commoncrypto_sys_0_2_0_features {}) }: commoncrypto_sys_0_2_0_ {
    dependencies = mapFeatures features ([ libc_0_2_43 ]);
    features = mkFeatures (features.commoncrypto_sys_0_2_0 or {});
  };
  commoncrypto_sys_0_2_0_features = f: updateFeatures f (rec {
    commoncrypto_sys_0_2_0.clippy =
      (f.commoncrypto_sys_0_2_0.clippy or false) ||
      (f.commoncrypto_sys_0_2_0.lint or false) ||
      (commoncrypto_sys_0_2_0.lint or false);
    commoncrypto_sys_0_2_0.default = (f.commoncrypto_sys_0_2_0.default or true);
    libc_0_2_43.default = true;
  }) [ libc_0_2_43_features ];
  core_foundation_0_6_1 = { features?(core_foundation_0_6_1_features {}) }: core_foundation_0_6_1_ {
    dependencies = mapFeatures features ([ core_foundation_sys_0_6_1 libc_0_2_43 ]);
    features = mkFeatures (features.core_foundation_0_6_1 or {});
  };
  core_foundation_0_6_1_features = f: updateFeatures f (rec {
    core_foundation_0_6_1.chrono =
      (f.core_foundation_0_6_1.chrono or false) ||
      (f.core_foundation_0_6_1.with-chrono or false) ||
      (core_foundation_0_6_1.with-chrono or false);
    core_foundation_0_6_1.default = (f.core_foundation_0_6_1.default or true);
    core_foundation_0_6_1.uuid =
      (f.core_foundation_0_6_1.uuid or false) ||
      (f.core_foundation_0_6_1.with-uuid or false) ||
      (core_foundation_0_6_1.with-uuid or false);
    core_foundation_sys_0_6_1.default = true;
    core_foundation_sys_0_6_1.mac_os_10_7_support =
      (f.core_foundation_sys_0_6_1.mac_os_10_7_support or false) ||
      (core_foundation_0_6_1.mac_os_10_7_support or false) ||
      (f.core_foundation_0_6_1.mac_os_10_7_support or false);
    core_foundation_sys_0_6_1.mac_os_10_8_features =
      (f.core_foundation_sys_0_6_1.mac_os_10_8_features or false) ||
      (core_foundation_0_6_1.mac_os_10_8_features or false) ||
      (f.core_foundation_0_6_1.mac_os_10_8_features or false);
    libc_0_2_43.default = true;
  }) [ core_foundation_sys_0_6_1_features libc_0_2_43_features ];
  core_foundation_sys_0_6_1 = { features?(core_foundation_sys_0_6_1_features {}) }: core_foundation_sys_0_6_1_ {
    features = mkFeatures (features.core_foundation_sys_0_6_1 or {});
  };
  core_foundation_sys_0_6_1_features = f: updateFeatures f (rec {
    core_foundation_sys_0_6_1.default = (f.core_foundation_sys_0_6_1.default or true);
  }) [];
  crates_io_0_18_0 = { features?(crates_io_0_18_0_features {}) }: crates_io_0_18_0_ {
    dependencies = mapFeatures features ([ curl_0_4_17 failure_0_1_2 serde_1_0_79 serde_derive_1_0_79 serde_json_1_0_28 url_1_7_1 ]);
  };
  crates_io_0_18_0_features = f: updateFeatures f (rec {
    crates_io_0_18_0.default = (f.crates_io_0_18_0.default or true);
    curl_0_4_17.default = true;
    failure_0_1_2.default = true;
    serde_1_0_79.default = true;
    serde_derive_1_0_79.default = true;
    serde_json_1_0_28.default = true;
    url_1_7_1.default = true;
  }) [ curl_0_4_17_features failure_0_1_2_features serde_1_0_79_features serde_derive_1_0_79_features serde_json_1_0_28_features url_1_7_1_features ];
  crossbeam_channel_0_2_6 = { features?(crossbeam_channel_0_2_6_features {}) }: crossbeam_channel_0_2_6_ {
    dependencies = mapFeatures features ([ crossbeam_epoch_0_6_0 crossbeam_utils_0_5_0 parking_lot_0_6_4 rand_0_5_5 smallvec_0_6_5 ]);
  };
  crossbeam_channel_0_2_6_features = f: updateFeatures f (rec {
    crossbeam_channel_0_2_6.default = (f.crossbeam_channel_0_2_6.default or true);
    crossbeam_epoch_0_6_0.default = true;
    crossbeam_utils_0_5_0.default = true;
    parking_lot_0_6_4.default = true;
    rand_0_5_5.default = true;
    smallvec_0_6_5.default = true;
  }) [ crossbeam_epoch_0_6_0_features crossbeam_utils_0_5_0_features parking_lot_0_6_4_features rand_0_5_5_features smallvec_0_6_5_features ];
  crossbeam_epoch_0_6_0 = { features?(crossbeam_epoch_0_6_0_features {}) }: crossbeam_epoch_0_6_0_ {
    dependencies = mapFeatures features ([ arrayvec_0_4_7 cfg_if_0_1_5 crossbeam_utils_0_5_0 memoffset_0_2_1 scopeguard_0_3_3 ]
      ++ (if features.crossbeam_epoch_0_6_0.lazy_static or false then [ lazy_static_1_1_0 ] else []));
    features = mkFeatures (features.crossbeam_epoch_0_6_0 or {});
  };
  crossbeam_epoch_0_6_0_features = f: updateFeatures f (rec {
    arrayvec_0_4_7.default = (f.arrayvec_0_4_7.default or false);
    arrayvec_0_4_7.use_union =
      (f.arrayvec_0_4_7.use_union or false) ||
      (crossbeam_epoch_0_6_0.nightly or false) ||
      (f.crossbeam_epoch_0_6_0.nightly or false);
    cfg_if_0_1_5.default = true;
    crossbeam_epoch_0_6_0.default = (f.crossbeam_epoch_0_6_0.default or true);
    crossbeam_epoch_0_6_0.lazy_static =
      (f.crossbeam_epoch_0_6_0.lazy_static or false) ||
      (f.crossbeam_epoch_0_6_0.use_std or false) ||
      (crossbeam_epoch_0_6_0.use_std or false);
    crossbeam_epoch_0_6_0.use_std =
      (f.crossbeam_epoch_0_6_0.use_std or false) ||
      (f.crossbeam_epoch_0_6_0.default or false) ||
      (crossbeam_epoch_0_6_0.default or false);
    crossbeam_utils_0_5_0.default = (f.crossbeam_utils_0_5_0.default or false);
    crossbeam_utils_0_5_0.use_std =
      (f.crossbeam_utils_0_5_0.use_std or false) ||
      (crossbeam_epoch_0_6_0.use_std or false) ||
      (f.crossbeam_epoch_0_6_0.use_std or false);
    lazy_static_1_1_0.default = true;
    memoffset_0_2_1.default = true;
    scopeguard_0_3_3.default = (f.scopeguard_0_3_3.default or false);
  }) [ arrayvec_0_4_7_features cfg_if_0_1_5_features crossbeam_utils_0_5_0_features lazy_static_1_1_0_features memoffset_0_2_1_features scopeguard_0_3_3_features ];
  crossbeam_utils_0_5_0 = { features?(crossbeam_utils_0_5_0_features {}) }: crossbeam_utils_0_5_0_ {
    features = mkFeatures (features.crossbeam_utils_0_5_0 or {});
  };
  crossbeam_utils_0_5_0_features = f: updateFeatures f (rec {
    crossbeam_utils_0_5_0.default = (f.crossbeam_utils_0_5_0.default or true);
    crossbeam_utils_0_5_0.use_std =
      (f.crossbeam_utils_0_5_0.use_std or false) ||
      (f.crossbeam_utils_0_5_0.default or false) ||
      (crossbeam_utils_0_5_0.default or false);
  }) [];
  crypto_hash_0_3_1 = { features?(crypto_hash_0_3_1_features {}) }: crypto_hash_0_3_1_ {
    dependencies = mapFeatures features ([ hex_0_3_2 ])
      ++ (if !(kernel == "windows" || kernel == "darwin") then mapFeatures features ([ openssl_0_10_12 ]) else [])
      ++ (if kernel == "darwin" then mapFeatures features ([ commoncrypto_0_2_0 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ winapi_0_3_5 ]) else []);
  };
  crypto_hash_0_3_1_features = f: updateFeatures f (rec {
    commoncrypto_0_2_0.default = true;
    crypto_hash_0_3_1.default = (f.crypto_hash_0_3_1.default or true);
    hex_0_3_2.default = true;
    openssl_0_10_12.default = true;
    winapi_0_3_5.default = true;
    winapi_0_3_5.minwindef = true;
    winapi_0_3_5.wincrypt = true;
  }) [ hex_0_3_2_features openssl_0_10_12_features commoncrypto_0_2_0_features winapi_0_3_5_features ];
  curl_0_4_17 = { features?(curl_0_4_17_features {}) }: curl_0_4_17_ {
    dependencies = mapFeatures features ([ curl_sys_0_4_11 libc_0_2_43 socket2_0_3_8 ])
      ++ (if (kernel == "linux" || kernel == "darwin") && !(kernel == "darwin") then mapFeatures features ([ openssl_probe_0_1_2 openssl_sys_0_9_36 ]) else [])
      ++ (if abi == "msvc" then mapFeatures features ([ kernel32_sys_0_2_2 schannel_0_1_13 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ winapi_0_2_8 ]) else []);
    features = mkFeatures (features.curl_0_4_17 or {});
  };
  curl_0_4_17_features = f: updateFeatures f (rec {
    curl_0_4_17.default = (f.curl_0_4_17.default or true);
    curl_sys_0_4_11.default = true;
    curl_sys_0_4_11.http2 =
      (f.curl_sys_0_4_11.http2 or false) ||
      (curl_0_4_17.http2 or false) ||
      (f.curl_0_4_17.http2 or false);
    kernel32_sys_0_2_2.default = true;
    libc_0_2_43.default = true;
    openssl_probe_0_1_2.default = true;
    openssl_sys_0_9_36.default = true;
    schannel_0_1_13.default = true;
    socket2_0_3_8.default = true;
    winapi_0_2_8.default = true;
  }) [ curl_sys_0_4_11_features libc_0_2_43_features socket2_0_3_8_features openssl_probe_0_1_2_features openssl_sys_0_9_36_features kernel32_sys_0_2_2_features schannel_0_1_13_features winapi_0_2_8_features ];
  curl_sys_0_4_11 = { features?(curl_sys_0_4_11_features {}) }: curl_sys_0_4_11_ {
    dependencies = mapFeatures features ([ libc_0_2_43 libz_sys_1_0_22 ])
      ++ (if (kernel == "linux" || kernel == "darwin") && !(kernel == "darwin") then mapFeatures features ([ openssl_sys_0_9_36 ]) else [])
      ++ (if abi == "msvc" then mapFeatures features ([]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ winapi_0_3_5 ]) else []);
    buildDependencies = mapFeatures features ([ cc_1_0_25 pkg_config_0_3_14 ]);
    features = mkFeatures (features.curl_sys_0_4_11 or {});
  };
  curl_sys_0_4_11_features = f: updateFeatures f (rec {
    cc_1_0_25.default = true;
    curl_sys_0_4_11.default = (f.curl_sys_0_4_11.default or true);
    curl_sys_0_4_11.libnghttp2-sys =
      (f.curl_sys_0_4_11.libnghttp2-sys or false) ||
      (f.curl_sys_0_4_11.http2 or false) ||
      (curl_sys_0_4_11.http2 or false);
    libc_0_2_43.default = true;
    libz_sys_1_0_22.default = true;
    openssl_sys_0_9_36.default = true;
    pkg_config_0_3_14.default = true;
    winapi_0_3_5.default = true;
    winapi_0_3_5.winsock2 = true;
    winapi_0_3_5.ws2def = true;
  }) [ libc_0_2_43_features libz_sys_1_0_22_features cc_1_0_25_features pkg_config_0_3_14_features openssl_sys_0_9_36_features winapi_0_3_5_features ];
  docopt_1_0_1 = { features?(docopt_1_0_1_features {}) }: docopt_1_0_1_ {
    dependencies = mapFeatures features ([ lazy_static_1_1_0 regex_1_0_5 serde_1_0_79 serde_derive_1_0_79 strsim_0_7_0 ]);
  };
  docopt_1_0_1_features = f: updateFeatures f (rec {
    docopt_1_0_1.default = (f.docopt_1_0_1.default or true);
    lazy_static_1_1_0.default = true;
    regex_1_0_5.default = true;
    serde_1_0_79.default = true;
    serde_derive_1_0_79.default = true;
    strsim_0_7_0.default = true;
  }) [ lazy_static_1_1_0_features regex_1_0_5_features serde_1_0_79_features serde_derive_1_0_79_features strsim_0_7_0_features ];
  env_logger_0_5_13 = { features?(env_logger_0_5_13_features {}) }: env_logger_0_5_13_ {
    dependencies = mapFeatures features ([ atty_0_2_11 humantime_1_1_1 log_0_4_5 termcolor_1_0_4 ]
      ++ (if features.env_logger_0_5_13.regex or false then [ regex_1_0_5 ] else []));
    features = mkFeatures (features.env_logger_0_5_13 or {});
  };
  env_logger_0_5_13_features = f: updateFeatures f (rec {
    atty_0_2_11.default = true;
    env_logger_0_5_13.default = (f.env_logger_0_5_13.default or true);
    env_logger_0_5_13.regex =
      (f.env_logger_0_5_13.regex or false) ||
      (f.env_logger_0_5_13.default or false) ||
      (env_logger_0_5_13.default or false);
    humantime_1_1_1.default = true;
    log_0_4_5.default = true;
    log_0_4_5.std = true;
    regex_1_0_5.default = true;
    termcolor_1_0_4.default = true;
  }) [ atty_0_2_11_features humantime_1_1_1_features log_0_4_5_features regex_1_0_5_features termcolor_1_0_4_features ];
  failure_0_1_2 = { features?(failure_0_1_2_features {}) }: failure_0_1_2_ {
    dependencies = mapFeatures features ([ ]
      ++ (if features.failure_0_1_2.backtrace or false then [ backtrace_0_3_9 ] else [])
      ++ (if features.failure_0_1_2.failure_derive or false then [ failure_derive_0_1_2 ] else []));
    features = mkFeatures (features.failure_0_1_2 or {});
  };
  failure_0_1_2_features = f: updateFeatures f (rec {
    backtrace_0_3_9.default = true;
    failure_0_1_2.backtrace =
      (f.failure_0_1_2.backtrace or false) ||
      (f.failure_0_1_2.std or false) ||
      (failure_0_1_2.std or false);
    failure_0_1_2.default = (f.failure_0_1_2.default or true);
    failure_0_1_2.derive =
      (f.failure_0_1_2.derive or false) ||
      (f.failure_0_1_2.default or false) ||
      (failure_0_1_2.default or false);
    failure_0_1_2.failure_derive =
      (f.failure_0_1_2.failure_derive or false) ||
      (f.failure_0_1_2.derive or false) ||
      (failure_0_1_2.derive or false);
    failure_0_1_2.std =
      (f.failure_0_1_2.std or false) ||
      (f.failure_0_1_2.default or false) ||
      (failure_0_1_2.default or false);
    failure_derive_0_1_2.default = true;
  }) [ backtrace_0_3_9_features failure_derive_0_1_2_features ];
  failure_derive_0_1_2 = { features?(failure_derive_0_1_2_features {}) }: failure_derive_0_1_2_ {
    dependencies = mapFeatures features ([ proc_macro2_0_4_19 quote_0_6_8 syn_0_14_9 synstructure_0_9_0 ]);
    features = mkFeatures (features.failure_derive_0_1_2 or {});
  };
  failure_derive_0_1_2_features = f: updateFeatures f (rec {
    failure_derive_0_1_2.default = (f.failure_derive_0_1_2.default or true);
    proc_macro2_0_4_19.default = true;
    quote_0_6_8.default = true;
    syn_0_14_9.default = true;
    synstructure_0_9_0.default = true;
  }) [ proc_macro2_0_4_19_features quote_0_6_8_features syn_0_14_9_features synstructure_0_9_0_features ];
  filetime_0_2_1 = { features?(filetime_0_2_1_features {}) }: filetime_0_2_1_ {
    dependencies = mapFeatures features ([ cfg_if_0_1_5 ])
      ++ (if kernel == "redox" then mapFeatures features ([ redox_syscall_0_1_40 ]) else [])
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ libc_0_2_43 ]) else []);
  };
  filetime_0_2_1_features = f: updateFeatures f (rec {
    cfg_if_0_1_5.default = true;
    filetime_0_2_1.default = (f.filetime_0_2_1.default or true);
    libc_0_2_43.default = true;
    redox_syscall_0_1_40.default = true;
  }) [ cfg_if_0_1_5_features redox_syscall_0_1_40_features libc_0_2_43_features ];
  flate2_1_0_2 = { features?(flate2_1_0_2_features {}) }: flate2_1_0_2_ {
    dependencies = mapFeatures features ([ libc_0_2_43 ]
      ++ (if features.flate2_1_0_2.miniz-sys or false then [ miniz_sys_0_1_10 ] else []));
    features = mkFeatures (features.flate2_1_0_2 or {});
  };
  flate2_1_0_2_features = f: updateFeatures f (rec {
    flate2_1_0_2.default = (f.flate2_1_0_2.default or true);
    flate2_1_0_2.futures =
      (f.flate2_1_0_2.futures or false) ||
      (f.flate2_1_0_2.tokio or false) ||
      (flate2_1_0_2.tokio or false);
    flate2_1_0_2.libz-sys =
      (f.flate2_1_0_2.libz-sys or false) ||
      (f.flate2_1_0_2.zlib or false) ||
      (flate2_1_0_2.zlib or false);
    flate2_1_0_2.miniz-sys =
      (f.flate2_1_0_2.miniz-sys or false) ||
      (f.flate2_1_0_2.default or false) ||
      (flate2_1_0_2.default or false);
    flate2_1_0_2.miniz_oxide_c_api =
      (f.flate2_1_0_2.miniz_oxide_c_api or false) ||
      (f.flate2_1_0_2.rust_backend or false) ||
      (flate2_1_0_2.rust_backend or false);
    flate2_1_0_2.tokio-io =
      (f.flate2_1_0_2.tokio-io or false) ||
      (f.flate2_1_0_2.tokio or false) ||
      (flate2_1_0_2.tokio or false);
    libc_0_2_43.default = true;
    miniz_sys_0_1_10.default = true;
  }) [ libc_0_2_43_features miniz_sys_0_1_10_features ];
  fnv_1_0_6 = { features?(fnv_1_0_6_features {}) }: fnv_1_0_6_ {};
  fnv_1_0_6_features = f: updateFeatures f (rec {
    fnv_1_0_6.default = (f.fnv_1_0_6.default or true);
  }) [];
  foreign_types_0_3_2 = { features?(foreign_types_0_3_2_features {}) }: foreign_types_0_3_2_ {
    dependencies = mapFeatures features ([ foreign_types_shared_0_1_1 ]);
  };
  foreign_types_0_3_2_features = f: updateFeatures f (rec {
    foreign_types_0_3_2.default = (f.foreign_types_0_3_2.default or true);
    foreign_types_shared_0_1_1.default = true;
  }) [ foreign_types_shared_0_1_1_features ];
  foreign_types_shared_0_1_1 = { features?(foreign_types_shared_0_1_1_features {}) }: foreign_types_shared_0_1_1_ {};
  foreign_types_shared_0_1_1_features = f: updateFeatures f (rec {
    foreign_types_shared_0_1_1.default = (f.foreign_types_shared_0_1_1.default or true);
  }) [];
  fs2_0_4_3 = { features?(fs2_0_4_3_features {}) }: fs2_0_4_3_ {
    dependencies = (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ libc_0_2_43 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ winapi_0_3_5 ]) else []);
  };
  fs2_0_4_3_features = f: updateFeatures f (rec {
    fs2_0_4_3.default = (f.fs2_0_4_3.default or true);
    libc_0_2_43.default = true;
    winapi_0_3_5.default = true;
    winapi_0_3_5.fileapi = true;
    winapi_0_3_5.handleapi = true;
    winapi_0_3_5.processthreadsapi = true;
    winapi_0_3_5.std = true;
    winapi_0_3_5.winbase = true;
    winapi_0_3_5.winerror = true;
  }) [ libc_0_2_43_features winapi_0_3_5_features ];
  fuchsia_zircon_0_3_3 = { features?(fuchsia_zircon_0_3_3_features {}) }: fuchsia_zircon_0_3_3_ {
    dependencies = mapFeatures features ([ bitflags_1_0_4 fuchsia_zircon_sys_0_3_3 ]);
  };
  fuchsia_zircon_0_3_3_features = f: updateFeatures f (rec {
    bitflags_1_0_4.default = true;
    fuchsia_zircon_0_3_3.default = (f.fuchsia_zircon_0_3_3.default or true);
    fuchsia_zircon_sys_0_3_3.default = true;
  }) [ bitflags_1_0_4_features fuchsia_zircon_sys_0_3_3_features ];
  fuchsia_zircon_sys_0_3_3 = { features?(fuchsia_zircon_sys_0_3_3_features {}) }: fuchsia_zircon_sys_0_3_3_ {};
  fuchsia_zircon_sys_0_3_3_features = f: updateFeatures f (rec {
    fuchsia_zircon_sys_0_3_3.default = (f.fuchsia_zircon_sys_0_3_3.default or true);
  }) [];
  git2_0_7_5 = { features?(git2_0_7_5_features {}) }: git2_0_7_5_ {
    dependencies = mapFeatures features ([ bitflags_1_0_4 libc_0_2_43 libgit2_sys_0_7_8 log_0_4_5 url_1_7_1 ])
      ++ (if (kernel == "linux" || kernel == "darwin") && !(kernel == "darwin") then mapFeatures features ([ ]
      ++ (if features.git2_0_7_5.openssl-probe or false then [ openssl_probe_0_1_2 ] else [])
      ++ (if features.git2_0_7_5.openssl-sys or false then [ openssl_sys_0_9_36 ] else [])) else []);
    features = mkFeatures (features.git2_0_7_5 or {});
  };
  git2_0_7_5_features = f: updateFeatures f (rec {
    bitflags_1_0_4.default = true;
    git2_0_7_5.curl =
      (f.git2_0_7_5.curl or false) ||
      (f.git2_0_7_5.default or false) ||
      (git2_0_7_5.default or false);
    git2_0_7_5.default = (f.git2_0_7_5.default or true);
    git2_0_7_5.https =
      (f.git2_0_7_5.https or false) ||
      (f.git2_0_7_5.default or false) ||
      (git2_0_7_5.default or false);
    git2_0_7_5.openssl-probe =
      (f.git2_0_7_5.openssl-probe or false) ||
      (f.git2_0_7_5.https or false) ||
      (git2_0_7_5.https or false);
    git2_0_7_5.openssl-sys =
      (f.git2_0_7_5.openssl-sys or false) ||
      (f.git2_0_7_5.https or false) ||
      (git2_0_7_5.https or false);
    git2_0_7_5.ssh =
      (f.git2_0_7_5.ssh or false) ||
      (f.git2_0_7_5.default or false) ||
      (git2_0_7_5.default or false);
    git2_0_7_5.ssh_key_from_memory =
      (f.git2_0_7_5.ssh_key_from_memory or false) ||
      (f.git2_0_7_5.default or false) ||
      (git2_0_7_5.default or false);
    libc_0_2_43.default = true;
    libgit2_sys_0_7_8.curl =
      (f.libgit2_sys_0_7_8.curl or false) ||
      (git2_0_7_5.curl or false) ||
      (f.git2_0_7_5.curl or false);
    libgit2_sys_0_7_8.default = true;
    libgit2_sys_0_7_8.https =
      (f.libgit2_sys_0_7_8.https or false) ||
      (git2_0_7_5.https or false) ||
      (f.git2_0_7_5.https or false);
    libgit2_sys_0_7_8.ssh =
      (f.libgit2_sys_0_7_8.ssh or false) ||
      (git2_0_7_5.ssh or false) ||
      (f.git2_0_7_5.ssh or false);
    libgit2_sys_0_7_8.ssh_key_from_memory =
      (f.libgit2_sys_0_7_8.ssh_key_from_memory or false) ||
      (git2_0_7_5.ssh_key_from_memory or false) ||
      (f.git2_0_7_5.ssh_key_from_memory or false);
    log_0_4_5.default = true;
    openssl_probe_0_1_2.default = true;
    openssl_sys_0_9_36.default = true;
    url_1_7_1.default = true;
  }) [ bitflags_1_0_4_features libc_0_2_43_features libgit2_sys_0_7_8_features log_0_4_5_features url_1_7_1_features openssl_probe_0_1_2_features openssl_sys_0_9_36_features ];
  git2_curl_0_8_1 = { features?(git2_curl_0_8_1_features {}) }: git2_curl_0_8_1_ {
    dependencies = mapFeatures features ([ curl_0_4_17 git2_0_7_5 log_0_4_5 url_1_7_1 ]);
  };
  git2_curl_0_8_1_features = f: updateFeatures f (rec {
    curl_0_4_17.default = true;
    git2_0_7_5.default = (f.git2_0_7_5.default or false);
    git2_curl_0_8_1.default = (f.git2_curl_0_8_1.default or true);
    log_0_4_5.default = true;
    url_1_7_1.default = true;
  }) [ curl_0_4_17_features git2_0_7_5_features log_0_4_5_features url_1_7_1_features ];
  glob_0_2_11 = { features?(glob_0_2_11_features {}) }: glob_0_2_11_ {};
  glob_0_2_11_features = f: updateFeatures f (rec {
    glob_0_2_11.default = (f.glob_0_2_11.default or true);
  }) [];
  globset_0_4_2 = { features?(globset_0_4_2_features {}) }: globset_0_4_2_ {
    dependencies = mapFeatures features ([ aho_corasick_0_6_8 fnv_1_0_6 log_0_4_5 memchr_2_1_0 regex_1_0_5 ]);
    features = mkFeatures (features.globset_0_4_2 or {});
  };
  globset_0_4_2_features = f: updateFeatures f (rec {
    aho_corasick_0_6_8.default = true;
    fnv_1_0_6.default = true;
    globset_0_4_2.default = (f.globset_0_4_2.default or true);
    log_0_4_5.default = true;
    memchr_2_1_0.default = true;
    regex_1_0_5.default = true;
  }) [ aho_corasick_0_6_8_features fnv_1_0_6_features log_0_4_5_features memchr_2_1_0_features regex_1_0_5_features ];
  hex_0_3_2 = { features?(hex_0_3_2_features {}) }: hex_0_3_2_ {
    features = mkFeatures (features.hex_0_3_2 or {});
  };
  hex_0_3_2_features = f: updateFeatures f (rec {
    hex_0_3_2.default = (f.hex_0_3_2.default or true);
  }) [];
  home_0_3_3 = { features?(home_0_3_3_features {}) }: home_0_3_3_ {
    dependencies = (if kernel == "windows" then mapFeatures features ([ scopeguard_0_3_3 winapi_0_3_5 ]) else []);
  };
  home_0_3_3_features = f: updateFeatures f (rec {
    home_0_3_3.default = (f.home_0_3_3.default or true);
    scopeguard_0_3_3.default = true;
    winapi_0_3_5.default = true;
    winapi_0_3_5.errhandlingapi = true;
    winapi_0_3_5.handleapi = true;
    winapi_0_3_5.processthreadsapi = true;
    winapi_0_3_5.std = true;
    winapi_0_3_5.userenv = true;
    winapi_0_3_5.winerror = true;
    winapi_0_3_5.winnt = true;
  }) [ scopeguard_0_3_3_features winapi_0_3_5_features ];
  humantime_1_1_1 = { features?(humantime_1_1_1_features {}) }: humantime_1_1_1_ {
    dependencies = mapFeatures features ([ quick_error_1_2_2 ]);
  };
  humantime_1_1_1_features = f: updateFeatures f (rec {
    humantime_1_1_1.default = (f.humantime_1_1_1.default or true);
    quick_error_1_2_2.default = true;
  }) [ quick_error_1_2_2_features ];
  idna_0_1_5 = { features?(idna_0_1_5_features {}) }: idna_0_1_5_ {
    dependencies = mapFeatures features ([ matches_0_1_8 unicode_bidi_0_3_4 unicode_normalization_0_1_7 ]);
  };
  idna_0_1_5_features = f: updateFeatures f (rec {
    idna_0_1_5.default = (f.idna_0_1_5.default or true);
    matches_0_1_8.default = true;
    unicode_bidi_0_3_4.default = true;
    unicode_normalization_0_1_7.default = true;
  }) [ matches_0_1_8_features unicode_bidi_0_3_4_features unicode_normalization_0_1_7_features ];
  ignore_0_4_4 = { features?(ignore_0_4_4_features {}) }: ignore_0_4_4_ {
    dependencies = mapFeatures features ([ crossbeam_channel_0_2_6 globset_0_4_2 lazy_static_1_1_0 log_0_4_5 memchr_2_1_0 regex_1_0_5 same_file_1_0_3 thread_local_0_3_6 walkdir_2_2_5 ])
      ++ (if kernel == "windows" then mapFeatures features ([ winapi_util_0_1_1 ]) else []);
    features = mkFeatures (features.ignore_0_4_4 or {});
  };
  ignore_0_4_4_features = f: updateFeatures f (rec {
    crossbeam_channel_0_2_6.default = true;
    globset_0_4_2.default = true;
    globset_0_4_2.simd-accel =
      (f.globset_0_4_2.simd-accel or false) ||
      (ignore_0_4_4.simd-accel or false) ||
      (f.ignore_0_4_4.simd-accel or false);
    ignore_0_4_4.default = (f.ignore_0_4_4.default or true);
    lazy_static_1_1_0.default = true;
    log_0_4_5.default = true;
    memchr_2_1_0.default = true;
    regex_1_0_5.default = true;
    same_file_1_0_3.default = true;
    thread_local_0_3_6.default = true;
    walkdir_2_2_5.default = true;
    winapi_util_0_1_1.default = true;
  }) [ crossbeam_channel_0_2_6_features globset_0_4_2_features lazy_static_1_1_0_features log_0_4_5_features memchr_2_1_0_features regex_1_0_5_features same_file_1_0_3_features thread_local_0_3_6_features walkdir_2_2_5_features winapi_util_0_1_1_features ];
  itoa_0_4_3 = { features?(itoa_0_4_3_features {}) }: itoa_0_4_3_ {
    features = mkFeatures (features.itoa_0_4_3 or {});
  };
  itoa_0_4_3_features = f: updateFeatures f (rec {
    itoa_0_4_3.default = (f.itoa_0_4_3.default or true);
    itoa_0_4_3.std =
      (f.itoa_0_4_3.std or false) ||
      (f.itoa_0_4_3.default or false) ||
      (itoa_0_4_3.default or false);
  }) [];
  jobserver_0_1_11 = { features?(jobserver_0_1_11_features {}) }: jobserver_0_1_11_ {
    dependencies = mapFeatures features ([ log_0_4_5 ])
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ libc_0_2_43 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ rand_0_4_3 ]) else []);
  };
  jobserver_0_1_11_features = f: updateFeatures f (rec {
    jobserver_0_1_11.default = (f.jobserver_0_1_11.default or true);
    libc_0_2_43.default = true;
    log_0_4_5.default = true;
    rand_0_4_3.default = true;
  }) [ log_0_4_5_features libc_0_2_43_features rand_0_4_3_features ];
  kernel32_sys_0_2_2 = { features?(kernel32_sys_0_2_2_features {}) }: kernel32_sys_0_2_2_ {
    dependencies = mapFeatures features ([ winapi_0_2_8 ]);
    buildDependencies = mapFeatures features ([ winapi_build_0_1_1 ]);
  };
  kernel32_sys_0_2_2_features = f: updateFeatures f (rec {
    kernel32_sys_0_2_2.default = (f.kernel32_sys_0_2_2.default or true);
    winapi_0_2_8.default = true;
    winapi_build_0_1_1.default = true;
  }) [ winapi_0_2_8_features winapi_build_0_1_1_features ];
  lazy_static_1_1_0 = { features?(lazy_static_1_1_0_features {}) }: lazy_static_1_1_0_ {
    dependencies = mapFeatures features ([]);
    buildDependencies = mapFeatures features ([ version_check_0_1_4 ]);
    features = mkFeatures (features.lazy_static_1_1_0 or {});
  };
  lazy_static_1_1_0_features = f: updateFeatures f (rec {
    lazy_static_1_1_0.default = (f.lazy_static_1_1_0.default or true);
    lazy_static_1_1_0.nightly =
      (f.lazy_static_1_1_0.nightly or false) ||
      (f.lazy_static_1_1_0.spin_no_std or false) ||
      (lazy_static_1_1_0.spin_no_std or false);
    lazy_static_1_1_0.spin =
      (f.lazy_static_1_1_0.spin or false) ||
      (f.lazy_static_1_1_0.spin_no_std or false) ||
      (lazy_static_1_1_0.spin_no_std or false);
    version_check_0_1_4.default = true;
  }) [ version_check_0_1_4_features ];
  lazycell_1_1_0 = { features?(lazycell_1_1_0_features {}) }: lazycell_1_1_0_ {
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.lazycell_1_1_0 or {});
  };
  lazycell_1_1_0_features = f: updateFeatures f (rec {
    lazycell_1_1_0.clippy =
      (f.lazycell_1_1_0.clippy or false) ||
      (f.lazycell_1_1_0.nightly-testing or false) ||
      (lazycell_1_1_0.nightly-testing or false);
    lazycell_1_1_0.default = (f.lazycell_1_1_0.default or true);
    lazycell_1_1_0.nightly =
      (f.lazycell_1_1_0.nightly or false) ||
      (f.lazycell_1_1_0.nightly-testing or false) ||
      (lazycell_1_1_0.nightly-testing or false);
  }) [];
  libc_0_2_43 = { features?(libc_0_2_43_features {}) }: libc_0_2_43_ {
    features = mkFeatures (features.libc_0_2_43 or {});
  };
  libc_0_2_43_features = f: updateFeatures f (rec {
    libc_0_2_43.default = (f.libc_0_2_43.default or true);
    libc_0_2_43.use_std =
      (f.libc_0_2_43.use_std or false) ||
      (f.libc_0_2_43.default or false) ||
      (libc_0_2_43.default or false);
  }) [];
  libgit2_sys_0_7_8 = { features?(libgit2_sys_0_7_8_features {}) }: libgit2_sys_0_7_8_ {
    dependencies = mapFeatures features ([ libc_0_2_43 libz_sys_1_0_22 ]
      ++ (if features.libgit2_sys_0_7_8.curl-sys or false then [ curl_sys_0_4_11 ] else [])
      ++ (if features.libgit2_sys_0_7_8.libssh2-sys or false then [ libssh2_sys_0_2_11 ] else []))
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ ]
      ++ (if features.libgit2_sys_0_7_8.openssl-sys or false then [ openssl_sys_0_9_36 ] else [])) else []);
    buildDependencies = mapFeatures features ([ cc_1_0_25 pkg_config_0_3_14 ]);
    features = mkFeatures (features.libgit2_sys_0_7_8 or {});
  };
  libgit2_sys_0_7_8_features = f: updateFeatures f (rec {
    cc_1_0_25.default = true;
    curl_sys_0_4_11.default = true;
    libc_0_2_43.default = true;
    libgit2_sys_0_7_8.curl-sys =
      (f.libgit2_sys_0_7_8.curl-sys or false) ||
      (f.libgit2_sys_0_7_8.curl or false) ||
      (libgit2_sys_0_7_8.curl or false);
    libgit2_sys_0_7_8.default = (f.libgit2_sys_0_7_8.default or true);
    libgit2_sys_0_7_8.libssh2-sys =
      (f.libgit2_sys_0_7_8.libssh2-sys or false) ||
      (f.libgit2_sys_0_7_8.ssh or false) ||
      (libgit2_sys_0_7_8.ssh or false);
    libgit2_sys_0_7_8.openssl-sys =
      (f.libgit2_sys_0_7_8.openssl-sys or false) ||
      (f.libgit2_sys_0_7_8.https or false) ||
      (libgit2_sys_0_7_8.https or false);
    libssh2_sys_0_2_11.default = true;
    libz_sys_1_0_22.default = true;
    openssl_sys_0_9_36.default = true;
    pkg_config_0_3_14.default = true;
  }) [ curl_sys_0_4_11_features libc_0_2_43_features libssh2_sys_0_2_11_features libz_sys_1_0_22_features cc_1_0_25_features pkg_config_0_3_14_features openssl_sys_0_9_36_features ];
  libssh2_sys_0_2_11 = { features?(libssh2_sys_0_2_11_features {}) }: libssh2_sys_0_2_11_ {
    dependencies = mapFeatures features ([ libc_0_2_43 libz_sys_1_0_22 ])
      ++ (if abi == "msvc" then mapFeatures features ([]) else [])
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ openssl_sys_0_9_36 ]) else []);
    buildDependencies = mapFeatures features ([ cc_1_0_25 pkg_config_0_3_14 ]);
  };
  libssh2_sys_0_2_11_features = f: updateFeatures f (rec {
    cc_1_0_25.default = true;
    libc_0_2_43.default = true;
    libssh2_sys_0_2_11.default = (f.libssh2_sys_0_2_11.default or true);
    libz_sys_1_0_22.default = true;
    openssl_sys_0_9_36.default = true;
    pkg_config_0_3_14.default = true;
  }) [ libc_0_2_43_features libz_sys_1_0_22_features cc_1_0_25_features pkg_config_0_3_14_features openssl_sys_0_9_36_features ];
  libz_sys_1_0_22 = { features?(libz_sys_1_0_22_features {}) }: libz_sys_1_0_22_ {
    dependencies = mapFeatures features ([ libc_0_2_43 ])
      ++ (if abi == "msvc" then mapFeatures features ([]) else []);
    buildDependencies = mapFeatures features ([ cc_1_0_25 pkg_config_0_3_14 ]);
  };
  libz_sys_1_0_22_features = f: updateFeatures f (rec {
    cc_1_0_25.default = true;
    libc_0_2_43.default = true;
    libz_sys_1_0_22.default = (f.libz_sys_1_0_22.default or true);
    pkg_config_0_3_14.default = true;
  }) [ libc_0_2_43_features cc_1_0_25_features pkg_config_0_3_14_features ];
  lock_api_0_1_3 = { features?(lock_api_0_1_3_features {}) }: lock_api_0_1_3_ {
    dependencies = mapFeatures features ([ scopeguard_0_3_3 ]
      ++ (if features.lock_api_0_1_3.owning_ref or false then [ owning_ref_0_3_3 ] else []));
    features = mkFeatures (features.lock_api_0_1_3 or {});
  };
  lock_api_0_1_3_features = f: updateFeatures f (rec {
    lock_api_0_1_3.default = (f.lock_api_0_1_3.default or true);
    owning_ref_0_3_3.default = true;
    scopeguard_0_3_3.default = (f.scopeguard_0_3_3.default or false);
  }) [ owning_ref_0_3_3_features scopeguard_0_3_3_features ];
  log_0_4_5 = { features?(log_0_4_5_features {}) }: log_0_4_5_ {
    dependencies = mapFeatures features ([ cfg_if_0_1_5 ]);
    features = mkFeatures (features.log_0_4_5 or {});
  };
  log_0_4_5_features = f: updateFeatures f (rec {
    cfg_if_0_1_5.default = true;
    log_0_4_5.default = (f.log_0_4_5.default or true);
  }) [ cfg_if_0_1_5_features ];
  matches_0_1_8 = { features?(matches_0_1_8_features {}) }: matches_0_1_8_ {};
  matches_0_1_8_features = f: updateFeatures f (rec {
    matches_0_1_8.default = (f.matches_0_1_8.default or true);
  }) [];
  memchr_2_1_0 = { features?(memchr_2_1_0_features {}) }: memchr_2_1_0_ {
    dependencies = mapFeatures features ([ cfg_if_0_1_5 ]
      ++ (if features.memchr_2_1_0.libc or false then [ libc_0_2_43 ] else []));
    buildDependencies = mapFeatures features ([ version_check_0_1_4 ]);
    features = mkFeatures (features.memchr_2_1_0 or {});
  };
  memchr_2_1_0_features = f: updateFeatures f (rec {
    cfg_if_0_1_5.default = true;
    libc_0_2_43.default = (f.libc_0_2_43.default or false);
    libc_0_2_43.use_std =
      (f.libc_0_2_43.use_std or false) ||
      (memchr_2_1_0.use_std or false) ||
      (f.memchr_2_1_0.use_std or false);
    memchr_2_1_0.default = (f.memchr_2_1_0.default or true);
    memchr_2_1_0.libc =
      (f.memchr_2_1_0.libc or false) ||
      (f.memchr_2_1_0.default or false) ||
      (memchr_2_1_0.default or false) ||
      (f.memchr_2_1_0.use_std or false) ||
      (memchr_2_1_0.use_std or false);
    memchr_2_1_0.use_std =
      (f.memchr_2_1_0.use_std or false) ||
      (f.memchr_2_1_0.default or false) ||
      (memchr_2_1_0.default or false);
    version_check_0_1_4.default = true;
  }) [ cfg_if_0_1_5_features libc_0_2_43_features version_check_0_1_4_features ];
  memoffset_0_2_1 = { features?(memoffset_0_2_1_features {}) }: memoffset_0_2_1_ {};
  memoffset_0_2_1_features = f: updateFeatures f (rec {
    memoffset_0_2_1.default = (f.memoffset_0_2_1.default or true);
  }) [];
  miniz_sys_0_1_10 = { features?(miniz_sys_0_1_10_features {}) }: miniz_sys_0_1_10_ {
    dependencies = mapFeatures features ([ libc_0_2_43 ]);
    buildDependencies = mapFeatures features ([ cc_1_0_25 ]);
  };
  miniz_sys_0_1_10_features = f: updateFeatures f (rec {
    cc_1_0_25.default = true;
    libc_0_2_43.default = true;
    miniz_sys_0_1_10.default = (f.miniz_sys_0_1_10.default or true);
  }) [ libc_0_2_43_features cc_1_0_25_features ];
  miow_0_3_3 = { features?(miow_0_3_3_features {}) }: miow_0_3_3_ {
    dependencies = mapFeatures features ([ socket2_0_3_8 winapi_0_3_5 ]);
  };
  miow_0_3_3_features = f: updateFeatures f (rec {
    miow_0_3_3.default = (f.miow_0_3_3.default or true);
    socket2_0_3_8.default = true;
    winapi_0_3_5.default = true;
    winapi_0_3_5.fileapi = true;
    winapi_0_3_5.handleapi = true;
    winapi_0_3_5.ioapiset = true;
    winapi_0_3_5.minwindef = true;
    winapi_0_3_5.namedpipeapi = true;
    winapi_0_3_5.ntdef = true;
    winapi_0_3_5.std = true;
    winapi_0_3_5.synchapi = true;
    winapi_0_3_5.winerror = true;
    winapi_0_3_5.winsock2 = true;
    winapi_0_3_5.ws2def = true;
    winapi_0_3_5.ws2ipdef = true;
  }) [ socket2_0_3_8_features winapi_0_3_5_features ];
  nodrop_0_1_12 = { features?(nodrop_0_1_12_features {}) }: nodrop_0_1_12_ {
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.nodrop_0_1_12 or {});
  };
  nodrop_0_1_12_features = f: updateFeatures f (rec {
    nodrop_0_1_12.default = (f.nodrop_0_1_12.default or true);
    nodrop_0_1_12.nodrop-union =
      (f.nodrop_0_1_12.nodrop-union or false) ||
      (f.nodrop_0_1_12.use_union or false) ||
      (nodrop_0_1_12.use_union or false);
    nodrop_0_1_12.std =
      (f.nodrop_0_1_12.std or false) ||
      (f.nodrop_0_1_12.default or false) ||
      (nodrop_0_1_12.default or false);
  }) [];
  num_cpus_1_8_0 = { features?(num_cpus_1_8_0_features {}) }: num_cpus_1_8_0_ {
    dependencies = mapFeatures features ([ libc_0_2_43 ]);
  };
  num_cpus_1_8_0_features = f: updateFeatures f (rec {
    libc_0_2_43.default = true;
    num_cpus_1_8_0.default = (f.num_cpus_1_8_0.default or true);
  }) [ libc_0_2_43_features ];
  openssl_0_10_12 = { features?(openssl_0_10_12_features {}) }: openssl_0_10_12_ {
    dependencies = mapFeatures features ([ bitflags_1_0_4 cfg_if_0_1_5 foreign_types_0_3_2 lazy_static_1_1_0 libc_0_2_43 openssl_sys_0_9_36 ]);
    features = mkFeatures (features.openssl_0_10_12 or {});
  };
  openssl_0_10_12_features = f: updateFeatures f (rec {
    bitflags_1_0_4.default = true;
    cfg_if_0_1_5.default = true;
    foreign_types_0_3_2.default = true;
    lazy_static_1_1_0.default = true;
    libc_0_2_43.default = true;
    openssl_0_10_12.default = (f.openssl_0_10_12.default or true);
    openssl_sys_0_9_36.default = true;
    openssl_sys_0_9_36.vendored =
      (f.openssl_sys_0_9_36.vendored or false) ||
      (openssl_0_10_12.vendored or false) ||
      (f.openssl_0_10_12.vendored or false);
  }) [ bitflags_1_0_4_features cfg_if_0_1_5_features foreign_types_0_3_2_features lazy_static_1_1_0_features libc_0_2_43_features openssl_sys_0_9_36_features ];
  openssl_probe_0_1_2 = { features?(openssl_probe_0_1_2_features {}) }: openssl_probe_0_1_2_ {};
  openssl_probe_0_1_2_features = f: updateFeatures f (rec {
    openssl_probe_0_1_2.default = (f.openssl_probe_0_1_2.default or true);
  }) [];
  openssl_src_110_0_7 = { features?(openssl_src_110_0_7_features {}) }: openssl_src_110_0_7_ {
    dependencies = mapFeatures features ([]);
  };
  openssl_src_110_0_7_features = f: updateFeatures f (rec {
    openssl_src_110_0_7.default = (f.openssl_src_110_0_7.default or true);
  }) [];
  openssl_sys_0_9_36 = { features?(openssl_sys_0_9_36_features {}) }: openssl_sys_0_9_36_ {
    dependencies = mapFeatures features ([ libc_0_2_43 ])
      ++ (if abi == "msvc" then mapFeatures features ([]) else []);
    buildDependencies = mapFeatures features ([ cc_1_0_25 pkg_config_0_3_14 ]
      ++ (if features.openssl_sys_0_9_36.openssl-src or false then [ openssl_src_110_0_7 ] else []));
    features = mkFeatures (features.openssl_sys_0_9_36 or {});
  };
  openssl_sys_0_9_36_features = f: updateFeatures f (rec {
    cc_1_0_25.default = true;
    libc_0_2_43.default = true;
    openssl_src_110_0_7.default = true;
    openssl_sys_0_9_36.default = (f.openssl_sys_0_9_36.default or true);
    openssl_sys_0_9_36.openssl-src =
      (f.openssl_sys_0_9_36.openssl-src or false) ||
      (f.openssl_sys_0_9_36.vendored or false) ||
      (openssl_sys_0_9_36.vendored or false);
    pkg_config_0_3_14.default = true;
  }) [ libc_0_2_43_features cc_1_0_25_features openssl_src_110_0_7_features pkg_config_0_3_14_features ];
  owning_ref_0_3_3 = { features?(owning_ref_0_3_3_features {}) }: owning_ref_0_3_3_ {
    dependencies = mapFeatures features ([ stable_deref_trait_1_1_1 ]);
  };
  owning_ref_0_3_3_features = f: updateFeatures f (rec {
    owning_ref_0_3_3.default = (f.owning_ref_0_3_3.default or true);
    stable_deref_trait_1_1_1.default = true;
  }) [ stable_deref_trait_1_1_1_features ];
  parking_lot_0_6_4 = { features?(parking_lot_0_6_4_features {}) }: parking_lot_0_6_4_ {
    dependencies = mapFeatures features ([ lock_api_0_1_3 parking_lot_core_0_3_1 ]);
    features = mkFeatures (features.parking_lot_0_6_4 or {});
  };
  parking_lot_0_6_4_features = f: updateFeatures f (rec {
    lock_api_0_1_3.default = true;
    lock_api_0_1_3.nightly =
      (f.lock_api_0_1_3.nightly or false) ||
      (parking_lot_0_6_4.nightly or false) ||
      (f.parking_lot_0_6_4.nightly or false);
    lock_api_0_1_3.owning_ref =
      (f.lock_api_0_1_3.owning_ref or false) ||
      (parking_lot_0_6_4.owning_ref or false) ||
      (f.parking_lot_0_6_4.owning_ref or false);
    parking_lot_0_6_4.default = (f.parking_lot_0_6_4.default or true);
    parking_lot_0_6_4.owning_ref =
      (f.parking_lot_0_6_4.owning_ref or false) ||
      (f.parking_lot_0_6_4.default or false) ||
      (parking_lot_0_6_4.default or false);
    parking_lot_core_0_3_1.deadlock_detection =
      (f.parking_lot_core_0_3_1.deadlock_detection or false) ||
      (parking_lot_0_6_4.deadlock_detection or false) ||
      (f.parking_lot_0_6_4.deadlock_detection or false);
    parking_lot_core_0_3_1.default = true;
    parking_lot_core_0_3_1.nightly =
      (f.parking_lot_core_0_3_1.nightly or false) ||
      (parking_lot_0_6_4.nightly or false) ||
      (f.parking_lot_0_6_4.nightly or false);
  }) [ lock_api_0_1_3_features parking_lot_core_0_3_1_features ];
  parking_lot_core_0_3_1 = { features?(parking_lot_core_0_3_1_features {}) }: parking_lot_core_0_3_1_ {
    dependencies = mapFeatures features ([ rand_0_5_5 smallvec_0_6_5 ])
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ libc_0_2_43 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ winapi_0_3_5 ]) else []);
    buildDependencies = mapFeatures features ([ rustc_version_0_2_3 ]);
    features = mkFeatures (features.parking_lot_core_0_3_1 or {});
  };
  parking_lot_core_0_3_1_features = f: updateFeatures f (rec {
    libc_0_2_43.default = true;
    parking_lot_core_0_3_1.backtrace =
      (f.parking_lot_core_0_3_1.backtrace or false) ||
      (f.parking_lot_core_0_3_1.deadlock_detection or false) ||
      (parking_lot_core_0_3_1.deadlock_detection or false);
    parking_lot_core_0_3_1.default = (f.parking_lot_core_0_3_1.default or true);
    parking_lot_core_0_3_1.petgraph =
      (f.parking_lot_core_0_3_1.petgraph or false) ||
      (f.parking_lot_core_0_3_1.deadlock_detection or false) ||
      (parking_lot_core_0_3_1.deadlock_detection or false);
    parking_lot_core_0_3_1.thread-id =
      (f.parking_lot_core_0_3_1.thread-id or false) ||
      (f.parking_lot_core_0_3_1.deadlock_detection or false) ||
      (parking_lot_core_0_3_1.deadlock_detection or false);
    rand_0_5_5.default = true;
    rustc_version_0_2_3.default = true;
    smallvec_0_6_5.default = true;
    winapi_0_3_5.default = true;
    winapi_0_3_5.errhandlingapi = true;
    winapi_0_3_5.handleapi = true;
    winapi_0_3_5.minwindef = true;
    winapi_0_3_5.ntstatus = true;
    winapi_0_3_5.winbase = true;
    winapi_0_3_5.winerror = true;
    winapi_0_3_5.winnt = true;
  }) [ rand_0_5_5_features smallvec_0_6_5_features rustc_version_0_2_3_features libc_0_2_43_features winapi_0_3_5_features ];
  percent_encoding_1_0_1 = { features?(percent_encoding_1_0_1_features {}) }: percent_encoding_1_0_1_ {};
  percent_encoding_1_0_1_features = f: updateFeatures f (rec {
    percent_encoding_1_0_1.default = (f.percent_encoding_1_0_1.default or true);
  }) [];
  pkg_config_0_3_14 = { features?(pkg_config_0_3_14_features {}) }: pkg_config_0_3_14_ {};
  pkg_config_0_3_14_features = f: updateFeatures f (rec {
    pkg_config_0_3_14.default = (f.pkg_config_0_3_14.default or true);
  }) [];
  proc_macro2_0_4_19 = { features?(proc_macro2_0_4_19_features {}) }: proc_macro2_0_4_19_ {
    dependencies = mapFeatures features ([ unicode_xid_0_1_0 ]);
    features = mkFeatures (features.proc_macro2_0_4_19 or {});
  };
  proc_macro2_0_4_19_features = f: updateFeatures f (rec {
    proc_macro2_0_4_19.default = (f.proc_macro2_0_4_19.default or true);
    proc_macro2_0_4_19.proc-macro =
      (f.proc_macro2_0_4_19.proc-macro or false) ||
      (f.proc_macro2_0_4_19.default or false) ||
      (proc_macro2_0_4_19.default or false) ||
      (f.proc_macro2_0_4_19.nightly or false) ||
      (proc_macro2_0_4_19.nightly or false);
    unicode_xid_0_1_0.default = true;
  }) [ unicode_xid_0_1_0_features ];
  quick_error_1_2_2 = { features?(quick_error_1_2_2_features {}) }: quick_error_1_2_2_ {};
  quick_error_1_2_2_features = f: updateFeatures f (rec {
    quick_error_1_2_2.default = (f.quick_error_1_2_2.default or true);
  }) [];
  quote_0_6_8 = { features?(quote_0_6_8_features {}) }: quote_0_6_8_ {
    dependencies = mapFeatures features ([ proc_macro2_0_4_19 ]);
    features = mkFeatures (features.quote_0_6_8 or {});
  };
  quote_0_6_8_features = f: updateFeatures f (rec {
    proc_macro2_0_4_19.default = (f.proc_macro2_0_4_19.default or false);
    proc_macro2_0_4_19.proc-macro =
      (f.proc_macro2_0_4_19.proc-macro or false) ||
      (quote_0_6_8.proc-macro or false) ||
      (f.quote_0_6_8.proc-macro or false);
    quote_0_6_8.default = (f.quote_0_6_8.default or true);
    quote_0_6_8.proc-macro =
      (f.quote_0_6_8.proc-macro or false) ||
      (f.quote_0_6_8.default or false) ||
      (quote_0_6_8.default or false);
  }) [ proc_macro2_0_4_19_features ];
  rand_0_4_3 = { features?(rand_0_4_3_features {}) }: rand_0_4_3_ {
    dependencies = (if kernel == "fuchsia" then mapFeatures features ([ fuchsia_zircon_0_3_3 ]) else [])
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ ]
      ++ (if features.rand_0_4_3.libc or false then [ libc_0_2_43 ] else [])) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ winapi_0_3_5 ]) else []);
    features = mkFeatures (features.rand_0_4_3 or {});
  };
  rand_0_4_3_features = f: updateFeatures f (rec {
    fuchsia_zircon_0_3_3.default = true;
    libc_0_2_43.default = true;
    rand_0_4_3.default = (f.rand_0_4_3.default or true);
    rand_0_4_3.i128_support =
      (f.rand_0_4_3.i128_support or false) ||
      (f.rand_0_4_3.nightly or false) ||
      (rand_0_4_3.nightly or false);
    rand_0_4_3.libc =
      (f.rand_0_4_3.libc or false) ||
      (f.rand_0_4_3.std or false) ||
      (rand_0_4_3.std or false);
    rand_0_4_3.std =
      (f.rand_0_4_3.std or false) ||
      (f.rand_0_4_3.default or false) ||
      (rand_0_4_3.default or false);
    winapi_0_3_5.default = true;
    winapi_0_3_5.minwindef = true;
    winapi_0_3_5.ntsecapi = true;
    winapi_0_3_5.profileapi = true;
    winapi_0_3_5.winnt = true;
  }) [ fuchsia_zircon_0_3_3_features libc_0_2_43_features winapi_0_3_5_features ];
  rand_0_5_5 = { features?(rand_0_5_5_features {}) }: rand_0_5_5_ {
    dependencies = mapFeatures features ([ rand_core_0_2_1 ])
      ++ (if kernel == "cloudabi" then mapFeatures features ([ ]
      ++ (if features.rand_0_5_5.cloudabi or false then [ cloudabi_0_0_3 ] else [])) else [])
      ++ (if kernel == "fuchsia" then mapFeatures features ([ ]
      ++ (if features.rand_0_5_5.fuchsia-zircon or false then [ fuchsia_zircon_0_3_3 ] else [])) else [])
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ ]
      ++ (if features.rand_0_5_5.libc or false then [ libc_0_2_43 ] else [])) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ ]
      ++ (if features.rand_0_5_5.winapi or false then [ winapi_0_3_5 ] else [])) else [])
      ++ (if kernel == "wasm32-unknown-unknown" then mapFeatures features ([]) else []);
    features = mkFeatures (features.rand_0_5_5 or {});
  };
  rand_0_5_5_features = f: updateFeatures f (rec {
    cloudabi_0_0_3.default = true;
    fuchsia_zircon_0_3_3.default = true;
    libc_0_2_43.default = true;
    rand_0_5_5.alloc =
      (f.rand_0_5_5.alloc or false) ||
      (f.rand_0_5_5.std or false) ||
      (rand_0_5_5.std or false);
    rand_0_5_5.cloudabi =
      (f.rand_0_5_5.cloudabi or false) ||
      (f.rand_0_5_5.std or false) ||
      (rand_0_5_5.std or false);
    rand_0_5_5.default = (f.rand_0_5_5.default or true);
    rand_0_5_5.fuchsia-zircon =
      (f.rand_0_5_5.fuchsia-zircon or false) ||
      (f.rand_0_5_5.std or false) ||
      (rand_0_5_5.std or false);
    rand_0_5_5.i128_support =
      (f.rand_0_5_5.i128_support or false) ||
      (f.rand_0_5_5.nightly or false) ||
      (rand_0_5_5.nightly or false);
    rand_0_5_5.libc =
      (f.rand_0_5_5.libc or false) ||
      (f.rand_0_5_5.std or false) ||
      (rand_0_5_5.std or false);
    rand_0_5_5.serde =
      (f.rand_0_5_5.serde or false) ||
      (f.rand_0_5_5.serde1 or false) ||
      (rand_0_5_5.serde1 or false);
    rand_0_5_5.serde_derive =
      (f.rand_0_5_5.serde_derive or false) ||
      (f.rand_0_5_5.serde1 or false) ||
      (rand_0_5_5.serde1 or false);
    rand_0_5_5.std =
      (f.rand_0_5_5.std or false) ||
      (f.rand_0_5_5.default or false) ||
      (rand_0_5_5.default or false);
    rand_0_5_5.winapi =
      (f.rand_0_5_5.winapi or false) ||
      (f.rand_0_5_5.std or false) ||
      (rand_0_5_5.std or false);
    rand_core_0_2_1.alloc =
      (f.rand_core_0_2_1.alloc or false) ||
      (rand_0_5_5.alloc or false) ||
      (f.rand_0_5_5.alloc or false);
    rand_core_0_2_1.default = (f.rand_core_0_2_1.default or false);
    rand_core_0_2_1.serde1 =
      (f.rand_core_0_2_1.serde1 or false) ||
      (rand_0_5_5.serde1 or false) ||
      (f.rand_0_5_5.serde1 or false);
    rand_core_0_2_1.std =
      (f.rand_core_0_2_1.std or false) ||
      (rand_0_5_5.std or false) ||
      (f.rand_0_5_5.std or false);
    winapi_0_3_5.default = true;
    winapi_0_3_5.minwindef = true;
    winapi_0_3_5.ntsecapi = true;
    winapi_0_3_5.profileapi = true;
    winapi_0_3_5.winnt = true;
  }) [ rand_core_0_2_1_features cloudabi_0_0_3_features fuchsia_zircon_0_3_3_features libc_0_2_43_features winapi_0_3_5_features ];
  rand_core_0_2_1 = { features?(rand_core_0_2_1_features {}) }: rand_core_0_2_1_ {
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.rand_core_0_2_1 or {});
  };
  rand_core_0_2_1_features = f: updateFeatures f (rec {
    rand_core_0_2_1.alloc =
      (f.rand_core_0_2_1.alloc or false) ||
      (f.rand_core_0_2_1.std or false) ||
      (rand_core_0_2_1.std or false);
    rand_core_0_2_1.default = (f.rand_core_0_2_1.default or true);
    rand_core_0_2_1.serde =
      (f.rand_core_0_2_1.serde or false) ||
      (f.rand_core_0_2_1.serde1 or false) ||
      (rand_core_0_2_1.serde1 or false);
    rand_core_0_2_1.serde_derive =
      (f.rand_core_0_2_1.serde_derive or false) ||
      (f.rand_core_0_2_1.serde1 or false) ||
      (rand_core_0_2_1.serde1 or false);
    rand_core_0_2_1.std =
      (f.rand_core_0_2_1.std or false) ||
      (f.rand_core_0_2_1.default or false) ||
      (rand_core_0_2_1.default or false);
  }) [];
  redox_syscall_0_1_40 = { features?(redox_syscall_0_1_40_features {}) }: redox_syscall_0_1_40_ {};
  redox_syscall_0_1_40_features = f: updateFeatures f (rec {
    redox_syscall_0_1_40.default = (f.redox_syscall_0_1_40.default or true);
  }) [];
  redox_termios_0_1_1 = { features?(redox_termios_0_1_1_features {}) }: redox_termios_0_1_1_ {
    dependencies = mapFeatures features ([ redox_syscall_0_1_40 ]);
  };
  redox_termios_0_1_1_features = f: updateFeatures f (rec {
    redox_syscall_0_1_40.default = true;
    redox_termios_0_1_1.default = (f.redox_termios_0_1_1.default or true);
  }) [ redox_syscall_0_1_40_features ];
  regex_1_0_5 = { features?(regex_1_0_5_features {}) }: regex_1_0_5_ {
    dependencies = mapFeatures features ([ aho_corasick_0_6_8 memchr_2_1_0 regex_syntax_0_6_2 thread_local_0_3_6 utf8_ranges_1_0_1 ]);
    features = mkFeatures (features.regex_1_0_5 or {});
  };
  regex_1_0_5_features = f: updateFeatures f (rec {
    aho_corasick_0_6_8.default = true;
    memchr_2_1_0.default = true;
    regex_1_0_5.default = (f.regex_1_0_5.default or true);
    regex_1_0_5.pattern =
      (f.regex_1_0_5.pattern or false) ||
      (f.regex_1_0_5.unstable or false) ||
      (regex_1_0_5.unstable or false);
    regex_1_0_5.use_std =
      (f.regex_1_0_5.use_std or false) ||
      (f.regex_1_0_5.default or false) ||
      (regex_1_0_5.default or false);
    regex_syntax_0_6_2.default = true;
    thread_local_0_3_6.default = true;
    utf8_ranges_1_0_1.default = true;
  }) [ aho_corasick_0_6_8_features memchr_2_1_0_features regex_syntax_0_6_2_features thread_local_0_3_6_features utf8_ranges_1_0_1_features ];
  regex_syntax_0_6_2 = { features?(regex_syntax_0_6_2_features {}) }: regex_syntax_0_6_2_ {
    dependencies = mapFeatures features ([ ucd_util_0_1_1 ]);
  };
  regex_syntax_0_6_2_features = f: updateFeatures f (rec {
    regex_syntax_0_6_2.default = (f.regex_syntax_0_6_2.default or true);
    ucd_util_0_1_1.default = true;
  }) [ ucd_util_0_1_1_features ];
  remove_dir_all_0_5_1 = { features?(remove_dir_all_0_5_1_features {}) }: remove_dir_all_0_5_1_ {
    dependencies = (if kernel == "windows" then mapFeatures features ([ winapi_0_3_5 ]) else []);
  };
  remove_dir_all_0_5_1_features = f: updateFeatures f (rec {
    remove_dir_all_0_5_1.default = (f.remove_dir_all_0_5_1.default or true);
    winapi_0_3_5.default = true;
    winapi_0_3_5.errhandlingapi = true;
    winapi_0_3_5.fileapi = true;
    winapi_0_3_5.std = true;
    winapi_0_3_5.winbase = true;
    winapi_0_3_5.winerror = true;
  }) [ winapi_0_3_5_features ];
  rustc_demangle_0_1_9 = { features?(rustc_demangle_0_1_9_features {}) }: rustc_demangle_0_1_9_ {};
  rustc_demangle_0_1_9_features = f: updateFeatures f (rec {
    rustc_demangle_0_1_9.default = (f.rustc_demangle_0_1_9.default or true);
  }) [];
  rustc_workspace_hack_1_0_0 = { features?(rustc_workspace_hack_1_0_0_features {}) }: rustc_workspace_hack_1_0_0_ {};
  rustc_workspace_hack_1_0_0_features = f: updateFeatures f (rec {
    rustc_workspace_hack_1_0_0.default = (f.rustc_workspace_hack_1_0_0.default or true);
  }) [];
  rustc_version_0_2_3 = { features?(rustc_version_0_2_3_features {}) }: rustc_version_0_2_3_ {
    dependencies = mapFeatures features ([ semver_0_9_0 ]);
  };
  rustc_version_0_2_3_features = f: updateFeatures f (rec {
    rustc_version_0_2_3.default = (f.rustc_version_0_2_3.default or true);
    semver_0_9_0.default = true;
  }) [ semver_0_9_0_features ];
  rustfix_0_4_2 = { features?(rustfix_0_4_2_features {}) }: rustfix_0_4_2_ {
    dependencies = mapFeatures features ([ failure_0_1_2 log_0_4_5 serde_1_0_79 serde_derive_1_0_79 serde_json_1_0_28 ]);
  };
  rustfix_0_4_2_features = f: updateFeatures f (rec {
    failure_0_1_2.default = true;
    log_0_4_5.default = true;
    rustfix_0_4_2.default = (f.rustfix_0_4_2.default or true);
    serde_1_0_79.default = true;
    serde_derive_1_0_79.default = true;
    serde_json_1_0_28.default = true;
  }) [ failure_0_1_2_features log_0_4_5_features serde_1_0_79_features serde_derive_1_0_79_features serde_json_1_0_28_features ];
  ryu_0_2_6 = { features?(ryu_0_2_6_features {}) }: ryu_0_2_6_ {
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.ryu_0_2_6 or {});
  };
  ryu_0_2_6_features = f: updateFeatures f (rec {
    ryu_0_2_6.default = (f.ryu_0_2_6.default or true);
  }) [];
  same_file_1_0_3 = { features?(same_file_1_0_3_features {}) }: same_file_1_0_3_ {
    dependencies = (if kernel == "windows" then mapFeatures features ([ winapi_util_0_1_1 ]) else []);
  };
  same_file_1_0_3_features = f: updateFeatures f (rec {
    same_file_1_0_3.default = (f.same_file_1_0_3.default or true);
    winapi_util_0_1_1.default = true;
  }) [ winapi_util_0_1_1_features ];
  schannel_0_1_13 = { features?(schannel_0_1_13_features {}) }: schannel_0_1_13_ {
    dependencies = mapFeatures features ([ lazy_static_1_1_0 winapi_0_3_5 ]);
  };
  schannel_0_1_13_features = f: updateFeatures f (rec {
    lazy_static_1_1_0.default = true;
    schannel_0_1_13.default = (f.schannel_0_1_13.default or true);
    winapi_0_3_5.default = true;
    winapi_0_3_5.lmcons = true;
    winapi_0_3_5.minschannel = true;
    winapi_0_3_5.schannel = true;
    winapi_0_3_5.securitybaseapi = true;
    winapi_0_3_5.sysinfoapi = true;
    winapi_0_3_5.timezoneapi = true;
    winapi_0_3_5.winbase = true;
    winapi_0_3_5.wincrypt = true;
    winapi_0_3_5.winerror = true;
  }) [ lazy_static_1_1_0_features winapi_0_3_5_features ];
  scopeguard_0_3_3 = { features?(scopeguard_0_3_3_features {}) }: scopeguard_0_3_3_ {
    features = mkFeatures (features.scopeguard_0_3_3 or {});
  };
  scopeguard_0_3_3_features = f: updateFeatures f (rec {
    scopeguard_0_3_3.default = (f.scopeguard_0_3_3.default or true);
    scopeguard_0_3_3.use_std =
      (f.scopeguard_0_3_3.use_std or false) ||
      (f.scopeguard_0_3_3.default or false) ||
      (scopeguard_0_3_3.default or false);
  }) [];
  semver_0_9_0 = { features?(semver_0_9_0_features {}) }: semver_0_9_0_ {
    dependencies = mapFeatures features ([ semver_parser_0_7_0 ]
      ++ (if features.semver_0_9_0.serde or false then [ serde_1_0_79 ] else []));
    features = mkFeatures (features.semver_0_9_0 or {});
  };
  semver_0_9_0_features = f: updateFeatures f (rec {
    semver_0_9_0.default = (f.semver_0_9_0.default or true);
    semver_0_9_0.serde =
      (f.semver_0_9_0.serde or false) ||
      (f.semver_0_9_0.ci or false) ||
      (semver_0_9_0.ci or false);
    semver_parser_0_7_0.default = true;
    serde_1_0_79.default = true;
  }) [ semver_parser_0_7_0_features serde_1_0_79_features ];
  semver_parser_0_7_0 = { features?(semver_parser_0_7_0_features {}) }: semver_parser_0_7_0_ {};
  semver_parser_0_7_0_features = f: updateFeatures f (rec {
    semver_parser_0_7_0.default = (f.semver_parser_0_7_0.default or true);
  }) [];
  serde_1_0_79 = { features?(serde_1_0_79_features {}) }: serde_1_0_79_ {
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.serde_1_0_79 or {});
  };
  serde_1_0_79_features = f: updateFeatures f (rec {
    serde_1_0_79.default = (f.serde_1_0_79.default or true);
    serde_1_0_79.serde_derive =
      (f.serde_1_0_79.serde_derive or false) ||
      (f.serde_1_0_79.derive or false) ||
      (serde_1_0_79.derive or false);
    serde_1_0_79.std =
      (f.serde_1_0_79.std or false) ||
      (f.serde_1_0_79.default or false) ||
      (serde_1_0_79.default or false);
    serde_1_0_79.unstable =
      (f.serde_1_0_79.unstable or false) ||
      (f.serde_1_0_79.alloc or false) ||
      (serde_1_0_79.alloc or false);
  }) [];
  serde_derive_1_0_79 = { features?(serde_derive_1_0_79_features {}) }: serde_derive_1_0_79_ {
    dependencies = mapFeatures features ([ proc_macro2_0_4_19 quote_0_6_8 syn_0_15_4 ]);
    features = mkFeatures (features.serde_derive_1_0_79 or {});
  };
  serde_derive_1_0_79_features = f: updateFeatures f (rec {
    proc_macro2_0_4_19.default = true;
    quote_0_6_8.default = true;
    serde_derive_1_0_79.default = (f.serde_derive_1_0_79.default or true);
    syn_0_15_4.default = true;
    syn_0_15_4.visit = true;
  }) [ proc_macro2_0_4_19_features quote_0_6_8_features syn_0_15_4_features ];
  serde_ignored_0_0_4 = { features?(serde_ignored_0_0_4_features {}) }: serde_ignored_0_0_4_ {
    dependencies = mapFeatures features ([ serde_1_0_79 ]);
  };
  serde_ignored_0_0_4_features = f: updateFeatures f (rec {
    serde_1_0_79.default = true;
    serde_ignored_0_0_4.default = (f.serde_ignored_0_0_4.default or true);
  }) [ serde_1_0_79_features ];
  serde_json_1_0_28 = { features?(serde_json_1_0_28_features {}) }: serde_json_1_0_28_ {
    dependencies = mapFeatures features ([ itoa_0_4_3 ryu_0_2_6 serde_1_0_79 ]);
    features = mkFeatures (features.serde_json_1_0_28 or {});
  };
  serde_json_1_0_28_features = f: updateFeatures f (rec {
    itoa_0_4_3.default = true;
    ryu_0_2_6.default = true;
    serde_1_0_79.default = true;
    serde_json_1_0_28.default = (f.serde_json_1_0_28.default or true);
    serde_json_1_0_28.indexmap =
      (f.serde_json_1_0_28.indexmap or false) ||
      (f.serde_json_1_0_28.preserve_order or false) ||
      (serde_json_1_0_28.preserve_order or false);
  }) [ itoa_0_4_3_features ryu_0_2_6_features serde_1_0_79_features ];
  shell_escape_0_1_4 = { features?(shell_escape_0_1_4_features {}) }: shell_escape_0_1_4_ {};
  shell_escape_0_1_4_features = f: updateFeatures f (rec {
    shell_escape_0_1_4.default = (f.shell_escape_0_1_4.default or true);
  }) [];
  smallvec_0_6_5 = { features?(smallvec_0_6_5_features {}) }: smallvec_0_6_5_ {
    dependencies = mapFeatures features ([ unreachable_1_0_0 ]);
    features = mkFeatures (features.smallvec_0_6_5 or {});
  };
  smallvec_0_6_5_features = f: updateFeatures f (rec {
    smallvec_0_6_5.default = (f.smallvec_0_6_5.default or true);
    smallvec_0_6_5.std =
      (f.smallvec_0_6_5.std or false) ||
      (f.smallvec_0_6_5.default or false) ||
      (smallvec_0_6_5.default or false);
    unreachable_1_0_0.default = true;
  }) [ unreachable_1_0_0_features ];
  socket2_0_3_8 = { features?(socket2_0_3_8_features {}) }: socket2_0_3_8_ {
    dependencies = (if (kernel == "linux" || kernel == "darwin") || kernel == "redox" then mapFeatures features ([ cfg_if_0_1_5 libc_0_2_43 ]) else [])
      ++ (if kernel == "redox" then mapFeatures features ([ redox_syscall_0_1_40 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ winapi_0_3_5 ]) else []);
    features = mkFeatures (features.socket2_0_3_8 or {});
  };
  socket2_0_3_8_features = f: updateFeatures f (rec {
    cfg_if_0_1_5.default = true;
    libc_0_2_43.default = true;
    redox_syscall_0_1_40.default = true;
    socket2_0_3_8.default = (f.socket2_0_3_8.default or true);
    winapi_0_3_5.default = true;
    winapi_0_3_5.handleapi = true;
    winapi_0_3_5.minwindef = true;
    winapi_0_3_5.ws2def = true;
    winapi_0_3_5.ws2ipdef = true;
    winapi_0_3_5.ws2tcpip = true;
  }) [ cfg_if_0_1_5_features libc_0_2_43_features redox_syscall_0_1_40_features winapi_0_3_5_features ];
  stable_deref_trait_1_1_1 = { features?(stable_deref_trait_1_1_1_features {}) }: stable_deref_trait_1_1_1_ {
    features = mkFeatures (features.stable_deref_trait_1_1_1 or {});
  };
  stable_deref_trait_1_1_1_features = f: updateFeatures f (rec {
    stable_deref_trait_1_1_1.default = (f.stable_deref_trait_1_1_1.default or true);
    stable_deref_trait_1_1_1.std =
      (f.stable_deref_trait_1_1_1.std or false) ||
      (f.stable_deref_trait_1_1_1.default or false) ||
      (stable_deref_trait_1_1_1.default or false);
  }) [];
  strsim_0_7_0 = { features?(strsim_0_7_0_features {}) }: strsim_0_7_0_ {};
  strsim_0_7_0_features = f: updateFeatures f (rec {
    strsim_0_7_0.default = (f.strsim_0_7_0.default or true);
  }) [];
  syn_0_14_9 = { features?(syn_0_14_9_features {}) }: syn_0_14_9_ {
    dependencies = mapFeatures features ([ proc_macro2_0_4_19 unicode_xid_0_1_0 ]
      ++ (if features.syn_0_14_9.quote or false then [ quote_0_6_8 ] else []));
    features = mkFeatures (features.syn_0_14_9 or {});
  };
  syn_0_14_9_features = f: updateFeatures f (rec {
    proc_macro2_0_4_19.default = (f.proc_macro2_0_4_19.default or false);
    proc_macro2_0_4_19.proc-macro =
      (f.proc_macro2_0_4_19.proc-macro or false) ||
      (syn_0_14_9.proc-macro or false) ||
      (f.syn_0_14_9.proc-macro or false);
    quote_0_6_8.default = (f.quote_0_6_8.default or false);
    quote_0_6_8.proc-macro =
      (f.quote_0_6_8.proc-macro or false) ||
      (syn_0_14_9.proc-macro or false) ||
      (f.syn_0_14_9.proc-macro or false);
    syn_0_14_9.clone-impls =
      (f.syn_0_14_9.clone-impls or false) ||
      (f.syn_0_14_9.default or false) ||
      (syn_0_14_9.default or false);
    syn_0_14_9.default = (f.syn_0_14_9.default or true);
    syn_0_14_9.derive =
      (f.syn_0_14_9.derive or false) ||
      (f.syn_0_14_9.default or false) ||
      (syn_0_14_9.default or false);
    syn_0_14_9.parsing =
      (f.syn_0_14_9.parsing or false) ||
      (f.syn_0_14_9.default or false) ||
      (syn_0_14_9.default or false);
    syn_0_14_9.printing =
      (f.syn_0_14_9.printing or false) ||
      (f.syn_0_14_9.default or false) ||
      (syn_0_14_9.default or false);
    syn_0_14_9.proc-macro =
      (f.syn_0_14_9.proc-macro or false) ||
      (f.syn_0_14_9.default or false) ||
      (syn_0_14_9.default or false);
    syn_0_14_9.quote =
      (f.syn_0_14_9.quote or false) ||
      (f.syn_0_14_9.printing or false) ||
      (syn_0_14_9.printing or false);
    unicode_xid_0_1_0.default = true;
  }) [ proc_macro2_0_4_19_features quote_0_6_8_features unicode_xid_0_1_0_features ];
  syn_0_15_4 = { features?(syn_0_15_4_features {}) }: syn_0_15_4_ {
    dependencies = mapFeatures features ([ proc_macro2_0_4_19 unicode_xid_0_1_0 ]
      ++ (if features.syn_0_15_4.quote or false then [ quote_0_6_8 ] else []));
    features = mkFeatures (features.syn_0_15_4 or {});
  };
  syn_0_15_4_features = f: updateFeatures f (rec {
    proc_macro2_0_4_19.default = (f.proc_macro2_0_4_19.default or false);
    proc_macro2_0_4_19.proc-macro =
      (f.proc_macro2_0_4_19.proc-macro or false) ||
      (syn_0_15_4.proc-macro or false) ||
      (f.syn_0_15_4.proc-macro or false);
    quote_0_6_8.default = (f.quote_0_6_8.default or false);
    quote_0_6_8.proc-macro =
      (f.quote_0_6_8.proc-macro or false) ||
      (syn_0_15_4.proc-macro or false) ||
      (f.syn_0_15_4.proc-macro or false);
    syn_0_15_4.clone-impls =
      (f.syn_0_15_4.clone-impls or false) ||
      (f.syn_0_15_4.default or false) ||
      (syn_0_15_4.default or false);
    syn_0_15_4.default = (f.syn_0_15_4.default or true);
    syn_0_15_4.derive =
      (f.syn_0_15_4.derive or false) ||
      (f.syn_0_15_4.default or false) ||
      (syn_0_15_4.default or false);
    syn_0_15_4.parsing =
      (f.syn_0_15_4.parsing or false) ||
      (f.syn_0_15_4.default or false) ||
      (syn_0_15_4.default or false);
    syn_0_15_4.printing =
      (f.syn_0_15_4.printing or false) ||
      (f.syn_0_15_4.default or false) ||
      (syn_0_15_4.default or false);
    syn_0_15_4.proc-macro =
      (f.syn_0_15_4.proc-macro or false) ||
      (f.syn_0_15_4.default or false) ||
      (syn_0_15_4.default or false);
    syn_0_15_4.quote =
      (f.syn_0_15_4.quote or false) ||
      (f.syn_0_15_4.printing or false) ||
      (syn_0_15_4.printing or false);
    unicode_xid_0_1_0.default = true;
  }) [ proc_macro2_0_4_19_features quote_0_6_8_features unicode_xid_0_1_0_features ];
  synstructure_0_9_0 = { features?(synstructure_0_9_0_features {}) }: synstructure_0_9_0_ {
    dependencies = mapFeatures features ([ proc_macro2_0_4_19 quote_0_6_8 syn_0_14_9 unicode_xid_0_1_0 ]);
    features = mkFeatures (features.synstructure_0_9_0 or {});
  };
  synstructure_0_9_0_features = f: updateFeatures f (rec {
    proc_macro2_0_4_19.default = true;
    quote_0_6_8.default = true;
    syn_0_14_9.default = true;
    syn_0_14_9.extra-traits = true;
    syn_0_14_9.visit = true;
    synstructure_0_9_0.default = (f.synstructure_0_9_0.default or true);
    unicode_xid_0_1_0.default = true;
  }) [ proc_macro2_0_4_19_features quote_0_6_8_features syn_0_14_9_features unicode_xid_0_1_0_features ];
  tar_0_4_16 = { features?(tar_0_4_16_features {}) }: tar_0_4_16_ {
    dependencies = mapFeatures features ([ filetime_0_2_1 ])
      ++ (if kernel == "redox" then mapFeatures features ([ redox_syscall_0_1_40 ]) else [])
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ libc_0_2_43 ]) else []);
  };
  tar_0_4_16_features = f: updateFeatures f (rec {
    filetime_0_2_1.default = true;
    libc_0_2_43.default = true;
    redox_syscall_0_1_40.default = true;
    tar_0_4_16.default = (f.tar_0_4_16.default or true);
    tar_0_4_16.xattr =
      (f.tar_0_4_16.xattr or false) ||
      (f.tar_0_4_16.default or false) ||
      (tar_0_4_16.default or false);
  }) [ filetime_0_2_1_features redox_syscall_0_1_40_features libc_0_2_43_features ];
  tempfile_3_0_4 = { features?(tempfile_3_0_4_features {}) }: tempfile_3_0_4_ {
    dependencies = mapFeatures features ([ cfg_if_0_1_5 rand_0_5_5 remove_dir_all_0_5_1 ])
      ++ (if kernel == "redox" then mapFeatures features ([ redox_syscall_0_1_40 ]) else [])
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ libc_0_2_43 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ winapi_0_3_5 ]) else []);
  };
  tempfile_3_0_4_features = f: updateFeatures f (rec {
    cfg_if_0_1_5.default = true;
    libc_0_2_43.default = true;
    rand_0_5_5.default = true;
    redox_syscall_0_1_40.default = true;
    remove_dir_all_0_5_1.default = true;
    tempfile_3_0_4.default = (f.tempfile_3_0_4.default or true);
    winapi_0_3_5.default = true;
    winapi_0_3_5.fileapi = true;
    winapi_0_3_5.handleapi = true;
    winapi_0_3_5.winbase = true;
  }) [ cfg_if_0_1_5_features rand_0_5_5_features remove_dir_all_0_5_1_features redox_syscall_0_1_40_features libc_0_2_43_features winapi_0_3_5_features ];
  termcolor_1_0_4 = { features?(termcolor_1_0_4_features {}) }: termcolor_1_0_4_ {
    dependencies = (if kernel == "windows" then mapFeatures features ([ wincolor_1_0_1 ]) else []);
  };
  termcolor_1_0_4_features = f: updateFeatures f (rec {
    termcolor_1_0_4.default = (f.termcolor_1_0_4.default or true);
    wincolor_1_0_1.default = true;
  }) [ wincolor_1_0_1_features ];
  termion_1_5_1 = { features?(termion_1_5_1_features {}) }: termion_1_5_1_ {
    dependencies = (if !(kernel == "redox") then mapFeatures features ([ libc_0_2_43 ]) else [])
      ++ (if kernel == "redox" then mapFeatures features ([ redox_syscall_0_1_40 redox_termios_0_1_1 ]) else []);
  };
  termion_1_5_1_features = f: updateFeatures f (rec {
    libc_0_2_43.default = true;
    redox_syscall_0_1_40.default = true;
    redox_termios_0_1_1.default = true;
    termion_1_5_1.default = (f.termion_1_5_1.default or true);
  }) [ libc_0_2_43_features redox_syscall_0_1_40_features redox_termios_0_1_1_features ];
  textwrap_0_10_0 = { features?(textwrap_0_10_0_features {}) }: textwrap_0_10_0_ {
    dependencies = mapFeatures features ([ unicode_width_0_1_5 ]);
  };
  textwrap_0_10_0_features = f: updateFeatures f (rec {
    textwrap_0_10_0.default = (f.textwrap_0_10_0.default or true);
    unicode_width_0_1_5.default = true;
  }) [ unicode_width_0_1_5_features ];
  thread_local_0_3_6 = { features?(thread_local_0_3_6_features {}) }: thread_local_0_3_6_ {
    dependencies = mapFeatures features ([ lazy_static_1_1_0 ]);
  };
  thread_local_0_3_6_features = f: updateFeatures f (rec {
    lazy_static_1_1_0.default = true;
    thread_local_0_3_6.default = (f.thread_local_0_3_6.default or true);
  }) [ lazy_static_1_1_0_features ];
  toml_0_4_6 = { features?(toml_0_4_6_features {}) }: toml_0_4_6_ {
    dependencies = mapFeatures features ([ serde_1_0_79 ]);
  };
  toml_0_4_6_features = f: updateFeatures f (rec {
    serde_1_0_79.default = true;
    toml_0_4_6.default = (f.toml_0_4_6.default or true);
  }) [ serde_1_0_79_features ];
  ucd_util_0_1_1 = { features?(ucd_util_0_1_1_features {}) }: ucd_util_0_1_1_ {};
  ucd_util_0_1_1_features = f: updateFeatures f (rec {
    ucd_util_0_1_1.default = (f.ucd_util_0_1_1.default or true);
  }) [];
  unicode_bidi_0_3_4 = { features?(unicode_bidi_0_3_4_features {}) }: unicode_bidi_0_3_4_ {
    dependencies = mapFeatures features ([ matches_0_1_8 ]);
    features = mkFeatures (features.unicode_bidi_0_3_4 or {});
  };
  unicode_bidi_0_3_4_features = f: updateFeatures f (rec {
    matches_0_1_8.default = true;
    unicode_bidi_0_3_4.default = (f.unicode_bidi_0_3_4.default or true);
    unicode_bidi_0_3_4.flame =
      (f.unicode_bidi_0_3_4.flame or false) ||
      (f.unicode_bidi_0_3_4.flame_it or false) ||
      (unicode_bidi_0_3_4.flame_it or false);
    unicode_bidi_0_3_4.flamer =
      (f.unicode_bidi_0_3_4.flamer or false) ||
      (f.unicode_bidi_0_3_4.flame_it or false) ||
      (unicode_bidi_0_3_4.flame_it or false);
    unicode_bidi_0_3_4.serde =
      (f.unicode_bidi_0_3_4.serde or false) ||
      (f.unicode_bidi_0_3_4.with_serde or false) ||
      (unicode_bidi_0_3_4.with_serde or false);
  }) [ matches_0_1_8_features ];
  unicode_normalization_0_1_7 = { features?(unicode_normalization_0_1_7_features {}) }: unicode_normalization_0_1_7_ {};
  unicode_normalization_0_1_7_features = f: updateFeatures f (rec {
    unicode_normalization_0_1_7.default = (f.unicode_normalization_0_1_7.default or true);
  }) [];
  unicode_width_0_1_5 = { features?(unicode_width_0_1_5_features {}) }: unicode_width_0_1_5_ {
    features = mkFeatures (features.unicode_width_0_1_5 or {});
  };
  unicode_width_0_1_5_features = f: updateFeatures f (rec {
    unicode_width_0_1_5.default = (f.unicode_width_0_1_5.default or true);
  }) [];
  unicode_xid_0_1_0 = { features?(unicode_xid_0_1_0_features {}) }: unicode_xid_0_1_0_ {
    features = mkFeatures (features.unicode_xid_0_1_0 or {});
  };
  unicode_xid_0_1_0_features = f: updateFeatures f (rec {
    unicode_xid_0_1_0.default = (f.unicode_xid_0_1_0.default or true);
  }) [];
  unreachable_1_0_0 = { features?(unreachable_1_0_0_features {}) }: unreachable_1_0_0_ {
    dependencies = mapFeatures features ([ void_1_0_2 ]);
  };
  unreachable_1_0_0_features = f: updateFeatures f (rec {
    unreachable_1_0_0.default = (f.unreachable_1_0_0.default or true);
    void_1_0_2.default = (f.void_1_0_2.default or false);
  }) [ void_1_0_2_features ];
  url_1_7_1 = { features?(url_1_7_1_features {}) }: url_1_7_1_ {
    dependencies = mapFeatures features ([ idna_0_1_5 matches_0_1_8 percent_encoding_1_0_1 ]);
    features = mkFeatures (features.url_1_7_1 or {});
  };
  url_1_7_1_features = f: updateFeatures f (rec {
    idna_0_1_5.default = true;
    matches_0_1_8.default = true;
    percent_encoding_1_0_1.default = true;
    url_1_7_1.default = (f.url_1_7_1.default or true);
    url_1_7_1.encoding =
      (f.url_1_7_1.encoding or false) ||
      (f.url_1_7_1.query_encoding or false) ||
      (url_1_7_1.query_encoding or false);
    url_1_7_1.heapsize =
      (f.url_1_7_1.heapsize or false) ||
      (f.url_1_7_1.heap_size or false) ||
      (url_1_7_1.heap_size or false);
  }) [ idna_0_1_5_features matches_0_1_8_features percent_encoding_1_0_1_features ];
  utf8_ranges_1_0_1 = { features?(utf8_ranges_1_0_1_features {}) }: utf8_ranges_1_0_1_ {};
  utf8_ranges_1_0_1_features = f: updateFeatures f (rec {
    utf8_ranges_1_0_1.default = (f.utf8_ranges_1_0_1.default or true);
  }) [];
  vcpkg_0_2_6 = { features?(vcpkg_0_2_6_features {}) }: vcpkg_0_2_6_ {};
  vcpkg_0_2_6_features = f: updateFeatures f (rec {
    vcpkg_0_2_6.default = (f.vcpkg_0_2_6.default or true);
  }) [];
  vec_map_0_8_1 = { features?(vec_map_0_8_1_features {}) }: vec_map_0_8_1_ {
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.vec_map_0_8_1 or {});
  };
  vec_map_0_8_1_features = f: updateFeatures f (rec {
    vec_map_0_8_1.default = (f.vec_map_0_8_1.default or true);
    vec_map_0_8_1.serde =
      (f.vec_map_0_8_1.serde or false) ||
      (f.vec_map_0_8_1.eders or false) ||
      (vec_map_0_8_1.eders or false);
  }) [];
  version_check_0_1_4 = { features?(version_check_0_1_4_features {}) }: version_check_0_1_4_ {};
  version_check_0_1_4_features = f: updateFeatures f (rec {
    version_check_0_1_4.default = (f.version_check_0_1_4.default or true);
  }) [];
  void_1_0_2 = { features?(void_1_0_2_features {}) }: void_1_0_2_ {
    features = mkFeatures (features.void_1_0_2 or {});
  };
  void_1_0_2_features = f: updateFeatures f (rec {
    void_1_0_2.default = (f.void_1_0_2.default or true);
    void_1_0_2.std =
      (f.void_1_0_2.std or false) ||
      (f.void_1_0_2.default or false) ||
      (void_1_0_2.default or false);
  }) [];
  walkdir_2_2_5 = { features?(walkdir_2_2_5_features {}) }: walkdir_2_2_5_ {
    dependencies = mapFeatures features ([ same_file_1_0_3 ])
      ++ (if kernel == "windows" then mapFeatures features ([ winapi_0_3_5 winapi_util_0_1_1 ]) else []);
  };
  walkdir_2_2_5_features = f: updateFeatures f (rec {
    same_file_1_0_3.default = true;
    walkdir_2_2_5.default = (f.walkdir_2_2_5.default or true);
    winapi_0_3_5.default = true;
    winapi_0_3_5.std = true;
    winapi_0_3_5.winnt = true;
    winapi_util_0_1_1.default = true;
  }) [ same_file_1_0_3_features winapi_0_3_5_features winapi_util_0_1_1_features ];
  winapi_0_2_8 = { features?(winapi_0_2_8_features {}) }: winapi_0_2_8_ {};
  winapi_0_2_8_features = f: updateFeatures f (rec {
    winapi_0_2_8.default = (f.winapi_0_2_8.default or true);
  }) [];
  winapi_0_3_5 = { features?(winapi_0_3_5_features {}) }: winapi_0_3_5_ {
    dependencies = (if kernel == "i686-pc-windows-gnu" then mapFeatures features ([ winapi_i686_pc_windows_gnu_0_4_0 ]) else [])
      ++ (if kernel == "x86_64-pc-windows-gnu" then mapFeatures features ([ winapi_x86_64_pc_windows_gnu_0_4_0 ]) else []);
    features = mkFeatures (features.winapi_0_3_5 or {});
  };
  winapi_0_3_5_features = f: updateFeatures f (rec {
    winapi_0_3_5.default = (f.winapi_0_3_5.default or true);
    winapi_i686_pc_windows_gnu_0_4_0.default = true;
    winapi_x86_64_pc_windows_gnu_0_4_0.default = true;
  }) [ winapi_i686_pc_windows_gnu_0_4_0_features winapi_x86_64_pc_windows_gnu_0_4_0_features ];
  winapi_build_0_1_1 = { features?(winapi_build_0_1_1_features {}) }: winapi_build_0_1_1_ {};
  winapi_build_0_1_1_features = f: updateFeatures f (rec {
    winapi_build_0_1_1.default = (f.winapi_build_0_1_1.default or true);
  }) [];
  winapi_i686_pc_windows_gnu_0_4_0 = { features?(winapi_i686_pc_windows_gnu_0_4_0_features {}) }: winapi_i686_pc_windows_gnu_0_4_0_ {};
  winapi_i686_pc_windows_gnu_0_4_0_features = f: updateFeatures f (rec {
    winapi_i686_pc_windows_gnu_0_4_0.default = (f.winapi_i686_pc_windows_gnu_0_4_0.default or true);
  }) [];
  winapi_util_0_1_1 = { features?(winapi_util_0_1_1_features {}) }: winapi_util_0_1_1_ {
    dependencies = (if kernel == "windows" then mapFeatures features ([ winapi_0_3_5 ]) else []);
  };
  winapi_util_0_1_1_features = f: updateFeatures f (rec {
    winapi_0_3_5.consoleapi = true;
    winapi_0_3_5.default = true;
    winapi_0_3_5.errhandlingapi = true;
    winapi_0_3_5.fileapi = true;
    winapi_0_3_5.minwindef = true;
    winapi_0_3_5.processenv = true;
    winapi_0_3_5.std = true;
    winapi_0_3_5.winbase = true;
    winapi_0_3_5.wincon = true;
    winapi_0_3_5.winerror = true;
    winapi_util_0_1_1.default = (f.winapi_util_0_1_1.default or true);
  }) [ winapi_0_3_5_features ];
  winapi_x86_64_pc_windows_gnu_0_4_0 = { features?(winapi_x86_64_pc_windows_gnu_0_4_0_features {}) }: winapi_x86_64_pc_windows_gnu_0_4_0_ {};
  winapi_x86_64_pc_windows_gnu_0_4_0_features = f: updateFeatures f (rec {
    winapi_x86_64_pc_windows_gnu_0_4_0.default = (f.winapi_x86_64_pc_windows_gnu_0_4_0.default or true);
  }) [];
  wincolor_1_0_1 = { features?(wincolor_1_0_1_features {}) }: wincolor_1_0_1_ {
    dependencies = mapFeatures features ([ winapi_0_3_5 winapi_util_0_1_1 ]);
  };
  wincolor_1_0_1_features = f: updateFeatures f (rec {
    winapi_0_3_5.default = true;
    winapi_0_3_5.minwindef = true;
    winapi_0_3_5.wincon = true;
    winapi_util_0_1_1.default = true;
    wincolor_1_0_1.default = (f.wincolor_1_0_1.default or true);
  }) [ winapi_0_3_5_features winapi_util_0_1_1_features ];
}
