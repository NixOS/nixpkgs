diff --git a/soh/soh/Extractor/Extract.cpp b/soh/soh/Extractor/Extract.cpp
index 143a8638..063a63da 100644
--- a/soh/soh/Extractor/Extract.cpp
+++ b/soh/soh/Extractor/Extract.cpp
@@ -498,28 +498,27 @@ const char* Extractor::GetZapdVerStr() const {
 
 extern "C" int zapd_main(int argc, char** argv);
 
-bool Extractor::CallZapd() {
+bool Extractor::CallZapd(std::string &assetPath) {
     constexpr int argc = 16;
-    char xmlPath[1024];
-    char confPath[1024];
     std::array<const char*, argc> argv;
     const char* version = GetZapdVerStr();
 
-    snprintf(xmlPath, 1024, "assets/extractor/xmls/%s", version);
-    snprintf(confPath, 1024, "assets/extractor/Config_%s.xml", version);
+    std::string xmlPath = assetPath + "/assets/extractor/xmls/" + version;
+    std::string confPath = assetPath + "/assets/extractor/Config_" + version + ".xml";
+    std::string fileListsPath = assetPath + "/assets/extractor/filelists";
 
     argv[0] = "ZAPD";
     argv[1] = "ed";
     argv[2] = "-i";
-    argv[3] = xmlPath;
+    argv[3] = xmlPath.c_str();
     argv[4] = "-b";
     argv[5] = mCurrentRomPath.c_str();
     argv[6] = "-fl";
-    argv[7] = "assets/extractor/filelists";
+    argv[7] = fileListsPath.c_str();
     argv[8] = "-gsf";
-    argv[9] = "1";
+    argv[9] = "0";
     argv[10] = "-rconf";
-    argv[11] = confPath;
+    argv[11] = confPath.c_str();
     argv[12] = "-se";
     argv[13] = "OTR";
     argv[14] = "--otrfile";
diff --git a/soh/soh/Extractor/Extract.h b/soh/soh/Extractor/Extract.h
index e4eb2e5b..3c95b025 100644
--- a/soh/soh/Extractor/Extract.h
+++ b/soh/soh/Extractor/Extract.h
@@ -57,7 +57,7 @@ class Extractor {
     bool IsMasterQuest() const;
 
     bool Run(RomSearchMode searchMode = RomSearchMode::Both);
-    bool CallZapd();
+    bool CallZapd(std::string& assetPath);
     const char* GetZapdStr();
 };
 #endif
diff --git a/soh/soh/OTRGlobals.cpp b/soh/soh/OTRGlobals.cpp
index 3a75545a..bb4f5372 100644
--- a/soh/soh/OTRGlobals.cpp
+++ b/soh/soh/OTRGlobals.cpp
@@ -205,11 +205,11 @@ const char* constCameraStrings[] = {
 
 OTRGlobals::OTRGlobals() {
     std::vector<std::string> OTRFiles;
-    std::string mqPath = LUS::Context::GetPathRelativeToAppDirectory("oot-mq.otr");
+    std::string mqPath = LUS::Context::FindFileFromAllAppDirectories("oot-mq.otr");
     if (std::filesystem::exists(mqPath)) { 
         OTRFiles.push_back(mqPath);
     } 
-    std::string ootPath = LUS::Context::GetPathRelativeToAppDirectory("oot.otr");
+    std::string ootPath = LUS::Context::FindFileFromAllAppDirectories("oot.otr");
     if (std::filesystem::exists(ootPath)) {
         OTRFiles.push_back(ootPath);
     }
@@ -217,7 +217,7 @@ OTRGlobals::OTRGlobals() {
     if (std::filesystem::exists(sohOtrPath)) {
         OTRFiles.push_back(sohOtrPath);
     }
-    std::string patchesPath = LUS::Context::GetPathRelativeToAppDirectory("mods");
+    std::string patchesPath = LUS::Context::FindFileFromAllAppDirectories("mods");
     if (patchesPath.length() > 0 && std::filesystem::exists(patchesPath)) {
         if (std::filesystem::is_directory(patchesPath)) {
             for (const auto& p : std::filesystem::recursive_directory_iterator(patchesPath)) {
@@ -714,8 +714,16 @@ extern "C" void OTRExtScanner() {
 
 extern "C" void InitOTR() {
 #if not defined (__SWITCH__) && not defined(__WIIU__)
-    if (!std::filesystem::exists(LUS::Context::GetPathRelativeToAppDirectory("oot-mq.otr")) &&
-        !std::filesystem::exists(LUS::Context::GetPathRelativeToAppDirectory("oot.otr"))){
+    if (!std::filesystem::exists(LUS::Context::FindFileFromAllAppDirectories("oot-mq.otr")) &&
+        !std::filesystem::exists(LUS::Context::FindFileFromAllAppDirectories("oot.otr"))){
+        std::string exporterAssetPath = LUS::Context::GetAppBundlePath();
+        // if soh-otr-exporter is not installed:
+        if (!std::filesystem::exists(exporterAssetPath + "/assets/extractor")) {
+            Extractor::ShowErrorBox("Error", "No OTR files found. Cannot create OTR file without the files needed for the exporter.\n"
+                "Please install soh-otr-exporter[-git] and proceed to rerun this program. Exiting now...");
+            exit(1);
+        }
+
         bool generatedOtrIsMQ = false;
         if (Extractor::ShowYesNoBox("No OTR Files", "No OTR files found. Generate one now?") == IDYES) {
             Extractor extract;
@@ -723,7 +731,7 @@ extern "C" void InitOTR() {
                 Extractor::ShowErrorBox("Error", "An error occured, no OTR file was generated. Exiting...");
                 exit(1);
             }
-            extract.CallZapd();
+            extract.CallZapd(exporterAssetPath);
             generatedOtrIsMQ = extract.IsMasterQuest();
         } else {
             exit(1);
@@ -733,9 +741,17 @@ extern "C" void InitOTR() {
             if (!extract.Run(generatedOtrIsMQ ? RomSearchMode::Vanilla : RomSearchMode::MQ)) {
                 Extractor::ShowErrorBox("Error", "An error occured, an OTR file may have been generated by a different step. Continuing...");
             } else {
-                extract.CallZapd();
+                extract.CallZapd(exporterAssetPath);
             }
         }
+
+        // copy OTR to app configuration path
+        if (std::filesystem::exists("oot-mq.otr")) {
+            std::filesystem::copy("oot-mq.otr", LUS::Context::GetAppDirectoryPath());
+        }
+        if (std::filesystem::exists("oot.otr")) {
+            std::filesystem::copy("oot.otr", LUS::Context::GetAppDirectoryPath());
+        }
     }
 #endif
 