diff --git a/src/display.cpp b/src/display.cpp
index 0f6552222b7..9d50046de2f 100644
--- a/src/display.cpp
+++ b/src/display.cpp
@@ -1082,7 +1082,8 @@ void display::get_terrain_images(const map_location& loc, const std::string& tim

 		// add the directional transitions
 		tod_color acol = atod1.color + color_adjust_;
-		lt += image::get_light_string(d + 1, acol.r, acol.g, acol.b);
+		auto new_lt = image::get_light_string(d + 1, acol.r, acol.g, acol.b);
+		lt.insert(lt.end(), new_lt.begin(), new_lt.end());
 	}

 	for(int d = 0; d < 6; ++d) {
@@ -1114,7 +1115,8 @@ void display::get_terrain_images(const map_location& loc, const std::string& tim

 		// add the directional transitions
 		tod_color acol = atod1.color + color_adjust_;
-		lt += image::get_light_string(d + 7, acol.r, acol.g, acol.b);
+		auto new_lt = image::get_light_string(d + 7, acol.r, acol.g, acol.b);
+		lt.insert(lt.end(), new_lt.begin(), new_lt.end());
 	}

 	for(int d = 0; d < 6; ++d) {
@@ -1146,7 +1148,8 @@ void display::get_terrain_images(const map_location& loc, const std::string& tim

 		// add the directional transitions
 		tod_color acol = atod2.color + color_adjust_;
-		lt += image::get_light_string(d + 13, acol.r, acol.g, acol.b);
+		auto new_lt = image::get_light_string(d + 13, acol.r, acol.g, acol.b);
+		lt.insert(lt.end(), new_lt.begin(), new_lt.end());
 	}

 	if(lt.empty()){
diff --git a/src/picture.cpp b/src/picture.cpp
index e7aeddaa821..5ad1ebcbcbc 100644
--- a/src/picture.cpp
+++ b/src/picture.cpp
@@ -526,7 +526,9 @@ static surface apply_light(surface surf, const light_string& ls)

 		// decompose into atomic lightmap operations (4 chars)
 		for(std::size_t c = 0; c + 3 < ls.size(); c += 4) {
-			light_string sls = ls.substr(c, 4);
+			auto start = ls.begin() + c;
+			auto end = start + 4;
+			light_string sls(start, end);

 			// get the corresponding image and apply the lightmap operation to it
 			// This allows to also cache lightmap parts.
diff --git a/src/picture.hpp b/src/picture.hpp
index 85a3b3a15a1..a26e1e27bc7 100644
--- a/src/picture.hpp
+++ b/src/picture.hpp
@@ -120,7 +120,7 @@ std::ostream& operator<<(std::ostream&, const locator&);
  *  7-12: convex half-corners 1
  * 13-19: convex half-corners 2
  */
-typedef std::basic_string<signed char> light_string;
+typedef std::vector<signed char> light_string;
