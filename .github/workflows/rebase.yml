name: rebase

on:
  repository_dispatch:
    types: [rebase-command]

# This action allows people with write access to the repo to rebase a PRs base branch
# by commenting `/rebase ${branch}` on the PR while avoiding CODEOWNER notifications.

jobs:
  rebase:
    runs-on: ubuntu-latest
    if: github.repository_owner == 'NixOS'
    steps:
      - name: setup
        run: |
          cat <<EOF >>"$GITHUB_ENV"
          CAN_MODIFY=${{ github.event.client_payload.pull_request.maintainer_can_modify }}
          COMMITS=${{ github.event.client_payload.pull_request.commits }}
          CURRENT_BASE=${{ github.event.client_payload.pull_request.base.ref }}
          PR_BRANCH=${{ github.event.client_payload.pull_request.head.ref }}
          COMMENT_BRANCH=${{ github.event.client_payload.slash_command.args.unnamed.arg1 }}
          PULL_REQUEST=${{ github.event.client_payload.pull_request.number }}
          EOF
      - name: check branch
        env:
          PERMANENT_BRANCHES: "haskell-updates|master|nixos|nixpkgs|python-unstable|release|staging"
          VALID_BRANCHES: "haskell-updates|master|python-unstable|release-20.09|release-21.05|staging|staging-20.09|staging-21.05|staging-next|staging-next-21.05"
        run: |
          message() {
            cat <<EOF
          Can't rebase $PR_BRANCH from $CURRENT_BASE onto $COMMENT_BRANCH (PR:$PULL_REQUEST COMMITS:$COMMITS)
          EOF
          }
          if ! [[ "$COMMENT_BRANCH" =~ ^($VALID_BRANCHES)$ ]]; then
            cat <<EOF
          Check that the branch from the comment is valid:

          $(message)

          This action can only rebase onto these branches:

          $VALID_BRANCHES

          \`/rebase \${branch}\` must be at the start of the first line of the comment.
          EOF
            exit 1
          fi
          if [[ "$COMMENT_BRANCH" == "$PR_BRANCH" ]]; then
            cat <<EOF
          Check that the branch from the comment isn't the current branch:

          $(message)
          EOF
            exit 1
          fi
          if [[ "$PR_BRANCH" =~ ^($PERMANENT_BRANCHES) ]]; then
            cat <<EOF
          Check that the PR branch isn't a permanent branch:

          $(message)
          EOF
            exit 1
          fi
          if [[ "$CAN_MODIFY" != "true" ]]; then
            cat <<EOF
          Check that maintainers can edit the PR branch:

          $(message)
          EOF
            exit 1
          fi
      - uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.client_payload.pull_request.number }}
          token: ${{ secrets.ACTIONS_TOKEN }}
          body: |
            Rebasing pull request, this will take a few minutes.

            The action will comment on the PR when the rebase is complete (or failed).
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          token: ${{ secrets.ACTIONS_TOKEN }}
      - name: rebase pull request
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_TOKEN }}
        run: |
          git config --global user.email "actions.user@email.com"
          git config --global user.name "actions.user"
          git fetch origin
          gh pr checkout "$PULL_REQUEST"
          if [[ "$COMMENT_BRANCH" == "CURRENT_BASE" ]]; then
            git rebase origin/"$CURRENT_BASE"
            git push --force
          else
            git rebase \
              --onto="$(git merge-base origin/"$CURRENT_BASE" origin/"$COMMENT_BRANCH")" \
              "HEAD~$COMMITS"
            git push --force
            curl \
              -X POST \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: token $GITHUB_TOKEN" \
              -d "{ \"base\": \"$COMMENT_BRANCH\" }" \
              "https://api.github.com/repos/${{ github.repository }}/pulls/$PULL_REQUEST"
          fi
      - uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.client_payload.pull_request.number }}
          token: ${{ secrets.ACTIONS_TOKEN }}
          body: |
            Rebased pull request.
      - uses: peter-evans/create-or-update-comment@v1
        if: failure()
        with:
          issue-number: ${{ github.event.client_payload.pull_request.number }}
          token: ${{ secrets.ACTIONS_TOKEN }}
          body: |
            [Failed to rebase.](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
