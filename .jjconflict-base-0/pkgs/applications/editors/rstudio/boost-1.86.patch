diff --git a/src/cpp/core/json/JsonRpc.cpp b/src/cpp/core/json/JsonRpc.cpp
index d034ffe..4b08486 100644
--- a/src/cpp/core/json/JsonRpc.cpp
+++ b/src/cpp/core/json/JsonRpc.cpp
@@ -193,7 +193,7 @@ void JsonRpcResponse::setAfterResponse(
    
 bool JsonRpcResponse::hasAfterResponse() const
 {
-   return afterResponse_;
+   return !afterResponse_.empty();
 }
    
    
diff --git a/src/cpp/session/modules/rmarkdown/NotebookExec.cpp b/src/cpp/session/modules/rmarkdown/NotebookExec.cpp
index 5631a1f..0e3030b 100644
--- a/src/cpp/session/modules/rmarkdown/NotebookExec.cpp
+++ b/src/cpp/session/modules/rmarkdown/NotebookExec.cpp
@@ -193,7 +193,7 @@ void ChunkExecContext::connect()
 
    // leave an execution lock in this folder so it won't be moved if the notebook
    // is saved while executing
-   auto lock = make_unique<ScopedFileLock>(
+   auto lock = rstudio::core::make_unique<ScopedFileLock>(
        FileLock::createDefault(),
        outputPath_.completePath(kExecutionLock));
    locks_.push_back(std::move(lock));
@@ -204,7 +204,7 @@ void ChunkExecContext::connect()
       initializeOutput();
 
    // capture conditions
-   auto pConditionCapture = make_unique<ConditionCapture>();
+   auto pConditionCapture = rstudio::core::make_unique<ConditionCapture>();
    pConditionCapture->connect();
    captures_.push_back(std::move(pConditionCapture));
    connections_.push_back(events().onCondition.connect(
@@ -234,7 +234,7 @@ void ChunkExecContext::connect()
          boost::bind(&ChunkExecContext::onFileOutput, this, _1, _2, 
                      _3, ChunkOutputPlot, _4)));
 
-   auto pPlotCapture = make_unique<PlotCapture>();
+   auto pPlotCapture = rstudio::core::make_unique<PlotCapture>();
    if (figWidth > 0 || figHeight > 0)
    {
       // user specified plot size, use it
@@ -261,7 +261,7 @@ void ChunkExecContext::connect()
          boost::bind(&ChunkExecContext::onFileOutput, this, _1, _2, _3, 
                      ChunkOutputHtml, 0)));
 
-   auto pHtmlCapture = make_unique<HtmlCapture>();
+   auto pHtmlCapture = rstudio::core::make_unique<HtmlCapture>();
    error = pHtmlCapture->connectHtmlCapture(
             outputPath_,
             outputPath_.getParent().completePath(kChunkLibDir),
@@ -316,14 +316,14 @@ void ChunkExecContext::connect()
    prevCharWidth_ = r::options::getOptionWidth();
    r::options::setOptionWidth(charWidth_);
 
-   auto pDirCapture = make_unique<DirCapture>();
+   auto pDirCapture = rstudio::core::make_unique<DirCapture>();
    error = pDirCapture->connectDir(docId_, workingDir_);
    if (error)
       LOG_ERROR(error);
    captures_.push_back(std::move(pDirCapture));
 
    // begin capturing errors
-   auto pErrorCapture = make_unique<ErrorCapture>();
+   auto pErrorCapture = rstudio::core::make_unique<ErrorCapture>();
    pErrorCapture->connect();
    captures_.push_back(std::move(pErrorCapture));
 
@@ -341,7 +341,7 @@ void ChunkExecContext::connect()
          boost::bind(&ChunkExecContext::onFileOutput, this, _1, _2, _3, 
                      ChunkOutputData, 0)));
 
-   auto pDataCapture = make_unique<DataCapture>();
+   auto pDataCapture = rstudio::core::make_unique<DataCapture>();
    error = pDataCapture->connectDataCapture(
             outputPath_,
             options_.mergedOptions());
@@ -661,7 +661,7 @@ void ChunkExecContext::initializeOutput()
 
    // leave an execution lock in this folder so it won't be moved if the notebook
    // is saved while executing
-   auto lock = make_unique<ScopedFileLock>(
+   auto lock = rstudio::core::make_unique<ScopedFileLock>(
        FileLock::createDefault(),
        outputPath.completePath(kExecutionLock));
    locks_.push_back(std::move(lock));
