* pkgs.nix-gitignore
  :PROPERTIES:
  :CUSTOM_ID: sec-pkgs-nix-gitignore
  :END:

=pkgs.nix-gitignore= is a function that acts similarly to
=builtins.filterSource= but also allows filtering with the help of the
gitignore format.

** Usage
   :PROPERTIES:
   :CUSTOM_ID: sec-pkgs-nix-gitignore-usage
   :END:

=pkgs.nix-gitignore= exports a number of functions, but you'll most
likely need either =gitignoreSource= or =gitignoreSourcePure=. As their
first argument, they both accept either 1. a file with gitignore lines
or 2. a string with gitignore lines, or 3. a list of either of the two.
They will be concatenated into a single big string.

#+BEGIN_EXAMPLE
  { pkgs ? import <nixpkgs> {} }:

   nix-gitignore.gitignoreSource [] ./source
       # Simplest version

   nix-gitignore.gitignoreSource "supplemental-ignores\n" ./source
       # This one reads the ./source/.gitignore and concats the auxiliary ignores

   nix-gitignore.gitignoreSourcePure "ignore-this\nignore-that\n" ./source
       # Use this string as gitignore, don't read ./source/.gitignore.

   nix-gitignore.gitignoreSourcePure ["ignore-this\nignore-that\n", ~/.gitignore] ./source
       # It also accepts a list (of strings and paths) that will be concatenated
       # once the paths are turned to strings via readFile.
    
#+END_EXAMPLE

These functions are derived from the =Filter= functions by setting the
first filter argument to =(_: _: true)=:

#+BEGIN_EXAMPLE
  gitignoreSourcePure = gitignoreFilterSourcePure (_: _: true);
  gitignoreSource = gitignoreFilterSource (_: _: true);
    
#+END_EXAMPLE

Those filter functions accept the same arguments the
=builtins.filterSource= function would pass to its filters, thus
=fn: gitignoreFilterSourcePure fn ""= should be extensionally equivalent
to =filterSource=. The file is blacklisted iff it's blacklisted by
either your filter or the gitignoreFilter.

If you want to make your own filter from scratch, you may use

#+BEGIN_EXAMPLE
  gitignoreFilter = ign: root: filterPattern (gitignoreToPatterns ign) root;
    
#+END_EXAMPLE

** gitignore files in subdirectories
   :PROPERTIES:
   :CUSTOM_ID: sec-pkgs-nix-gitignore-usage-recursive
   :END:

If you wish to use a filter that would search for .gitignore files in
subdirectories, just like git does by default, use this function:

#+BEGIN_EXAMPLE
  gitignoreFilterRecursiveSource = filter: patterns: root:
  # OR
  gitignoreRecursiveSource = gitignoreFilterSourcePure (_: _: true);
    
#+END_EXAMPLE
