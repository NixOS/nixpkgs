<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="sec-functions-library-trivial">
  <!-- Do not edit this file manually!

This file was generated using nixdoc[1]. Please edit the source Nix
file from which this XML was generated instead.

If you need to manually override the documentation of a single
function in this file, create a new override file at
`nixpkgs/docs/functions/library/overrides/<function-identifier>.xml`.

[1]: https://github.com/tazjin/nixdoc
-->
  <title>Miscellaneous functions</title>
  <section xml:id="function-library-lib.trivial.id">
    <title>
      <function>lib.trivial.id</function>
    </title>
    <xi:include href="./overrides/lib.trivial.id.xml">
      <xi:fallback>
        <subtitle>
          <literal>id :: a -> a</literal>
        </subtitle>
        <para>The identity function
For when you need a function that does “nothing”.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>x</varname>
            </term>
            <listitem>
              <para>The value to return</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.trivial.id" />
  </section>
  <section xml:id="function-library-lib.trivial.const">
    <title>
      <function>lib.trivial.const</function>
    </title>
    <xi:include href="./overrides/lib.trivial.const.xml">
      <xi:fallback>
        <subtitle>
          <literal>const :: a -> b -> a</literal>
        </subtitle>
        <para>The constant function</para>
        <para>Ignores the second argument. If called with only one argument,
constructs a function that always returns a static value.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>x</varname>
            </term>
            <listitem>
              <para>Value to return</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>y</varname>
            </term>
            <listitem>
              <para>Value to ignore</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <example>
          <title>
            <function>lib.trivial.const</function> usage example</title>
          <programlisting><![CDATA[
let f = const 5; in f 10
=> 5
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.trivial.const" />
  </section>
  <section xml:id="function-library-lib.trivial.concat">
    <title>
      <function>lib.trivial.concat</function>
    </title>
    <xi:include href="./overrides/lib.trivial.concat.xml">
      <xi:fallback>
        <subtitle>
          <literal>concat :: [a] -> [a] -> [a]</literal>
        </subtitle>
        <para>Concatenate two lists</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>x</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>y</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <example>
          <title>
            <function>lib.trivial.concat</function> usage example</title>
          <programlisting><![CDATA[
concat [ 1 2 ] [ 3 4 ]
=> [ 1 2 3 4 ]
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.trivial.concat" />
  </section>
  <section xml:id="function-library-lib.trivial.or">
    <title>
      <function>lib.trivial.or</function>
    </title>
    <xi:include href="./overrides/lib.trivial.or.xml">
      <xi:fallback>
        <para>boolean “or”</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>x</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>y</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.trivial.or" />
  </section>
  <section xml:id="function-library-lib.trivial.and">
    <title>
      <function>lib.trivial.and</function>
    </title>
    <xi:include href="./overrides/lib.trivial.and.xml">
      <xi:fallback>
        <para>boolean “and”</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>x</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>y</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.trivial.and" />
  </section>
  <section xml:id="function-library-lib.trivial.bitAnd">
    <title>
      <function>lib.trivial.bitAnd</function>
    </title>
    <xi:include href="./overrides/lib.trivial.bitAnd.xml">
      <xi:fallback>
        <para>bitwise “and”</para>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.trivial.bitAnd" />
  </section>
  <section xml:id="function-library-lib.trivial.bitOr">
    <title>
      <function>lib.trivial.bitOr</function>
    </title>
    <xi:include href="./overrides/lib.trivial.bitOr.xml">
      <xi:fallback>
        <para>bitwise “or”</para>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.trivial.bitOr" />
  </section>
  <section xml:id="function-library-lib.trivial.bitXor">
    <title>
      <function>lib.trivial.bitXor</function>
    </title>
    <xi:include href="./overrides/lib.trivial.bitXor.xml">
      <xi:fallback>
        <para>bitwise “xor”</para>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.trivial.bitXor" />
  </section>
  <section xml:id="function-library-lib.trivial.bitNot">
    <title>
      <function>lib.trivial.bitNot</function>
    </title>
    <xi:include href="./overrides/lib.trivial.bitNot.xml">
      <xi:fallback>
        <para>bitwise “not”</para>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.trivial.bitNot" />
  </section>
  <section xml:id="function-library-lib.trivial.boolToString">
    <title>
      <function>lib.trivial.boolToString</function>
    </title>
    <xi:include href="./overrides/lib.trivial.boolToString.xml">
      <xi:fallback>
        <subtitle>
          <literal>boolToString :: bool -> string</literal>
        </subtitle>
        <para>Convert a boolean to a string.</para>
        <para>This function uses the strings "true" and "false" to represent
boolean values. Calling `toString` on a bool instead returns "1"
and "" (sic!).</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>b</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.trivial.boolToString" />
  </section>
  <section xml:id="function-library-lib.trivial.mergeAttrs">
    <title>
      <function>lib.trivial.mergeAttrs</function>
    </title>
    <xi:include href="./overrides/lib.trivial.mergeAttrs.xml">
      <xi:fallback>
        <para>Merge two attribute sets shallowly, right side trumps left</para>
        <para>mergeAttrs :: attrs -> attrs -> attrs</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>x</varname>
            </term>
            <listitem>
              <para>Left attribute set</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>y</varname>
            </term>
            <listitem>
              <para>Right attribute set (higher precedence for equal keys)</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <example>
          <title>
            <function>lib.trivial.mergeAttrs</function> usage example</title>
          <programlisting><![CDATA[
mergeAttrs { a = 1; b = 2; } { b = 3; c = 4; }
=> { a = 1; b = 3; c = 4; }
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.trivial.mergeAttrs" />
  </section>
  <section xml:id="function-library-lib.trivial.flip">
    <title>
      <function>lib.trivial.flip</function>
    </title>
    <xi:include href="./overrides/lib.trivial.flip.xml">
      <xi:fallback>
        <subtitle>
          <literal>flip :: (a -> b -> c) -> (b -> a -> c)</literal>
        </subtitle>
        <para>Flip the order of the arguments of a binary function.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>f</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>a</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>b</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <example>
          <title>
            <function>lib.trivial.flip</function> usage example</title>
          <programlisting><![CDATA[
flip concat [1] [2]
=> [ 2 1 ]
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.trivial.flip" />
  </section>
  <section xml:id="function-library-lib.trivial.mapNullable">
    <title>
      <function>lib.trivial.mapNullable</function>
    </title>
    <xi:include href="./overrides/lib.trivial.mapNullable.xml">
      <xi:fallback>
        <para>Apply function if the supplied argument is non-null.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>f</varname>
            </term>
            <listitem>
              <para>Function to call</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>a</varname>
            </term>
            <listitem>
              <para>Argument to check for null before passing it to `f`</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <example>
          <title>
            <function>lib.trivial.mapNullable</function> usage example</title>
          <programlisting><![CDATA[
mapNullable (x: x+1) null
=> null
mapNullable (x: x+1) 22
=> 23
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.trivial.mapNullable" />
  </section>
  <section xml:id="function-library-lib.trivial.version">
    <title>
      <function>lib.trivial.version</function>
    </title>
    <xi:include href="./overrides/lib.trivial.version.xml">
      <xi:fallback>
        <para>Returns the current full nixpkgs version number.</para>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.trivial.version" />
  </section>
  <section xml:id="function-library-lib.trivial.release">
    <title>
      <function>lib.trivial.release</function>
    </title>
    <xi:include href="./overrides/lib.trivial.release.xml">
      <xi:fallback>
        <para>Returns the current nixpkgs release number as string.</para>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.trivial.release" />
  </section>
  <section xml:id="function-library-lib.trivial.codeName">
    <title>
      <function>lib.trivial.codeName</function>
    </title>
    <xi:include href="./overrides/lib.trivial.codeName.xml">
      <xi:fallback>
        <para>Returns the current nixpkgs release code name.</para>
        <para>On each release the first letter is bumped and a new animal is chosen
starting with that new letter.</para>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.trivial.codeName" />
  </section>
  <section xml:id="function-library-lib.trivial.versionSuffix">
    <title>
      <function>lib.trivial.versionSuffix</function>
    </title>
    <xi:include href="./overrides/lib.trivial.versionSuffix.xml">
      <xi:fallback>
        <para>Returns the current nixpkgs version suffix as string.</para>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.trivial.versionSuffix" />
  </section>
  <section xml:id="function-library-lib.trivial.revisionWithDefault">
    <title>
      <function>lib.trivial.revisionWithDefault</function>
    </title>
    <xi:include href="./overrides/lib.trivial.revisionWithDefault.xml">
      <xi:fallback>
        <subtitle>
          <literal>revisionWithDefault :: string -> string</literal>
        </subtitle>
        <para>Attempts to return the the current revision of nixpkgs and
returns the supplied default value otherwise.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>default</varname>
            </term>
            <listitem>
              <para>Default value to return if revision can not be determined</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.trivial.revisionWithDefault" />
  </section>
  <section xml:id="function-library-lib.trivial.inNixShell">
    <title>
      <function>lib.trivial.inNixShell</function>
    </title>
    <xi:include href="./overrides/lib.trivial.inNixShell.xml">
      <xi:fallback>
        <subtitle>
          <literal>inNixShell :: bool</literal>
        </subtitle>
        <para>Determine whether the function is being called from inside a Nix
shell.</para>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.trivial.inNixShell" />
  </section>
  <section xml:id="function-library-lib.trivial.min">
    <title>
      <function>lib.trivial.min</function>
    </title>
    <xi:include href="./overrides/lib.trivial.min.xml">
      <xi:fallback>
        <para>Return minimum of two numbers.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>x</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>y</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.trivial.min" />
  </section>
  <section xml:id="function-library-lib.trivial.max">
    <title>
      <function>lib.trivial.max</function>
    </title>
    <xi:include href="./overrides/lib.trivial.max.xml">
      <xi:fallback>
        <para>Return maximum of two numbers.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>x</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>y</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.trivial.max" />
  </section>
  <section xml:id="function-library-lib.trivial.mod">
    <title>
      <function>lib.trivial.mod</function>
    </title>
    <xi:include href="./overrides/lib.trivial.mod.xml">
      <xi:fallback>
        <para>Integer modulus</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>base</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>int</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <example>
          <title>
            <function>lib.trivial.mod</function> usage example</title>
          <programlisting><![CDATA[
mod 11 10
=> 1
mod 1 10
=> 1
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.trivial.mod" />
  </section>
  <section xml:id="function-library-lib.trivial.compare">
    <title>
      <function>lib.trivial.compare</function>
    </title>
    <xi:include href="./overrides/lib.trivial.compare.xml">
      <xi:fallback>
        <para>C-style comparisons</para>
        <para>a &lt; b,  compare a b => -1
a == b, compare a b => 0
a > b,  compare a b => 1</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>a</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>b</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.trivial.compare" />
  </section>
  <section xml:id="function-library-lib.trivial.splitByAndCompare">
    <title>
      <function>lib.trivial.splitByAndCompare</function>
    </title>
    <xi:include href="./overrides/lib.trivial.splitByAndCompare.xml">
      <xi:fallback>
        <subtitle>
          <literal>(a -> bool) -> (a -> a -> int) -> (a -> a -> int) -> (a -> a -> int)</literal>
        </subtitle>
        <para>Split type into two subtypes by predicate `p`, take all elements
of the first subtype to be less than all the elements of the
second subtype, compare elements of a single subtype with `yes`
and `no` respectively.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>p</varname>
            </term>
            <listitem>
              <para>Predicate</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>yes</varname>
            </term>
            <listitem>
              <para>Comparison function if predicate holds for both values</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>no</varname>
            </term>
            <listitem>
              <para>Comparison function if predicate holds for neither value</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>a</varname>
            </term>
            <listitem>
              <para>First value to compare</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>b</varname>
            </term>
            <listitem>
              <para>Second value to compare</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <example>
          <title>
            <function>lib.trivial.splitByAndCompare</function> usage example</title>
          <programlisting><![CDATA[
let cmp = splitByAndCompare (hasPrefix "foo") compare compare; in

cmp "a" "z" => -1
cmp "fooa" "fooz" => -1

cmp "f" "a" => 1
cmp "fooa" "a" => -1
# while
compare "fooa" "a" => 1
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.trivial.splitByAndCompare" />
  </section>
  <section xml:id="function-library-lib.trivial.importJSON">
    <title>
      <function>lib.trivial.importJSON</function>
    </title>
    <xi:include href="./overrides/lib.trivial.importJSON.xml">
      <xi:fallback>
        <para>Reads a JSON file.</para>
        <para>Type :: path -> any</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>path</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.trivial.importJSON" />
  </section>
  <section xml:id="function-library-lib.trivial.setFunctionArgs">
    <title>
      <function>lib.trivial.setFunctionArgs</function>
    </title>
    <xi:include href="./overrides/lib.trivial.setFunctionArgs.xml">
      <xi:fallback>
        <para>Add metadata about expected function arguments to a function.
The metadata should match the format given by
builtins.functionArgs, i.e. a set from expected argument to a bool
representing whether that argument has a default or not.
setFunctionArgs : (a → b) → Map String Bool → (a → b)</para>
        <para>This function is necessary because you can't dynamically create a
function of the { a, b ? foo, ... }: format, but some facilities
like callPackage expect to be able to query expected arguments.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>f</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>args</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.trivial.setFunctionArgs" />
  </section>
  <section xml:id="function-library-lib.trivial.functionArgs">
    <title>
      <function>lib.trivial.functionArgs</function>
    </title>
    <xi:include href="./overrides/lib.trivial.functionArgs.xml">
      <xi:fallback>
        <para>Extract the expected function arguments from a function.
This works both with nix-native { a, b ? foo, ... }: style
functions and functions with args set with 'setFunctionArgs'. It
has the same return type and semantics as builtins.functionArgs.
setFunctionArgs : (a → b) → Map String Bool.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>f</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.trivial.functionArgs" />
  </section>
  <section xml:id="function-library-lib.trivial.isFunction">
    <title>
      <function>lib.trivial.isFunction</function>
    </title>
    <xi:include href="./overrides/lib.trivial.isFunction.xml">
      <xi:fallback>
        <para>Check whether something is a function or something
annotated with function args.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>f</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.trivial.isFunction" />
  </section>
</section>