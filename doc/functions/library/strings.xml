<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="sec-functions-library-strings">
  <!-- Do not edit this file manually!

This file was generated using nixdoc[1]. Please edit the source Nix
file from which this XML was generated instead.

If you need to manually override the documentation of a single
function in this file, create a new override file at
`nixpkgs/docs/functions/library/overrides/<function-identifier>.xml`.

[1]: https://github.com/tazjin/nixdoc
-->
  <title>String manipulation functions</title>
  <section xml:id="function-library-lib.strings.concatStrings">
    <title>
      <function>lib.strings.concatStrings</function>
    </title>
    <xi:include href="./overrides/lib.strings.concatStrings.xml">
      <xi:fallback>
        <subtitle>
          <literal>concatStrings :: [string] -> string</literal>
        </subtitle>
        <para>Concatenate a list of strings.</para>
        <example>
          <title>
            <function>lib.strings.concatStrings</function> usage example</title>
          <programlisting><![CDATA[
concatStrings ["foo" "bar"]
=> "foobar"
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.strings.concatStrings" />
  </section>
  <section xml:id="function-library-lib.strings.concatMapStrings">
    <title>
      <function>lib.strings.concatMapStrings</function>
    </title>
    <xi:include href="./overrides/lib.strings.concatMapStrings.xml">
      <xi:fallback>
        <subtitle>
          <literal>concatMapStrings :: (a -> string) -> [a] -> string</literal>
        </subtitle>
        <para>Map a function over a list and concatenate the resulting strings.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>f</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>list</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <example>
          <title>
            <function>lib.strings.concatMapStrings</function> usage example</title>
          <programlisting><![CDATA[
concatMapStrings (x: "a" + x) ["foo" "bar"]
=> "afooabar"
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.strings.concatMapStrings" />
  </section>
  <section xml:id="function-library-lib.strings.concatImapStrings">
    <title>
      <function>lib.strings.concatImapStrings</function>
    </title>
    <xi:include href="./overrides/lib.strings.concatImapStrings.xml">
      <xi:fallback>
        <subtitle>
          <literal>concatImapStrings :: (int -> a -> string) -> [a] -> string</literal>
        </subtitle>
        <para>Like `concatMapStrings` except that the f functions also gets the
position as a parameter.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>f</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>list</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <example>
          <title>
            <function>lib.strings.concatImapStrings</function> usage example</title>
          <programlisting><![CDATA[
concatImapStrings (pos: x: "${toString pos}-${x}") ["foo" "bar"]
=> "1-foo2-bar"
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.strings.concatImapStrings" />
  </section>
  <section xml:id="function-library-lib.strings.intersperse">
    <title>
      <function>lib.strings.intersperse</function>
    </title>
    <xi:include href="./overrides/lib.strings.intersperse.xml">
      <xi:fallback>
        <subtitle>
          <literal>intersperse :: a -> [a] -> [a]</literal>
        </subtitle>
        <para>Place an element between each element of a list</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>separator</varname>
            </term>
            <listitem>
              <para>Separator to add between elements</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>list</varname>
            </term>
            <listitem>
              <para>Input list</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <example>
          <title>
            <function>lib.strings.intersperse</function> usage example</title>
          <programlisting><![CDATA[
intersperse "/" ["usr" "local" "bin"]
=> ["usr" "/" "local" "/" "bin"].
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.strings.intersperse" />
  </section>
  <section xml:id="function-library-lib.strings.concatStringsSep">
    <title>
      <function>lib.strings.concatStringsSep</function>
    </title>
    <xi:include href="./overrides/lib.strings.concatStringsSep.xml">
      <xi:fallback>
        <subtitle>
          <literal>concatStringsSep :: string -> [string] -> string</literal>
        </subtitle>
        <para>Concatenate a list of strings with a separator between each element</para>
        <example>
          <title>
            <function>lib.strings.concatStringsSep</function> usage example</title>
          <programlisting><![CDATA[
concatStringsSep "/" ["usr" "local" "bin"]
=> "usr/local/bin"
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.strings.concatStringsSep" />
  </section>
  <section xml:id="function-library-lib.strings.concatMapStringsSep">
    <title>
      <function>lib.strings.concatMapStringsSep</function>
    </title>
    <xi:include href="./overrides/lib.strings.concatMapStringsSep.xml">
      <xi:fallback>
        <subtitle>
          <literal>concatMapStringsSep :: string -> (string -> string) -> [string] -> string</literal>
        </subtitle>
        <para>Maps a function over a list of strings and then concatenates the
result with the specified separator interspersed between
elements.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>sep</varname>
            </term>
            <listitem>
              <para>Separator to add between elements</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>f</varname>
            </term>
            <listitem>
              <para>Function to map over the list</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>list</varname>
            </term>
            <listitem>
              <para>List of input strings</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <example>
          <title>
            <function>lib.strings.concatMapStringsSep</function> usage example</title>
          <programlisting><![CDATA[
concatMapStringsSep "-" (x: toUpper x)  ["foo" "bar" "baz"]
=> "FOO-BAR-BAZ"
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.strings.concatMapStringsSep" />
  </section>
  <section xml:id="function-library-lib.strings.concatImapStringsSep">
    <title>
      <function>lib.strings.concatImapStringsSep</function>
    </title>
    <xi:include href="./overrides/lib.strings.concatImapStringsSep.xml">
      <xi:fallback>
        <subtitle>
          <literal>concatMapStringsSep :: string -> (int -> string -> string) -> [string] -> string</literal>
        </subtitle>
        <para>Same as `concatMapStringsSep`, but the mapping function
additionally receives the position of its argument.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>sep</varname>
            </term>
            <listitem>
              <para>Separator to add between elements</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>f</varname>
            </term>
            <listitem>
              <para>Function that receives elements and their positions</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>list</varname>
            </term>
            <listitem>
              <para>List of input strings</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <example>
          <title>
            <function>lib.strings.concatImapStringsSep</function> usage example</title>
          <programlisting><![CDATA[
concatImapStringsSep "-" (pos: x: toString (x / pos)) [ 6 6 6 ]
=> "6-3-2"
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.strings.concatImapStringsSep" />
  </section>
  <section xml:id="function-library-lib.strings.makeSearchPath">
    <title>
      <function>lib.strings.makeSearchPath</function>
    </title>
    <xi:include href="./overrides/lib.strings.makeSearchPath.xml">
      <xi:fallback>
        <subtitle>
          <literal>makeSearchPath :: string -> [string] -> string</literal>
        </subtitle>
        <para>Construct a Unix-style, colon-separated search path consisting of
the given `subDir` appended to each of the given paths.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>subDir</varname>
            </term>
            <listitem>
              <para>Directory name to append</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>paths</varname>
            </term>
            <listitem>
              <para>List of base paths</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <example>
          <title>
            <function>lib.strings.makeSearchPath</function> usage example</title>
          <programlisting><![CDATA[
makeSearchPath "bin" ["/root" "/usr" "/usr/local"]
=> "/root/bin:/usr/bin:/usr/local/bin"
makeSearchPath "bin" [""]
=> "/bin"
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.strings.makeSearchPath" />
  </section>
  <section xml:id="function-library-lib.strings.makeSearchPathOutput">
    <title>
      <function>lib.strings.makeSearchPathOutput</function>
    </title>
    <xi:include href="./overrides/lib.strings.makeSearchPathOutput.xml">
      <xi:fallback>
        <subtitle>
          <literal>string -> string -> [package] -> string</literal>
        </subtitle>
        <para>Construct a Unix-style search path by appending the given
`subDir` to the specified `output` of each of the packages. If no
output by the given name is found, fallback to `.out` and then to
the default.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>output</varname>
            </term>
            <listitem>
              <para>Package output to use</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>subDir</varname>
            </term>
            <listitem>
              <para>Directory name to append</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>pkgs</varname>
            </term>
            <listitem>
              <para>List of packages</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <example>
          <title>
            <function>lib.strings.makeSearchPathOutput</function> usage example</title>
          <programlisting><![CDATA[
makeSearchPathOutput "dev" "bin" [ pkgs.openssl pkgs.zlib ]
=> "/nix/store/9rz8gxhzf8sw4kf2j2f1grr49w8zx5vj-openssl-1.0.1r-dev/bin:/nix/store/wwh7mhwh269sfjkm6k5665b5kgp7jrk2-zlib-1.2.8/bin"
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.strings.makeSearchPathOutput" />
  </section>
  <section xml:id="function-library-lib.strings.makeLibraryPath">
    <title>
      <function>lib.strings.makeLibraryPath</function>
    </title>
    <xi:include href="./overrides/lib.strings.makeLibraryPath.xml">
      <xi:fallback>
        <para>Construct a library search path (such as RPATH) containing the
libraries for a set of packages</para>
        <example>
          <title>
            <function>lib.strings.makeLibraryPath</function> usage example</title>
          <programlisting><![CDATA[
makeLibraryPath [ "/usr" "/usr/local" ]
=> "/usr/lib:/usr/local/lib"
pkgs = import <nixpkgs> { }
makeLibraryPath [ pkgs.openssl pkgs.zlib ]
=> "/nix/store/9rz8gxhzf8sw4kf2j2f1grr49w8zx5vj-openssl-1.0.1r/lib:/nix/store/wwh7mhwh269sfjkm6k5665b5kgp7jrk2-zlib-1.2.8/lib"
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.strings.makeLibraryPath" />
  </section>
  <section xml:id="function-library-lib.strings.makeBinPath">
    <title>
      <function>lib.strings.makeBinPath</function>
    </title>
    <xi:include href="./overrides/lib.strings.makeBinPath.xml">
      <xi:fallback>
        <para>Construct a binary search path (such as $PATH) containing the
binaries for a set of packages.</para>
        <example>
          <title>
            <function>lib.strings.makeBinPath</function> usage example</title>
          <programlisting><![CDATA[
makeBinPath ["/root" "/usr" "/usr/local"]
=> "/root/bin:/usr/bin:/usr/local/bin"
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.strings.makeBinPath" />
  </section>
  <section xml:id="function-library-lib.strings.makePerlPath">
    <title>
      <function>lib.strings.makePerlPath</function>
    </title>
    <xi:include href="./overrides/lib.strings.makePerlPath.xml">
      <xi:fallback>
        <para>Construct a perl search path (such as $PERL5LIB)</para>
        <example>
          <title>
            <function>lib.strings.makePerlPath</function> usage example</title>
          <programlisting><![CDATA[
pkgs = import <nixpkgs> { }
makePerlPath [ pkgs.perlPackages.libnet ]
=> "/nix/store/n0m1fk9c960d8wlrs62sncnadygqqc6y-perl-Net-SMTP-1.25/lib/perl5/site_perl"
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.strings.makePerlPath" />
  </section>
  <section xml:id="function-library-lib.strings.makeFullPerlPath">
    <title>
      <function>lib.strings.makeFullPerlPath</function>
    </title>
    <xi:include href="./overrides/lib.strings.makeFullPerlPath.xml">
      <xi:fallback>
        <para>Construct a perl search path recursively including all dependencies (such as $PERL5LIB)</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>deps</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <example>
          <title>
            <function>lib.strings.makeFullPerlPath</function> usage example</title>
          <programlisting><![CDATA[
pkgs = import <nixpkgs> { }
makeFullPerlPath [ pkgs.perlPackages.CGI ]
=> "/nix/store/fddivfrdc1xql02h9q500fpnqy12c74n-perl-CGI-4.38/lib/perl5/site_perl:/nix/store/8hsvdalmsxqkjg0c5ifigpf31vc4vsy2-perl-HTML-Parser-3.72/lib/perl5/site_perl:/nix/store/zhc7wh0xl8hz3y3f71nhlw1559iyvzld-perl-HTML-Tagset-3.20/lib/perl5/site_perl"
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.strings.makeFullPerlPath" />
  </section>
  <section xml:id="function-library-lib.strings.optionalString">
    <title>
      <function>lib.strings.optionalString</function>
    </title>
    <xi:include href="./overrides/lib.strings.optionalString.xml">
      <xi:fallback>
        <subtitle>
          <literal>optionalString :: bool -> string -> string</literal>
        </subtitle>
        <para>Depending on the boolean `cond', return either the given string
or the empty string. Useful to concatenate against a bigger string.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>cond</varname>
            </term>
            <listitem>
              <para>Condition</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>string</varname>
            </term>
            <listitem>
              <para>String to return if condition is true</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <example>
          <title>
            <function>lib.strings.optionalString</function> usage example</title>
          <programlisting><![CDATA[
optionalString true "some-string"
=> "some-string"
optionalString false "some-string"
=> ""
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.strings.optionalString" />
  </section>
  <section xml:id="function-library-lib.strings.hasPrefix">
    <title>
      <function>lib.strings.hasPrefix</function>
    </title>
    <xi:include href="./overrides/lib.strings.hasPrefix.xml">
      <xi:fallback>
        <subtitle>
          <literal>hasPrefix :: string -> string -> bool</literal>
        </subtitle>
        <para>Determine whether a string has given prefix.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>pref</varname>
            </term>
            <listitem>
              <para>Prefix to check for</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>str</varname>
            </term>
            <listitem>
              <para>Input string</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <example>
          <title>
            <function>lib.strings.hasPrefix</function> usage example</title>
          <programlisting><![CDATA[
hasPrefix "foo" "foobar"
=> true
hasPrefix "foo" "barfoo"
=> false
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.strings.hasPrefix" />
  </section>
  <section xml:id="function-library-lib.strings.hasSuffix">
    <title>
      <function>lib.strings.hasSuffix</function>
    </title>
    <xi:include href="./overrides/lib.strings.hasSuffix.xml">
      <xi:fallback>
        <subtitle>
          <literal>hasSuffix :: string -> string -> bool</literal>
        </subtitle>
        <para>Determine whether a string has given suffix.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>suffix</varname>
            </term>
            <listitem>
              <para>Suffix to check for</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>content</varname>
            </term>
            <listitem>
              <para>Input string</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <example>
          <title>
            <function>lib.strings.hasSuffix</function> usage example</title>
          <programlisting><![CDATA[
hasSuffix "foo" "foobar"
=> false
hasSuffix "foo" "barfoo"
=> true
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.strings.hasSuffix" />
  </section>
  <section xml:id="function-library-lib.strings.hasInfix">
    <title>
      <function>lib.strings.hasInfix</function>
    </title>
    <xi:include href="./overrides/lib.strings.hasInfix.xml">
      <xi:fallback>
        <subtitle>
          <literal>hasInfix :: string -> string -> bool</literal>
        </subtitle>
        <para>Determine whether a string contains the given infix</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>infix</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>content</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <example>
          <title>
            <function>lib.strings.hasInfix</function> usage example</title>
          <programlisting><![CDATA[
hasInfix "bc" "abcd"
=> true
hasInfix "ab" "abcd"
=> true
hasInfix "cd" "abcd"
=> true
hasInfix "foo" "abcd"
=> false
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.strings.hasInfix" />
  </section>
  <section xml:id="function-library-lib.strings.stringToCharacters">
    <title>
      <function>lib.strings.stringToCharacters</function>
    </title>
    <xi:include href="./overrides/lib.strings.stringToCharacters.xml">
      <xi:fallback>
        <subtitle>
          <literal>stringtoCharacters :: string -> [string]</literal>
        </subtitle>
        <para>Convert a string to a list of characters (i.e. singleton strings).
This allows you to, e.g., map a function over each character.  However,
note that this will likely be horribly inefficient; Nix is not a
general purpose programming language. Complex string manipulations
should, if appropriate, be done in a derivation.
Also note that Nix treats strings as a list of bytes and thus doesn't
handle unicode.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>s</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <example>
          <title>
            <function>lib.strings.stringToCharacters</function> usage example</title>
          <programlisting><![CDATA[
stringToCharacters ""
=> [ ]
stringToCharacters "abc"
=> [ "a" "b" "c" ]
stringToCharacters "💩"
=> [ "�" "�" "�" "�" ]
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.strings.stringToCharacters" />
  </section>
  <section xml:id="function-library-lib.strings.stringAsChars">
    <title>
      <function>lib.strings.stringAsChars</function>
    </title>
    <xi:include href="./overrides/lib.strings.stringAsChars.xml">
      <xi:fallback>
        <subtitle>
          <literal>stringAsChars :: (string -> string) -> string -> string</literal>
        </subtitle>
        <para>Manipulate a string character by character and replace them by
strings before concatenating the results.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>f</varname>
            </term>
            <listitem>
              <para>Function to map over each individual character</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>s</varname>
            </term>
            <listitem>
              <para>Input string</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <example>
          <title>
            <function>lib.strings.stringAsChars</function> usage example</title>
          <programlisting><![CDATA[
stringAsChars (x: if x == "a" then "i" else x) "nax"
=> "nix"
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.strings.stringAsChars" />
  </section>
  <section xml:id="function-library-lib.strings.escape">
    <title>
      <function>lib.strings.escape</function>
    </title>
    <xi:include href="./overrides/lib.strings.escape.xml">
      <xi:fallback>
        <subtitle>
          <literal>escape :: [string] -> string -> string</literal>
        </subtitle>
        <para>Escape occurrence of the elements of `list` in `string` by
prefixing it with a backslash.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>list</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <example>
          <title>
            <function>lib.strings.escape</function> usage example</title>
          <programlisting><![CDATA[
escape ["(" ")"] "(foo)"
=> "\\(foo\\)"
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.strings.escape" />
  </section>
  <section xml:id="function-library-lib.strings.escapeShellArg">
    <title>
      <function>lib.strings.escapeShellArg</function>
    </title>
    <xi:include href="./overrides/lib.strings.escapeShellArg.xml">
      <xi:fallback>
        <subtitle>
          <literal>escapeShellArg :: string -> string</literal>
        </subtitle>
        <para>Quote string to be used safely within the Bourne shell.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>arg</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <example>
          <title>
            <function>lib.strings.escapeShellArg</function> usage example</title>
          <programlisting><![CDATA[
escapeShellArg "esc'ape\nme"
=> "'esc'\\''ape\nme'"
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.strings.escapeShellArg" />
  </section>
  <section xml:id="function-library-lib.strings.escapeShellArgs">
    <title>
      <function>lib.strings.escapeShellArgs</function>
    </title>
    <xi:include href="./overrides/lib.strings.escapeShellArgs.xml">
      <xi:fallback>
        <subtitle>
          <literal>escapeShellArgs :: [string] -> string</literal>
        </subtitle>
        <para>Quote all arguments to be safely passed to the Bourne shell.</para>
        <example>
          <title>
            <function>lib.strings.escapeShellArgs</function> usage example</title>
          <programlisting><![CDATA[
escapeShellArgs ["one" "two three" "four'five"]
=> "'one' 'two three' 'four'\\''five'"
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.strings.escapeShellArgs" />
  </section>
  <section xml:id="function-library-lib.strings.escapeNixString">
    <title>
      <function>lib.strings.escapeNixString</function>
    </title>
    <xi:include href="./overrides/lib.strings.escapeNixString.xml">
      <xi:fallback>
        <subtitle>
          <literal>string -> string</literal>
        </subtitle>
        <para>Turn a string into a Nix expression representing that string</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>s</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <example>
          <title>
            <function>lib.strings.escapeNixString</function> usage example</title>
          <programlisting><![CDATA[
escapeNixString "hello\${}\n"
=> "\"hello\\\${}\\n\""
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.strings.escapeNixString" />
  </section>
  <section xml:id="function-library-lib.strings.toLower">
    <title>
      <function>lib.strings.toLower</function>
    </title>
    <xi:include href="./overrides/lib.strings.toLower.xml">
      <xi:fallback>
        <subtitle>
          <literal>toLower :: string -> string</literal>
        </subtitle>
        <para>Converts an ASCII string to lower-case.</para>
        <example>
          <title>
            <function>lib.strings.toLower</function> usage example</title>
          <programlisting><![CDATA[
toLower "HOME"
=> "home"
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.strings.toLower" />
  </section>
  <section xml:id="function-library-lib.strings.toUpper">
    <title>
      <function>lib.strings.toUpper</function>
    </title>
    <xi:include href="./overrides/lib.strings.toUpper.xml">
      <xi:fallback>
        <subtitle>
          <literal>toUpper :: string -> string</literal>
        </subtitle>
        <para>Converts an ASCII string to upper-case.</para>
        <example>
          <title>
            <function>lib.strings.toUpper</function> usage example</title>
          <programlisting><![CDATA[
toUpper "home"
=> "HOME"
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.strings.toUpper" />
  </section>
  <section xml:id="function-library-lib.strings.addContextFrom">
    <title>
      <function>lib.strings.addContextFrom</function>
    </title>
    <xi:include href="./overrides/lib.strings.addContextFrom.xml">
      <xi:fallback>
        <para>Appends string context from another string.  This is an implementation
detail of Nix.</para>
        <para>Strings in Nix carry an invisible `context` which is a list of strings
representing store paths.  If the string is later used in a derivation
attribute, the derivation will properly populate the inputDrvs and
inputSrcs.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>a</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>b</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <example>
          <title>
            <function>lib.strings.addContextFrom</function> usage example</title>
          <programlisting><![CDATA[
pkgs = import <nixpkgs> { };
addContextFrom pkgs.coreutils "bar"
=> "bar"
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.strings.addContextFrom" />
  </section>
  <section xml:id="function-library-lib.strings.splitString">
    <title>
      <function>lib.strings.splitString</function>
    </title>
    <xi:include href="./overrides/lib.strings.splitString.xml">
      <xi:fallback>
        <para>Cut a string with a separator and produces a list of strings which
were separated by this separator.</para>
        <para>NOTE: this function is not performant and should never be used.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>_sep</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>_s</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <example>
          <title>
            <function>lib.strings.splitString</function> usage example</title>
          <programlisting><![CDATA[
splitString "." "foo.bar.baz"
=> [ "foo" "bar" "baz" ]
splitString "/" "/usr/local/bin"
=> [ "" "usr" "local" "bin" ]
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.strings.splitString" />
  </section>
  <section xml:id="function-library-lib.strings.removePrefix">
    <title>
      <function>lib.strings.removePrefix</function>
    </title>
    <xi:include href="./overrides/lib.strings.removePrefix.xml">
      <xi:fallback>
        <subtitle>
          <literal>string -> string -> string</literal>
        </subtitle>
        <para>Return a string without the specified prefix, if the prefix matches.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>prefix</varname>
            </term>
            <listitem>
              <para>Prefix to remove if it matches</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>str</varname>
            </term>
            <listitem>
              <para>Input string</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <example>
          <title>
            <function>lib.strings.removePrefix</function> usage example</title>
          <programlisting><![CDATA[
removePrefix "foo." "foo.bar.baz"
=> "bar.baz"
removePrefix "xxx" "foo.bar.baz"
=> "foo.bar.baz"
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.strings.removePrefix" />
  </section>
  <section xml:id="function-library-lib.strings.removeSuffix">
    <title>
      <function>lib.strings.removeSuffix</function>
    </title>
    <xi:include href="./overrides/lib.strings.removeSuffix.xml">
      <xi:fallback>
        <subtitle>
          <literal>string -> string -> string</literal>
        </subtitle>
        <para>Return a string without the specified suffix, if the suffix matches.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>suffix</varname>
            </term>
            <listitem>
              <para>Suffix to remove if it matches</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>str</varname>
            </term>
            <listitem>
              <para>Input string</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <example>
          <title>
            <function>lib.strings.removeSuffix</function> usage example</title>
          <programlisting><![CDATA[
removeSuffix "front" "homefront"
=> "home"
removeSuffix "xxx" "homefront"
=> "homefront"
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.strings.removeSuffix" />
  </section>
  <section xml:id="function-library-lib.strings.versionOlder">
    <title>
      <function>lib.strings.versionOlder</function>
    </title>
    <xi:include href="./overrides/lib.strings.versionOlder.xml">
      <xi:fallback>
        <para>Return true if string v1 denotes a version older than v2.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>v1</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>v2</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <example>
          <title>
            <function>lib.strings.versionOlder</function> usage example</title>
          <programlisting><![CDATA[
versionOlder "1.1" "1.2"
=> true
versionOlder "1.1" "1.1"
=> false
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.strings.versionOlder" />
  </section>
  <section xml:id="function-library-lib.strings.versionAtLeast">
    <title>
      <function>lib.strings.versionAtLeast</function>
    </title>
    <xi:include href="./overrides/lib.strings.versionAtLeast.xml">
      <xi:fallback>
        <para>Return true if string v1 denotes a version equal to or newer than v2.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>v1</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>v2</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <example>
          <title>
            <function>lib.strings.versionAtLeast</function> usage example</title>
          <programlisting><![CDATA[
versionAtLeast "1.1" "1.0"
=> true
versionAtLeast "1.1" "1.1"
=> true
versionAtLeast "1.1" "1.2"
=> false
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.strings.versionAtLeast" />
  </section>
  <section xml:id="function-library-lib.strings.getVersion">
    <title>
      <function>lib.strings.getVersion</function>
    </title>
    <xi:include href="./overrides/lib.strings.getVersion.xml">
      <xi:fallback>
        <para>This function takes an argument that's either a derivation or a
derivation's "name" attribute and extracts the version part from that
argument.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>x</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <example>
          <title>
            <function>lib.strings.getVersion</function> usage example</title>
          <programlisting><![CDATA[
getVersion "youtube-dl-2016.01.01"
=> "2016.01.01"
getVersion pkgs.youtube-dl
=> "2016.01.01"
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.strings.getVersion" />
  </section>
  <section xml:id="function-library-lib.strings.nameFromURL">
    <title>
      <function>lib.strings.nameFromURL</function>
    </title>
    <xi:include href="./overrides/lib.strings.nameFromURL.xml">
      <xi:fallback>
        <para>Extract name with version from URL. Ask for separator which is
supposed to start extension.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>url</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>sep</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <example>
          <title>
            <function>lib.strings.nameFromURL</function> usage example</title>
          <programlisting><![CDATA[
nameFromURL "https://nixos.org/releases/nix/nix-1.7/nix-1.7-x86_64-linux.tar.bz2" "-"
=> "nix"
nameFromURL "https://nixos.org/releases/nix/nix-1.7/nix-1.7-x86_64-linux.tar.bz2" "_"
=> "nix-1.7-x86"
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.strings.nameFromURL" />
  </section>
  <section xml:id="function-library-lib.strings.enableFeature">
    <title>
      <function>lib.strings.enableFeature</function>
    </title>
    <xi:include href="./overrides/lib.strings.enableFeature.xml">
      <xi:fallback>
        <para>Create an --{enable,disable}-&lt;feat> string that can be passed to
standard GNU Autoconf scripts.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>enable</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>feat</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <example>
          <title>
            <function>lib.strings.enableFeature</function> usage example</title>
          <programlisting><![CDATA[
enableFeature true "shared"
=> "--enable-shared"
enableFeature false "shared"
=> "--disable-shared"
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.strings.enableFeature" />
  </section>
  <section xml:id="function-library-lib.strings.enableFeatureAs">
    <title>
      <function>lib.strings.enableFeatureAs</function>
    </title>
    <xi:include href="./overrides/lib.strings.enableFeatureAs.xml">
      <xi:fallback>
        <para>Create an --{enable-&lt;feat>=&lt;value>,disable-&lt;feat>} string that can be passed to
standard GNU Autoconf scripts.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>enable</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>feat</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>value</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <example>
          <title>
            <function>lib.strings.enableFeatureAs</function> usage example</title>
          <programlisting><![CDATA[
enableFeature true "shared" "foo"
=> "--enable-shared=foo"
enableFeature false "shared" (throw "ignored")
=> "--disable-shared"
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.strings.enableFeatureAs" />
  </section>
  <section xml:id="function-library-lib.strings.withFeature">
    <title>
      <function>lib.strings.withFeature</function>
    </title>
    <xi:include href="./overrides/lib.strings.withFeature.xml">
      <xi:fallback>
        <para>Create an --{with,without}-&lt;feat> string that can be passed to
standard GNU Autoconf scripts.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>with_</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>feat</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <example>
          <title>
            <function>lib.strings.withFeature</function> usage example</title>
          <programlisting><![CDATA[
withFeature true "shared"
=> "--with-shared"
withFeature false "shared"
=> "--without-shared"
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.strings.withFeature" />
  </section>
  <section xml:id="function-library-lib.strings.withFeatureAs">
    <title>
      <function>lib.strings.withFeatureAs</function>
    </title>
    <xi:include href="./overrides/lib.strings.withFeatureAs.xml">
      <xi:fallback>
        <para>Create an --{with-&lt;feat>=&lt;value>,without-&lt;feat>} string that can be passed to
standard GNU Autoconf scripts.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>with_</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>feat</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>value</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <example>
          <title>
            <function>lib.strings.withFeatureAs</function> usage example</title>
          <programlisting><![CDATA[
with_Feature true "shared" "foo"
=> "--with-shared=foo"
with_Feature false "shared" (throw "ignored")
=> "--without-shared"
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.strings.withFeatureAs" />
  </section>
  <section xml:id="function-library-lib.strings.fixedWidthString">
    <title>
      <function>lib.strings.fixedWidthString</function>
    </title>
    <xi:include href="./overrides/lib.strings.fixedWidthString.xml">
      <xi:fallback>
        <subtitle>
          <literal>fixedWidthString :: int -> string -> string</literal>
        </subtitle>
        <para>Create a fixed width string with additional prefix to match
required width.</para>
        <para>This function will fail if the input string is longer than the
requested length.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>width</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>filler</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>str</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <example>
          <title>
            <function>lib.strings.fixedWidthString</function> usage example</title>
          <programlisting><![CDATA[
fixedWidthString 5 "0" (toString 15)
=> "00015"
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.strings.fixedWidthString" />
  </section>
  <section xml:id="function-library-lib.strings.fixedWidthNumber">
    <title>
      <function>lib.strings.fixedWidthNumber</function>
    </title>
    <xi:include href="./overrides/lib.strings.fixedWidthNumber.xml">
      <xi:fallback>
        <para>Format a number adding leading zeroes up to fixed width.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>width</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>n</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <example>
          <title>
            <function>lib.strings.fixedWidthNumber</function> usage example</title>
          <programlisting><![CDATA[
fixedWidthNumber 5 15
=> "00015"
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.strings.fixedWidthNumber" />
  </section>
  <section xml:id="function-library-lib.strings.isCoercibleToString">
    <title>
      <function>lib.strings.isCoercibleToString</function>
    </title>
    <xi:include href="./overrides/lib.strings.isCoercibleToString.xml">
      <xi:fallback>
        <para>Check whether a value can be coerced to a string</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>x</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.strings.isCoercibleToString" />
  </section>
  <section xml:id="function-library-lib.strings.isStorePath">
    <title>
      <function>lib.strings.isStorePath</function>
    </title>
    <xi:include href="./overrides/lib.strings.isStorePath.xml">
      <xi:fallback>
        <para>Check whether a value is a store path.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>x</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <example>
          <title>
            <function>lib.strings.isStorePath</function> usage example</title>
          <programlisting><![CDATA[
isStorePath "/nix/store/d945ibfx9x185xf04b890y4f9g3cbb63-python-2.7.11/bin/python"
=> false
isStorePath "/nix/store/d945ibfx9x185xf04b890y4f9g3cbb63-python-2.7.11/"
=> true
isStorePath pkgs.python
=> true
isStorePath [] || isStorePath 42 || isStorePath {} || …
=> false
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.strings.isStorePath" />
  </section>
  <section xml:id="function-library-lib.strings.toInt">
    <title>
      <function>lib.strings.toInt</function>
    </title>
    <xi:include href="./overrides/lib.strings.toInt.xml">
      <xi:fallback>
        <subtitle>
          <literal>string -> int</literal>
        </subtitle>
        <para>Parse a string string as an int.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>str</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <example>
          <title>
            <function>lib.strings.toInt</function> usage example</title>
          <programlisting><![CDATA[
toInt "1337"
=> 1337
toInt "-4"
=> -4
toInt "3.14"
=> error: floating point JSON numbers are not supported
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.strings.toInt" />
  </section>
  <section xml:id="function-library-lib.strings.readPathsFromFile">
    <title>
      <function>lib.strings.readPathsFromFile</function>
    </title>
    <xi:include href="./overrides/lib.strings.readPathsFromFile.xml">
      <xi:fallback>
        <para>Read a list of paths from `file`, relative to the `rootPath`.
Lines beginning with `#` are treated as comments and ignored.
Whitespace is significant.</para>
        <para>NOTE: This function is not performant and should be avoided.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>rootPath</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>file</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <example>
          <title>
            <function>lib.strings.readPathsFromFile</function> usage example</title>
          <programlisting><![CDATA[
readPathsFromFile /prefix
./pkgs/development/libraries/qt-5/5.4/qtbase/series
=> [ "/prefix/dlopen-resolv.patch" "/prefix/tzdir.patch"
"/prefix/dlopen-libXcursor.patch" "/prefix/dlopen-openssl.patch"
"/prefix/dlopen-dbus.patch" "/prefix/xdg-config-dirs.patch"
"/prefix/nix-profiles-library-paths.patch"
"/prefix/compose-search-path.patch" ]
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.strings.readPathsFromFile" />
  </section>
  <section xml:id="function-library-lib.strings.fileContents">
    <title>
      <function>lib.strings.fileContents</function>
    </title>
    <xi:include href="./overrides/lib.strings.fileContents.xml">
      <xi:fallback>
        <subtitle>
          <literal>fileContents :: path -> string</literal>
        </subtitle>
        <para>Read the contents of a file removing the trailing \n</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>file</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <example>
          <title>
            <function>lib.strings.fileContents</function> usage example</title>
          <programlisting><![CDATA[
$ echo "1.0" > ./version

fileContents ./version
=> "1.0"
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.strings.fileContents" />
  </section>
</section>