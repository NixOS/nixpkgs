<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="sec-functions-library-options">
  <!-- Do not edit this file manually!

This file was generated using nixdoc[1]. Please edit the source Nix
file from which this XML was generated instead.

If you need to manually override the documentation of a single
function in this file, create a new override file at
`nixpkgs/docs/functions/library/overrides/<function-identifier>.xml`.

[1]: https://github.com/tazjin/nixdoc
-->
  <title>NixOS / nixpkgs option handling</title>
  <section xml:id="function-library-lib.options.isOption">
    <title>
      <function>lib.options.isOption</function>
    </title>
    <xi:include href="./overrides/lib.options.isOption.xml">
      <xi:fallback>
        <subtitle>
          <literal>isOption :: a -> bool</literal>
        </subtitle>
        <para>Returns true when the given argument is an option</para>
        <example>
          <title>
            <function>lib.options.isOption</function> usage example</title>
          <programlisting><![CDATA[
isOption 1             // => false
isOption (mkOption {}) // => true
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.options.isOption" />
  </section>
  <section xml:id="function-library-lib.options.mkOption">
    <title>
      <function>lib.options.mkOption</function>
    </title>
    <xi:include href="./overrides/lib.options.mkOption.xml">
      <xi:fallback>
        <para>Creates an Option attribute set. mkOption accepts an attribute set with the following keys:</para>
        <para>All keys default to `null` when not given.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>pattern</varname>
            </term>
            <listitem>
              <para>Structured function argument</para>
              <variablelist>
                <varlistentry>
                  <term>
                    <varname>default</varname>
                  </term>
                  <listitem>
                    <para>Default value used when no definition is given in the configuration.</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>
                    <varname>defaultText</varname>
                  </term>
                  <listitem>
                    <para>Textual representation of the default, for the manual.</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>
                    <varname>example</varname>
                  </term>
                  <listitem>
                    <para>Example value used in the manual.</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>
                    <varname>description</varname>
                  </term>
                  <listitem>
                    <para>String describing the option.</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>
                    <varname>relatedPackages</varname>
                  </term>
                  <listitem>
                    <para>Related packages used in the manual (see `genRelatedPackages` in ../nixos/doc/manual/default.nix).</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>
                    <varname>type</varname>
                  </term>
                  <listitem>
                    <para>Option type, providing type-checking and value merging.</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>
                    <varname>apply</varname>
                  </term>
                  <listitem>
                    <para>Function that converts the option value to something else.</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>
                    <varname>internal</varname>
                  </term>
                  <listitem>
                    <para>Whether the option is for NixOS developers only.</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>
                    <varname>visible</varname>
                  </term>
                  <listitem>
                    <para>Whether the option shows up in the manual.</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>
                    <varname>readOnly</varname>
                  </term>
                  <listitem>
                    <para>Whether the option can be set only once</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>
                    <varname>options</varname>
                  </term>
                  <listitem>
                    <para>Obsolete, used by types.optionSet.</para>
                  </listitem>
                </varlistentry>
              </variablelist>
            </listitem>
          </varlistentry>
        </variablelist>
        <example>
          <title>
            <function>lib.options.mkOption</function> usage example</title>
          <programlisting><![CDATA[
mkOption { }  // => { _type = "option"; }
mkOption { defaultText = "foo"; } // => { _type = "option"; defaultText = "foo"; }
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.options.mkOption" />
  </section>
  <section xml:id="function-library-lib.options.mkEnableOption">
    <title>
      <function>lib.options.mkEnableOption</function>
    </title>
    <xi:include href="./overrides/lib.options.mkEnableOption.xml">
      <xi:fallback>
        <para>Creates an Option attribute set for a boolean value option i.e an
option to be toggled on or off:</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>name</varname>
            </term>
            <listitem>
              <para>Name for the created option</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <example>
          <title>
            <function>lib.options.mkEnableOption</function> usage example</title>
          <programlisting><![CDATA[
mkEnableOption "foo"
=> { _type = "option"; default = false; description = "Whether to enable foo."; example = true; type = { ... }; }
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.options.mkEnableOption" />
  </section>
  <section xml:id="function-library-lib.options.mkSinkUndeclaredOptions">
    <title>
      <function>lib.options.mkSinkUndeclaredOptions</function>
    </title>
    <xi:include href="./overrides/lib.options.mkSinkUndeclaredOptions.xml">
      <xi:fallback>
        <para>This option accepts anything, but it does not produce any result.</para>
        <para>This is useful for sharing a module across different module sets
without having to implement similar features as long as the
values of the options are not accessed.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>attrs</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.options.mkSinkUndeclaredOptions" />
  </section>
  <section xml:id="function-library-lib.options.mergeEqualOption">
    <title>
      <function>lib.options.mergeEqualOption</function>
    </title>
    <xi:include href="./overrides/lib.options.mergeEqualOption.xml">
      <xi:fallback>
        <para>"Merge" option definitions by checking that they all have the same value.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>loc</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>defs</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.options.mergeEqualOption" />
  </section>
  <section xml:id="function-library-lib.options.getValues">
    <title>
      <function>lib.options.getValues</function>
    </title>
    <xi:include href="./overrides/lib.options.getValues.xml">
      <xi:fallback>
        <subtitle>
          <literal>getValues :: [ { value :: a } ] -> [a]</literal>
        </subtitle>
        <para>Extracts values of all "value" keys of the given list.</para>
        <example>
          <title>
            <function>lib.options.getValues</function> usage example</title>
          <programlisting><![CDATA[
getValues [ { value = 1; } { value = 2; } ] // => [ 1 2 ]
getValues [ ]                               // => [ ]
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.options.getValues" />
  </section>
  <section xml:id="function-library-lib.options.getFiles">
    <title>
      <function>lib.options.getFiles</function>
    </title>
    <xi:include href="./overrides/lib.options.getFiles.xml">
      <xi:fallback>
        <subtitle>
          <literal>getFiles :: [ { file :: a } ] -> [a]</literal>
        </subtitle>
        <para>Extracts values of all "file" keys of the given list</para>
        <example>
          <title>
            <function>lib.options.getFiles</function> usage example</title>
          <programlisting><![CDATA[
getFiles [ { file = "file1"; } { file = "file2"; } ] // => [ "file1" "file2" ]
getFiles [ ]                                         // => [ ]
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.options.getFiles" />
  </section>
  <section xml:id="function-library-lib.options.scrubOptionValue">
    <title>
      <function>lib.options.scrubOptionValue</function>
    </title>
    <xi:include href="./overrides/lib.options.scrubOptionValue.xml">
      <xi:fallback>
        <para>This function recursively removes all derivation attributes from
`x` except for the `name` attribute.</para>
        <para>This is to make the generation of `options.xml` much more
efficient: the XML representation of derivations is very large
(on the order of megabytes) and is not actually used by the
manual generator.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>x</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.options.scrubOptionValue" />
  </section>
  <section xml:id="function-library-lib.options.literalExample">
    <title>
      <function>lib.options.literalExample</function>
    </title>
    <xi:include href="./overrides/lib.options.literalExample.xml">
      <xi:fallback>
        <para>For use in the `example` option attribute. It causes the given
text to be included verbatim in documentation. This is necessary
for example values that are not simple values, e.g., functions.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>text</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.options.literalExample" />
  </section>
  <section xml:id="function-library-lib.options.showOption">
    <title>
      <function>lib.options.showOption</function>
    </title>
    <xi:include href="./overrides/lib.options.showOption.xml">
      <xi:fallback>
        <para>Convert an option, described as a list of the option parts in to a
safe, human readable version.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>parts</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <example>
          <title>
            <function>lib.options.showOption</function> usage example</title>
          <programlisting><![CDATA[
(showOption ["foo" "bar" "baz"]) == "foo.bar.baz"
(showOption ["foo" "bar.baz" "tux"]) == "foo.\"bar.baz\".tux"
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.options.showOption" />
  </section>
</section>