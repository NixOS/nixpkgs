<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="sec-functions-library-debug">
  <!-- Do not edit this file manually!

This file was generated using nixdoc[1]. Please edit the source Nix
file from which this XML was generated instead.

If you need to manually override the documentation of a single
function in this file, create a new override file at
`nixpkgs/docs/functions/library/overrides/<function-identifier>.xml`.

[1]: https://github.com/tazjin/nixdoc
-->
  <title>Debugging functions</title>
  <section xml:id="function-library-lib.debug.traceIf">
    <title>
      <function>lib.debug.traceIf</function>
    </title>
    <xi:include href="./overrides/lib.debug.traceIf.xml">
      <xi:fallback>
        <subtitle>
          <literal>traceIf :: bool -> string -> a -> a</literal>
        </subtitle>
        <para>Conditionally trace the supplied message, based on a predicate.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>pred</varname>
            </term>
            <listitem>
              <para>Predicate to check</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>msg</varname>
            </term>
            <listitem>
              <para>Message that should be traced</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>x</varname>
            </term>
            <listitem>
              <para>Value to return</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <example>
          <title>
            <function>lib.debug.traceIf</function> usage example</title>
          <programlisting><![CDATA[
traceIf true "hello" 3
trace: hello
=> 3
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.debug.traceIf" />
  </section>
  <section xml:id="function-library-lib.debug.traceValFn">
    <title>
      <function>lib.debug.traceValFn</function>
    </title>
    <xi:include href="./overrides/lib.debug.traceValFn.xml">
      <xi:fallback>
        <subtitle>
          <literal>traceValFn :: (a -> b) -> a -> a</literal>
        </subtitle>
        <para>Trace the supplied value after applying a function to it, and
return the original value.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>f</varname>
            </term>
            <listitem>
              <para>Function to apply</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>x</varname>
            </term>
            <listitem>
              <para>Value to trace and return</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <example>
          <title>
            <function>lib.debug.traceValFn</function> usage example</title>
          <programlisting><![CDATA[
traceValFn (v: "mystring ${v}") "foo"
trace: mystring foo
=> "foo"
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.debug.traceValFn" />
  </section>
  <section xml:id="function-library-lib.debug.traceVal">
    <title>
      <function>lib.debug.traceVal</function>
    </title>
    <xi:include href="./overrides/lib.debug.traceVal.xml">
      <xi:fallback>
        <subtitle>
          <literal>traceVal :: a -> a</literal>
        </subtitle>
        <para>Trace the supplied value and return it.</para>
        <example>
          <title>
            <function>lib.debug.traceVal</function> usage example</title>
          <programlisting><![CDATA[
traceVal 42
# trace: 42
=> 42
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.debug.traceVal" />
  </section>
  <section xml:id="function-library-lib.debug.traceSeq">
    <title>
      <function>lib.debug.traceSeq</function>
    </title>
    <xi:include href="./overrides/lib.debug.traceSeq.xml">
      <xi:fallback>
        <subtitle>
          <literal>traceSeq :: a -> b -> b</literal>
        </subtitle>
        <para>`builtins.trace`, but the value is `builtins.deepSeq`ed first.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>x</varname>
            </term>
            <listitem>
              <para>The value to trace</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>y</varname>
            </term>
            <listitem>
              <para>The value to return</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <example>
          <title>
            <function>lib.debug.traceSeq</function> usage example</title>
          <programlisting><![CDATA[
trace { a.b.c = 3; } null
trace: { a = <CODE>; }
=> null
traceSeq { a.b.c = 3; } null
trace: { a = { b = { c = 3; }; }; }
=> null
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.debug.traceSeq" />
  </section>
  <section xml:id="function-library-lib.debug.traceSeqN">
    <title>
      <function>lib.debug.traceSeqN</function>
    </title>
    <xi:include href="./overrides/lib.debug.traceSeqN.xml">
      <xi:fallback>
        <para>Like `traceSeq`, but only evaluate down to depth n.
This is very useful because lots of `traceSeq` usages
lead to an infinite recursion.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>depth</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>x</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>y</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <example>
          <title>
            <function>lib.debug.traceSeqN</function> usage example</title>
          <programlisting><![CDATA[
traceSeqN 2 { a.b.c = 3; } null
trace: { a = { b = {â€¦}; }; }
=> null
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.debug.traceSeqN" />
  </section>
  <section xml:id="function-library-lib.debug.traceValSeqFn">
    <title>
      <function>lib.debug.traceValSeqFn</function>
    </title>
    <xi:include href="./overrides/lib.debug.traceValSeqFn.xml">
      <xi:fallback>
        <para>A combination of `traceVal` and `traceSeq` that applies a
provided function to the value to be traced after `deepSeq`ing
it.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>f</varname>
            </term>
            <listitem>
              <para>Function to apply</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>v</varname>
            </term>
            <listitem>
              <para>Value to trace</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.debug.traceValSeqFn" />
  </section>
  <section xml:id="function-library-lib.debug.traceValSeq">
    <title>
      <function>lib.debug.traceValSeq</function>
    </title>
    <xi:include href="./overrides/lib.debug.traceValSeq.xml">
      <xi:fallback>
        <para>A combination of `traceVal` and `traceSeq`.</para>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.debug.traceValSeq" />
  </section>
  <section xml:id="function-library-lib.debug.traceValSeqNFn">
    <title>
      <function>lib.debug.traceValSeqNFn</function>
    </title>
    <xi:include href="./overrides/lib.debug.traceValSeqNFn.xml">
      <xi:fallback>
        <para>A combination of `traceVal` and `traceSeqN` that applies a
provided function to the value to be traced.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>f</varname>
            </term>
            <listitem>
              <para>Function to apply</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>depth</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>v</varname>
            </term>
            <listitem>
              <para>Value to trace</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.debug.traceValSeqNFn" />
  </section>
  <section xml:id="function-library-lib.debug.traceValSeqN">
    <title>
      <function>lib.debug.traceValSeqN</function>
    </title>
    <xi:include href="./overrides/lib.debug.traceValSeqN.xml">
      <xi:fallback>
        <para>A combination of `traceVal` and `traceSeqN`.</para>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.debug.traceValSeqN" />
  </section>
  <section xml:id="function-library-lib.debug.runTests">
    <title>
      <function>lib.debug.runTests</function>
    </title>
    <xi:include href="./overrides/lib.debug.runTests.xml">
      <xi:fallback>
        <para>Evaluate a set of tests.  A test is an attribute set `{expr,
expected}`, denoting an expression and its expected result.  The
result is a list of failed tests, each represented as `{name,
expected, actual}`, denoting the attribute name of the failing
test and its expected and actual results.</para>
        <para>Used for regression testing of the functions in lib; see
tests.nix for an example. Only tests having names starting with
"test" are run.</para>
        <para>Add attr { tests = ["testName"]; } to run these tests only.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>tests</varname>
            </term>
            <listitem>
              <para>Tests to run</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.debug.runTests" />
  </section>
  <section xml:id="function-library-lib.debug.testAllTrue">
    <title>
      <function>lib.debug.testAllTrue</function>
    </title>
    <xi:include href="./overrides/lib.debug.testAllTrue.xml">
      <xi:fallback>
        <para>Create a test assuming that list elements are `true`.</para>
        <variablelist>
          <varlistentry>
            <term>
              <varname>expr</varname>
            </term>
            <listitem>
              <para>Function argument</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <example>
          <title>
            <function>lib.debug.testAllTrue</function> usage example</title>
          <programlisting><![CDATA[
{ testX = allTrue [ true ]; }
]]></programlisting>
        </example>
      </xi:fallback>
    </xi:include>
    <xi:include href="./locations.xml" xpointer="lib.debug.testAllTrue" />
  </section>
</section>