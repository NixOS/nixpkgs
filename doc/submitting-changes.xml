<chapter xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xml:id="chap-submitting-changes">

  <title>Submitting changes</title>

  <section>
    <title>Making patches</title>

    <itemizedlist>
      <listitem>
	<para>Read the <link xlink:href="#chap-packaging-guide">Packaging Guide</link>.</para>
      </listitem>

      <listitem>
	<para>Create a branch for your future fix.

	<itemizedlist>
	  <listitem>
	    <para>You can make branch from a commit of your local
	    <command>nixos-version</command>. This will help you to avoid
	    additional local compilations. Because you will receive packages from
	    binary cache.

	    For example: <command>nixos-version</command> returns
	    <command>15.05.git.0998212 (Dingo)</command>. So you can do:

	    <screen>$ git checkout 0998212
$ git checkout -b 'fix/pkg-name-update'</screen>
	    </para>
	  </listitem>


	</itemizedlist>
	</para>
      </listitem>

      <listitem>
	<para>Make commits of logical units. If you removed pkgs, made
	some major NixOS changes etc., write about them in
	<command>nixos/doc/manual/release-notes/rl-unstable.xml</command>. Write
	a motivation in the commit message if possible. Simple commits such as
	updates and initial commits do not need this.  Check for unnecessary
	whitespace changes with <command>git diff --check</command> before
	committing.  Squash irrelevant commits such as <command>pkg-name: oh,
	forgot to insert whitespace</command>. Use <command>git rebase
	-i</command>.  GitHub will tell you if a pull-request can not be
	merged automatically. In this case rebase you branch against current
	<command>master</command>.</para>
      </listitem>

      <listitem>
	<para>Format the commit title in a way that follows:</para>
	<screen>
(pkg-name | service-name): (from -> to | init at version | refactor | etc)
Additional information.</screen>

	<para>Examples:

	<itemizedlist>
	  <listitem>
	    <para>
	      <command>nginx: init at 2.0.1</command>
	    </para>
	  </listitem>

	  <listitem>
	    <para>
	      <command>firefox: 3.0 -> 3.1.1</command>
	    </para>
	  </listitem>

	  <listitem>
	    <para>
	      <command>hydra service: add bazBaz option</command>
	    </para>
	  </listitem>

	  <listitem>
	    <para>
	      <command>nginx service: refactor config generation</command>
	    </para>
	  </listitem>
	</itemizedlist>
	</para>

	<para>
	  If you're cherry-picking a commit to a stable release branch, always use
	  <command>git cherry-pick -xe</command> and ensure the message contains a
	  clear description about why this needs to be included in the stable
	  branch. An example of a cherry-picked commit would look like
	  this:
	  <screen>
nixos: Refactor the world.

The original commit message describing the reason why the world was torn apart.

(cherry picked from commit abcdef)
Reason: I just had a gut feeling that this would also be wanted by people from
	  the stone age.</screen>
	</para>

      </listitem>

      <listitem>
	<para>Test your changes. The <link xlink:href="#chap-packaging-guide">Packaging Guide</link> describes how to build your package,
	make sure your package builds and runs.
	</para>

	<para>If your change is related to a NixOS module you can run
	relevant tests at <filename>nixos/tests/</filename>. Tests are
	desirable if you are writing a new module. If you do not have
	tests, add the relevant module and settings to your
	configuration file (usually it's
	<filename>/etc/nixos/configuration.nix</filename>). And do <command>sudo nixos-rebuild test -I nixpkgs=&lt;path to your local nixpkgs folder&gt; --fast</command>.
	</para>

	<para>Pull requests are automatically tested by TravisCI. Do
	not rely on this, there are lot of false positives.
	</para>
      </listitem>

    </itemizedlist>
  </section>

  <section>
    <title>Submitting changes</title>

    <para>Push your changes to your fork of nixpkgs and create a
    pull request. The title should be formatted the same way
    commits are. Some maintainers will automatically be notified
    by a bot. Notify additional maintainers by mentions, for example:
    <command>cc @jagajaga @domenkozar</command>.</para>

    <para>Do not close and open a new pull request if you have to
    make changes to commits. Instead, rework your branch by rebasing or
    amending and finally force pushing your branch.
    </para>

    <para>Commits must be sufficiently tested before being merged,
    both for the master and staging branches. If your patch cause a huge
    rebuild, consider basing your patch onto the branch named
    staging. Patches that break other builds can also be considered to be
    staged. The main rule for staging is that it should always be
    mergeable into master. So it should not be used for testing/developing
    potentially destabilizing features (e.g. updating GCC to 4.9, or a new
    X.org release). These should instead go into their own feature
    branches, which can be merged into staging when they are deemed
    sufficiently stable.  If the branch is already in a broken state,
    please refrain from adding extra new breakages. Stabilize it for a few
    days, merge into master, then resume development on staging.  <link
    xlink:href="http://hydra.nixos.org/jobset/nixpkgs/staging#tabs-evaluations">Keep
    an eye on the staging evaluations here</link>.  If any fixes for
    staging happen to be already in master, then master can be merged into
    staging.</para>

    <para>When changing the bootloader installation process, extra
    care must be taken. Grub installations cannot be rolled back,
    hence changes may break people's installations forever. For
    any non-trivial change to the bootloader please file a PR
    asking for review, especially from @edolstra.</para>

  </section>

</chapter>
