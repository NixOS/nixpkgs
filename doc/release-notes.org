* Release 0.14 (June 4, 2012)
  :PROPERTIES:
  :CUSTOM_ID: release-notes-0.14
  :END:

In preparation for the switch from Subversion to Git, this release is
mainly the prevent the Nixpkgs version number from going backwards.
(This would happen because prerelease version numbers produced for the
Git repository are lower than those for the Subversion repository.)

Since the last release, there have been thousands of changes and new
packages by numerous contributors. For details, see the commit logs.

* Release 0.13 (February 5, 2010)
  :PROPERTIES:
  :CUSTOM_ID: release-notes-0.13
  :END:

As always, there are many changes. Some of the most important updates
are:

- Glibc 2.9.

- GCC 4.3.3.

- Linux 2.6.32.

- X.org 7.5.

- KDE 4.3.4.

* Release 0.12 (April 24, 2009)
  :PROPERTIES:
  :CUSTOM_ID: release-notes-0.12
  :END:

There are way too many additions to Nixpkgs since the last release to
list here: for example, the number of packages on Linux has increased
from 1002 to 2159. However, some specific improvements are worth
listing:

- Nixpkgs now has a manual. In particular, it describes the standard
  build environment in detail.

- Major new packages:

  - KDE 4.

  - TeXLive.

  - VirtualBox.

  ... and many others.

- Important updates:

  - Glibc 2.7.

  - GCC 4.2.4.

  - Linux 2.6.25 --- 2.6.28.

  - Firefox 3.

  - X.org 7.3.

- Support for building derivations in a virtual machine, including RPM
  and Debian builds in automatically generated VM images. See
  =pkgs/build-support/vm/default.nix= for details.

- Improved support for building Haskell packages.

The following people contributed to this release: Andres Löh, Arie
Middelkoop, Armijn Hemel, Eelco Dolstra, Lluís Batlle, Ludovic Courtès,
Marc Weber, Mart Kolthof, Martin Bravenboer, Michael Raskin, Nicolas
Pierron, Peter Simons, Pjotr Prins, Rob Vermaas, Sander van der Burg,
Tobias Hammerschmidt, Valentin David, Wouter den Breejen and Yury G.
Kudryashov. In addition, several people contributed patches on the
=nix-dev= mailing list.

* Release 0.11 (September 11, 2007)
  :PROPERTIES:
  :CUSTOM_ID: release-notes-0.11
  :END:

This release has the following improvements:

- The standard build environment (=stdenv=) is now pure on the
  =x86_64-linux= and =powerpc-linux= platforms, just as on =i686-linux=.
  (Purity means that building and using the standard environment has no
  dependencies outside of the Nix store. For instance, it doesn't
  require an external C compiler such as =/usr/bin/gcc=.) Also, the
  statically linked binaries used in the bootstrap process are now
  automatically reproducible, making it easy to update the bootstrap
  tools and to add support for other Linux platforms. See
  =pkgs/stdenv/linux/make-bootstrap-tools.nix= for details.

- Hook variables in the generic builder are now executed using the
  =eval= shell command. This has a major advantage: you can write hooks
  directly in Nix expressions. For instance, rather than writing a
  builder like this:

  #+BEGIN_EXAMPLE
    source $stdenv/setup

    postInstall=postInstall
    postInstall() {
        ln -sf gzip $out/bin/gunzip
        ln -sf gzip $out/bin/zcat
    }

    genericBuild
  #+END_EXAMPLE

  (the =gzip= builder), you can just add this attribute to the
  derivation:

  #+BEGIN_EXAMPLE
    postInstall = "ln -sf gzip $out/bin/gunzip; ln -sf gzip $out/bin/zcat";
  #+END_EXAMPLE

  and so a separate build script becomes unnecessary. This should allow
  us to get rid of most builders in Nixpkgs.

- It is now possible to have the generic builder pass arguments to
  =configure= and =make= that contain whitespace. Previously, for
  example, you could say in a builder,

  #+BEGIN_EXAMPLE
    configureFlags="CFLAGS=-O0"
  #+END_EXAMPLE

  but not

  #+BEGIN_EXAMPLE
    configureFlags="CFLAGS=-O0 -g"
  #+END_EXAMPLE

  since the =-g= would be interpreted as a separate argument to
  =configure=. Now you can say

  #+BEGIN_EXAMPLE
    configureFlagsArray=("CFLAGS=-O0 -g")
  #+END_EXAMPLE

  or similarly

  #+BEGIN_EXAMPLE
    configureFlagsArray=("CFLAGS=-O0 -g" "LDFLAGS=-L/foo -L/bar")
  #+END_EXAMPLE

  which does the right thing. Idem for =makeFlags=, =installFlags=,
  =checkFlags= and =distFlags=.

  Unfortunately you can't pass arrays to Bash through the environment,
  so you can't put the array above in a Nix expression, e.g.,

  #+BEGIN_EXAMPLE
    configureFlagsArray = ["CFLAGS=-O0 -g"];
  #+END_EXAMPLE

  since it would just be flattened to a since string. However, you /can/
  use the inline hooks described above:

  #+BEGIN_EXAMPLE
    preConfigure = "configureFlagsArray=(\"CFLAGS=-O0 -g\")";
  #+END_EXAMPLE

- The function =fetchurl= now has support for two different kinds of
  mirroring of files. First, it has support for /content-addressable
  mirrors/. For example, given the =fetchurl= call

  #+BEGIN_EXAMPLE
    fetchurl {
      url = http://releases.mozilla.org/.../firefox-2.0.0.6-source.tar.bz2;
      sha1 = "eb72f55e4a8bf08e8c6ef227c0ade3d068ba1082";
    }
  #+END_EXAMPLE

  =fetchurl= will first try to download this file from
  [[http://tarballs.nixos.org/sha1/eb72f55e4a8bf08e8c6ef227c0ade3d068ba1082]].
  If that file doesn't exist, it will try the original URL. In general,
  the “content-addressed” location is mirror=/=hash-type=/=hash. There
  is currently only one content-addressable mirror
  ([[http://tarballs.nixos.org]]), but more can be specified in the
  =hashedMirrors= attribute in
  =pkgs/build-support/fetchurl/mirrors.nix=, or by setting the
  NIX_HASHED_MIRRORS environment variable to a whitespace-separated list
  of URLs.

  Second, =fetchurl= has support for widely-mirrored distribution sites
  such as SourceForge or the Linux kernel archives. Given a URL of the
  form =mirror://site/path=, it will try to download path from a
  configurable list of mirrors for site. (This idea was borrowed from
  Gentoo Linux.) Example:

  #+BEGIN_EXAMPLE
    fetchurl {
      url = mirror://gnu/gcc/gcc-4.2.0/gcc-core-4.2.0.tar.bz2;
      sha256 = "0ykhzxhr8857dr97z0j9wyybfz1kjr71xk457cfapfw5fjas4ny1";
    }
  #+END_EXAMPLE

  Currently site can be =sourceforge=, =gnu= and =kernel=. The list of
  mirrors is defined in =pkgs/build-support/fetchurl/mirrors.nix=. You
  can override the list of mirrors for a particular site by setting the
  environment variable NIX_MIRRORS_site, e.g.

  #+BEGIN_EXAMPLE
    export NIX_MIRRORS_sourceforge=http://osdn.dl.sourceforge.net/sourceforge/
  #+END_EXAMPLE

- Important updates:

  - Glibc 2.5.

  - GCC 4.1.2.

  - Gnome 2.16.3.

  - X11R7.2.

  - Linux 2.6.21.7 and 2.6.22.6.

  - Emacs 22.1.

- Major new packages:

  - KDE 3.5.6 Base.

  - Wine 0.9.43.

  - OpenOffice 2.2.1.

  - Many Linux system packages to support NixOS.

The following people contributed to this release: Andres Löh, Arie
Middelkoop, Armijn Hemel, Eelco Dolstra, Marc Weber, Mart Kolthof,
Martin Bravenboer, Michael Raskin, Wouter den Breejen and Yury G.
Kudryashov.

* Release 0.10 (October 12, 2006)
  :PROPERTIES:
  :CUSTOM_ID: release-notes-0.10
  :END:

#+BEGIN_QUOTE
  *Note*

  This release of Nixpkgs requires
  [[http://nixos.org/releases/nix/nix-0.10/][Nix 0.10]] or higher.
#+END_QUOTE

This release has the following improvements:

- =pkgs/system/all-packages-generic.nix= is gone, we now just have
  =pkgs/top-level/all-packages.nix= that contains all available
  packages. This should cause much less confusion with users.
  =all-packages.nix= is a function that by default returns packages for
  the current platform, but you can override this by specifying a
  different =system= argument.

- Certain packages in Nixpkgs are now user-configurable through a
  configuration file, i.e., without having to edit the Nix expressions
  in Nixpkgs. For instance, the Firefox provided in the Nixpkgs channel
  is built without the RealPlayer plugin (for legal reasons).
  Previously, you could easily enable RealPlayer support by editing the
  call to the Firefox function in =all-packages.nix=, but such changes
  are not respected when Firefox is subsequently updated through the
  Nixpkgs channel.

  The Nixpkgs configuration file (found in =~/.nixpkgs/config.nix= or
  through the NIXPKGS_CONFIG environment variable) is an attribute set
  that contains configuration options that =all-packages.nix= reads and
  uses for certain packages. For instance, the following configuration
  file:

  #+BEGIN_EXAMPLE
    {
      firefox = {
        enableRealPlayer = true;
      };
    }
  #+END_EXAMPLE

  persistently enables RealPlayer support in the Firefox build.

  (Actually, =firefox.enableRealPlayer= is the /only/ configuration
  option currently available, but more are sure to be added.)

- Support for new platforms:

  - =i686-cygwin=, i.e., Windows (using
    [[http://www.cygwin.com/][Cygwin]]). The standard environment on
    =i686-cygwin= by default builds binaries for the Cygwin environment
    (i.e., it uses Cygwin tools and produces executables that use the
    Cygwin library). However, there is also a standard environment that
    produces binaries that use [[http://www.mingw.org/][MinGW]]. You can
    use it by calling =all-package.nix= with the =stdenvType= argument
    set to ="i686-mingw"=.

  - =i686-darwin=, i.e., Mac OS X on Intel CPUs.

  - =powerpc-linux=.

  - =x86_64-linux=, i.e., Linux on 64-bit AMD/Intel CPUs. Unlike
    =i686-linux=, this platform doesn't have a pure =stdenv= yet.

- The default compiler is now GCC 4.1.1.

- X11 updated to X.org's X11R7.1.

- Notable new packages:

  - Opera.

  - Microsoft Visual C++ 2005 Express Edition and the Windows SDK.

  In total there are now around 809 packages in Nixpkgs.

- It is now /much/ easier to override the default C compiler and other
  tools in =stdenv= for specific packages. =all-packages.nix= provides
  two utility functions for this purpose: =overrideGCC= and
  =overrideInStdenv=. Both take a =stdenv= and return an augmented
  =stdenv=; the formed changes the C compiler, and the latter adds
  additional packages to the front of =stdenv='s initial PATH, allowing
  tools to be overridden.

  For instance, the package =strategoxt= doesn't build with the GNU Make
  in =stdenv= (version 3.81), so we call it with an augmented =stdenv=
  that uses GNU Make 3.80:

  #+BEGIN_EXAMPLE
    strategoxt = (import ../development/compilers/strategoxt) {
      inherit fetchurl pkgconfig sdf aterm;
      stdenv = overrideInStdenv stdenv [gnumake380];
    };

    gnumake380 = ...;
  #+END_EXAMPLE

  Likewise, there are many packages that don't compile with the default
  GCC (4.1.1), but that's easily fixed:

  #+BEGIN_EXAMPLE
    exult = import ../games/exult {
      inherit fetchurl SDL SDL_mixer zlib libpng unzip;
      stdenv = overrideGCC stdenv gcc34;
    };
  #+END_EXAMPLE

- It has also become much easier to experiment with changes to the
  =stdenv= setup script (which notably contains the generic builder).
  Since edits to =pkgs/stdenv/generic/setup.sh= trigger a rebuild of
  /everything/, this was formerly quite painful. But now =stdenv=
  contains a function to “regenerate” =stdenv= with a different setup
  script, allowing the use of a different setup script for specific
  packages:

  #+BEGIN_EXAMPLE
    pkg = import ... {
      stdenv = stdenv.regenerate ./my-setup.sh;
      ...
    }
  #+END_EXAMPLE

- Packages can now have a human-readable /description/ field. Package
  descriptions are shown by =nix-env -qa --description=. In addition,
  they're shown on the Nixpkgs release page. A description can be added
  to a package as follows:

  #+BEGIN_EXAMPLE
    stdenv.mkDerivation {
      name = "exult-1.2";
      ...
      meta = {
        description = "A reimplementation of the Ultima VII game engine";
      };
    }
  #+END_EXAMPLE

  The =meta= attribute is not passed to the builder, so changes to the
  description do not trigger a rebuild. Additional =meta= attributes may
  be defined in the future (such as the URL of the package's homepage,
  the license, etc.).

The following people contributed to this release: Andres Löh, Armijn
Hemel, Christof Douma, Eelco Dolstra, Eelco Visser, Mart Kolthof, Martin
Bravenboer, Merijn de Jonge, Rob Vermaas and Roy van den Broek.

* Release 0.9 (January 31, 2006)
  :PROPERTIES:
  :CUSTOM_ID: release-notes-0.9
  :END:

There have been zillions of changes since the last release of Nixpkgs.
Many packages have been added or updated. The following are some of the
more notable changes:

- Distribution files have been moved to [[http://nixos.org/]].

- The C library on Linux, Glibc, has been updated to version 2.3.6.

- The default compiler is now GCC 3.4.5. GCC 4.0.2 is also available.

- The old, unofficial Xlibs has been replaced by the official
  modularised X11 distribution from X.org, i.e., X11R7.0. X11R7.0
  consists of 287 (!) packages, all of which are in Nixpkgs though not
  all have been tested. It is now possible to build a working X server
  (previously we only had X client libraries). We use a fully Nixified X
  server on NixOS.

- The Sun JDK 5 has been purified, i.e., it doesn't require any non-Nix
  components such as =/lib/ld-linux.so.2=. This means that Java
  applications such as Eclipse and Azureus can run on NixOS.

- Hardware-accelerated OpenGL support, used by games like Quake 3 (which
  is now built from source).

- Improved support for FreeBSD on x86.

- Improved Haskell support; e.g., the GHC build is now pure.

- Some support for cross-compilation: cross-compiling builds of GCC and
  Binutils, and cross-compiled builds of the C library uClibc.

- Notable new packages:

  - teTeX, including support for building LaTeX documents using Nix
    (with automatic dependency determination).

  - Ruby.

  - System-level packages to support NixOS, e.g. Grub, GNU =parted= and
    so on.

  - =ecj=, the Eclipse Compiler for Java, so we finally have a freely
    distributable compiler that supports Java 5.0.

  - =php=.

  - The GIMP.

  - Inkscape.

  - GAIM.

  - =kdelibs=. This allows us to add KDE-based packages (such as
    =kcachegrind=).

The following people contributed to this release: Andres Löh, Armijn
Hemel, Bogdan Dumitriu, Christof Douma, Eelco Dolstra, Eelco Visser,
Mart Kolthof, Martin Bravenboer, Rob Vermaas and Roy van den Broek.

* Release 0.8 (April 11, 2005)
  :PROPERTIES:
  :CUSTOM_ID: release-notes-0.8
  :END:

This release is mostly to remain synchronised with the changed hashing
scheme in Nix 0.8.

Notable updates:

- Adobe Reader 7.0

- Various security updates (zlib 1.2.2, etc.)

* Release 0.7 (March 14, 2005)
  :PROPERTIES:
  :CUSTOM_ID: release-notes-0.7
  :END:

- The bootstrap process for the standard build environment on Linux
  (stdenv-linux) has been improved. It is no longer dependent in its
  initial bootstrap stages on the system Glibc, GCC, and other tools.
  Rather, Nixpkgs contains a statically linked bash and curl, and uses
  that to download other statically linked tools. These are then used to
  build a Glibc and dynamically linked versions of all other tools.

  This change also makes the bootstrap process faster. For instance, GCC
  is built only once instead of three times.

  (Contributed by Armijn Hemel.)

- Tarballs used by Nixpkgs are now obtained from the same server that
  hosts Nixpkgs ([[http://catamaran.labs.cs.uu.nl/]]). This reduces the
  risk of packages being unbuildable due to moved or deleted files on
  various servers.

- There now is a generic mechanism for building Perl modules. See the
  various Perl modules defined in pkgs/system/all-packages-generic.nix.

- Notable new packages:

  - Qt 3

  - MySQL

  - MythTV

  - Mono

  - MonoDevelop (alpha)

  - Xine

- Notable updates:

  - GCC 3.4.3

  - Glibc 2.3.4

  - GTK 2.6


