* Overlays
  :PROPERTIES:
  :CUSTOM_ID: chap-overlays
  :END:

This chapter describes how to extend and change Nixpkgs using overlays.
Overlays are used to add layers in the fixed-point used by Nixpkgs to
compose the set of all packages.

Nixpkgs can be configured with a list of overlays, which are applied in
order. This means that the order of the overlays can be significant if
multiple layers override the same package.

* Installing overlays
  :PROPERTIES:
  :CUSTOM_ID: sec-overlays-install
  :END:

The list of overlays can be set either explicitly in a Nix expression,
or through =<nixpkgs-overlays>= or user configuration files.

** Set overlays in NixOS or Nix expressions
   :PROPERTIES:
   :CUSTOM_ID: sec-overlays-argument
   :END:

On a NixOS system the value of the =nixpkgs.overlays= option, if
present, is passed to the system Nixpkgs directly as an argument. Note
that this does not affect the overlays for non-NixOS operations (e.g.
=nix-env=), which are [[#sec-overlays-lookup][looked]] up independently.

The list of overlays can be passed explicitly when importing nixpkgs,
for example =import <nixpkgs> { overlays = [ overlay1 overlay2 ]; }=.

Further overlays can be added by calling the =pkgs.extend= or
=pkgs.appendOverlays=, although it is often preferable to avoid these
functions, because they recompute the Nixpkgs fixpoint, which is
somewhat expensive to do.

** Install overlays via configuration lookup
   :PROPERTIES:
   :CUSTOM_ID: sec-overlays-lookup
   :END:

The list of overlays is determined as follows.

1. First, if an [[#sec-overlays-argument][=overlays= argument]] to the
   Nixpkgs function itself is given, then that is used and no path
   lookup will be performed.

2. Otherwise, if the Nix path entry =<nixpkgs-overlays>= exists, we look
   for overlays at that path, as described below.

   See the section on =NIX_PATH= in the Nix manual for more details on
   how to set a value for =<nixpkgs-overlays>.=

3. If one of =~/.config/nixpkgs/overlays.nix= and
   =~/.config/nixpkgs/overlays/= exists, then we look for overlays at
   that path, as described below. It is an error if both exist.

If we are looking for overlays at a path, then there are two cases:

- If the path is a file, then the file is imported as a Nix expression
  and used as the list of overlays.

- If the path is a directory, then we take the content of the directory,
  order it lexicographically, and attempt to interpret each as an
  overlay by:

  - Importing the file, if it is a =.nix= file.

  - Importing a top-level =default.nix= file, if it is a directory.

Because overlays that are set in NixOS configuration do not affect
non-NixOS operations such as =nix-env=, the =overlays.nix= option
provides a convenient way to use the same overlays for a NixOS system
configuration and user configuration: the same file can be used as
=overlays.nix= and imported as the value of =nixpkgs.overlays=.

* Defining overlays
  :PROPERTIES:
  :CUSTOM_ID: sec-overlays-definition
  :END:

Overlays are Nix functions which accept two arguments, conventionally
called =self= and =super=, and return a set of packages. For example,
the following is a valid overlay.

#+BEGIN_EXAMPLE
  self: super:

  {
    boost = super.boost.override {
      python = self.python3;
    };
    rr = super.callPackage ./pkgs/rr {
      stdenv = self.stdenv_32bit;
    };
  }
#+END_EXAMPLE

The first argument (=self=) corresponds to the final package set. You
should use this set for the dependencies of all packages specified in
your overlay. For example, all the dependencies of =rr= in the example
above come from =self=, as well as the overridden dependencies used in
the =boost= override.

The second argument (=super=) corresponds to the result of the
evaluation of the previous stages of Nixpkgs. It does not contain any of
the packages added by the current overlay, nor any of the following
overlays. This set should be used either to refer to packages you wish
to override, or to access functions defined in Nixpkgs. For example, the
original recipe of =boost= in the above example, comes from =super=, as
well as the =callPackage= function.

The value returned by this function should be a set similar to
=pkgs/top-level/all-packages.nix=, containing overridden and/or new
packages.

Overlays are similar to other methods for customizing Nixpkgs, in
particular the =packageOverrides= attribute described in
[[#sec-modify-via-packageOverrides][???]]. Indeed, =packageOverrides=
acts as an overlay with only the =super= argument. It is therefore
appropriate for basic use, but overlays are more powerful and easier to
distribute.
