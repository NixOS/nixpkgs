* Overriding
  :PROPERTIES:
  :CUSTOM_ID: chap-overrides
  :END:

Sometimes one wants to override parts of =nixpkgs=, e.g. derivation
attributes, the results of derivations.

These functions are used to make changes to packages, returning only
single packages. [[#chap-overlays][Overlays]], on the other hand, can be
used to combine the overridden packages across the entire package set of
Nixpkgs.

* <pkg>.override
  :PROPERTIES:
  :CUSTOM_ID: sec-pkg-override
  :END:

The function =override= is usually available for all the derivations in
the nixpkgs expression (=pkgs=).

It is used to override the arguments passed to a function.

Example usages:

#+BEGIN_EXAMPLE
  pkgs.foo.override { arg1 = val1; arg2 = val2; ... }
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  import pkgs.path { overlays = [ (self: super: {
    foo = super.foo.override { barSupport = true ; };
    })]};
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  mypkg = pkgs.callPackage ./mypkg.nix {
    mydep = pkgs.mydep.override { ... };
    }
#+END_EXAMPLE

In the first example, =pkgs.foo= is the result of a function call with
some default arguments, usually a derivation. Using =pkgs.foo.override=
will call the same function with the given new arguments.

* <pkg>.overrideAttrs
  :PROPERTIES:
  :CUSTOM_ID: sec-pkg-overrideAttrs
  :END:

The function =overrideAttrs= allows overriding the attribute set passed
to a =stdenv.mkDerivation= call, producing a new derivation based on the
original one. This function is available on all derivations produced by
the =stdenv.mkDerivation= function, which is most packages in the
nixpkgs expression =pkgs=.

Example usage:

#+BEGIN_EXAMPLE
  helloWithDebug = pkgs.hello.overrideAttrs (oldAttrs: rec {
    separateDebugInfo = true;
  });
#+END_EXAMPLE

In the above example, the =separateDebugInfo= attribute is overridden to
be true, thus building debug info for =helloWithDebug=, while all other
attributes will be retained from the original =hello= package.

The argument =oldAttrs= is conventionally used to refer to the attr set
originally passed to =stdenv.mkDerivation=.

#+BEGIN_QUOTE
  *Note*

  Note that =separateDebugInfo= is processed only by the
  =stdenv.mkDerivation= function, not the generated, raw Nix derivation.
  Thus, using =overrideDerivation= will not work in this case, as it
  overrides only the attributes of the final derivation. It is for this
  reason that =overrideAttrs= should be preferred in (almost) all cases
  to =overrideDerivation=, i.e. to allow using =stdenv.mkDerivation= to
  process input arguments, as well as the fact that it is easier to use
  (you can use the same attribute names you see in your Nix code,
  instead of the ones generated (e.g. =buildInputs= vs
  =nativeBuildInputs=), and it involves less typing).
#+END_QUOTE

* <pkg>.overrideDerivation
  :PROPERTIES:
  :CUSTOM_ID: sec-pkg-overrideDerivation
  :END:

#+BEGIN_QUOTE
  *Warning*

  You should prefer =overrideAttrs= in almost all cases, see its
  documentation for the reasons why. =overrideDerivation= is not
  deprecated and will continue to work, but is less nice to use and does
  not have as many abilities as =overrideAttrs=.
#+END_QUOTE

#+BEGIN_QUOTE
  *Warning*

  Do not use this function in Nixpkgs as it evaluates a Derivation
  before modifying it, which breaks package abstraction and removes
  error-checking of function arguments. In addition, this
  evaluation-per-function application incurs a performance penalty,
  which can become a problem if many overrides are used. It is only
  intended for ad-hoc customisation, such as in
  =~/.config/nixpkgs/config.nix=.
#+END_QUOTE

The function =overrideDerivation= creates a new derivation based on an
existing one by overriding the original's attributes with the attribute
set produced by the specified function. This function is available on
all derivations defined using the =makeOverridable= function. Most
standard derivation-producing functions, such as =stdenv.mkDerivation=,
are defined using this function, which means most packages in the
nixpkgs expression, =pkgs=, have this function.

Example usage:

#+BEGIN_EXAMPLE
  mySed = pkgs.gnused.overrideDerivation (oldAttrs: {
    name = "sed-4.2.2-pre";
    src = fetchurl {
      url = ftp://alpha.gnu.org/gnu/sed/sed-4.2.2-pre.tar.bz2;
      sha256 = "11nq06d131y4wmf3drm0yk502d2xc6n5qy82cg88rb9nqd2lj41k";
    };
    patches = [];
  });
#+END_EXAMPLE

In the above example, the =name=, =src=, and =patches= of the derivation
will be overridden, while all other attributes will be retained from the
original derivation.

The argument =oldAttrs= is used to refer to the attribute set of the
original derivation.

#+BEGIN_QUOTE
  *Note*

  A package's attributes are evaluated *before* being modified by the
  =overrideDerivation= function. For example, the =name= attribute
  reference in =url = "mirror://gnu/hello/${name}.tar.gz";= is filled-in
  *before* the =overrideDerivation= function modifies the attribute set.
  This means that overriding the =name= attribute, in this example,
  *will not* change the value of the =url= attribute. Instead, we need
  to override both the =name= *and* =url= attributes.
#+END_QUOTE

* lib.makeOverridable
  :PROPERTIES:
  :CUSTOM_ID: sec-lib-makeOverridable
  :END:

The function =lib.makeOverridable= is used to make the result of a
function easily customizable. This utility only makes sense for
functions that accept an argument set and return an attribute set.

Example usage:

#+BEGIN_EXAMPLE
  f = { a, b }: { result = a+b; };
  c = lib.makeOverridable f { a = 1; b = 2; };
#+END_EXAMPLE

The variable =c= is the value of the =f= function applied with some
default arguments. Hence the value of =c.result= is =3=, in this
example.

The variable =c= however also has some additional functions, like
[[#sec-pkg-override][c.override]] which can be used to override the
default arguments. In this example the value of
=(c.override { a = 4; }).result= is 6.
